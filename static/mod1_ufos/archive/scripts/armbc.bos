piece base,tur1,tur2,tur3,sleeve1,sleeve2,sleeve3,wake1,wake2,body;
piece barrel1a, barrel1b, barrel2a, barrel2b, barrel2c, flare1a, flare1b, flare2a, flare2b, flare2c, flare3a, flare3b, flare3c;

static-var fire1,fire2,fire3,restore_delay,canshoot;

#define SIG_AIM1 2
#define SIG_AIM2 4
#define SIG_AIM3 8
#define SIG_WAKE 16

#define SMOKEPIECE1 base
#include "smokeunit.h"
#include "exptype.h"
#include "SFXtype.h"

Create()
{ hide flare1a;
  hide flare1b;
  hide flare2a;
  hide flare2b;
  hide flare2c;
  hide flare3a;
  hide flare3b;
  hide flare3c;
  fire1=0;
  fire2=0;
  fire3=0;
  canshoot=1;
  restore_delay=3000;
  start-script SmokeUnit();
 }

Reload()
{
	sleep 2250;
	canshoot = 1;
}

SetMaxReloadTime(time)
{ restore_delay = time * 2;
 }

RestoreAfterDelay1()
{ sleep restore_delay;
  turn tur1 to y-axis 0 speed <5>;
  turn sleeve1 to x-axis 0 speed <5>;
 }
RestoreAfterDelay2()
{ sleep restore_delay;
  turn tur2 to y-axis 0 speed <55>;
  turn sleeve2 to x-axis 0 speed <25>;
 }
RestoreAfterDelay3()
{ sleep restore_delay;
  turn tur3 to y-axis 0 speed <150>;
  turn sleeve3 to x-axis 0 speed <150>;
 }


StartMoving()
{ signal SIG_WAKE;
  set-signal-mask SIG_WAKE;
  while (TRUE)
   { emit-sfx SFXTYPE_WAKE1 from wake1;
     emit-sfx SFXTYPE_WAKE1 from wake2;
     sleep 300;
    }
 }

StopMoving()
{ signal SIG_WAKE;
 }

AimPrimary(heading,pitch)
{ signal SIG_AIM1;
  set-signal-mask SIG_AIM1;
  turn tur1 to y-axis heading speed <10>;
  turn sleeve1 to x-axis (0-pitch) speed <10>;
  wait-for-turn tur1 around y-axis;
  wait-for-turn sleeve1 around x-axis;
  start-script RestoreAfterDelay1();
  return(TRUE);
 }

AimSecondary(heading,pitch)
{ signal SIG_AIM2;
  set-signal-mask SIG_AIM2;
  turn tur2 to y-axis heading speed <80>;
  turn sleeve2 to x-axis (0-pitch) speed <55>;
  wait-for-turn tur2 around y-axis;
  wait-for-turn sleeve2 around x-axis;
  start-script RestoreAfterDelay2();
  return(TRUE);
 }

AimTertiary(heading,pitch)
{ 
  signal SIG_AIM3;
  set-signal-mask SIG_AIM3;
  WHILE (!canshoot)
	{
	SLEEP 25;
	}
  turn tur3 to y-axis heading speed <150>;
  turn sleeve3 to x-axis (0-pitch) speed <150>;
  wait-for-turn tur3 around y-axis;
  wait-for-turn sleeve3 around x-axis;
  start-script RestoreAfterDelay3();
  return(TRUE);
 }

FirePrimary()
{ 
if (fire1==0)
   { 
     move barrel1a to z-axis [-2] speed [500];
     show flare1a;
     sleep 150; 
     move barrel1a to z-axis [0] speed [.5];
     hide flare1a; 
     fire1=1; 
     return 0; 
   }
  if (fire1==1)
   { 
     move barrel1b to z-axis [-2] speed [500];
     show flare1b;
     sleep 150; 
     move barrel1b to z-axis [0] speed [.5];
     hide flare1b; 
     fire1=0; 
     return 0; 
    }
}

FireSecondary()
{
if (fire2==0)
   { 
     move barrel2a to z-axis [-1] speed [500];
     show flare2a;
     sleep 150; 
     move barrel2a to z-axis [0] speed [1.0];
     hide flare2a; 
     fire2=1; 
     return 0; 
   }
  if (fire2==1)
   { 
     move barrel2b to z-axis [-1] speed [500];
     show flare2b;
     sleep 150; 
     move barrel2b to z-axis [0] speed [1.0];
     hide flare2b; 
     fire2=2; 
     return 0; 
    }  
  if (fire2==2)
   { 
     move barrel2c to z-axis [-1] speed [500];
     show flare2c;
     sleep 150; 
     move barrel2c to z-axis [0] speed [1.0];
     hide flare2c; 
     fire2=0; 
     return 0; 
    }  

}

FireTertiary()
{
if (fire3==0)
   { 
     show flare3a;
     sleep 150; 
     hide flare3a; 
     fire3=1; 
     return 0; 
   }
  if (fire3==1)
   { 
     show flare3b;
     sleep 150; 
     hide flare3b; 
     fire3=2; 
     return 0; 
    }  
  if (fire3==2)
   { 
     show flare3c;
     sleep 150; 
     hide flare3c; 
     fire3=0;      
     canshoot=0;
     call-script Reload();
    }  
}

AimFromPrimary(piecenum)
{ piecenum=tur1;
 }

AimFromSecondary(piecenum)
{ piecenum=tur2;
 }

AimFromTertiary(piecenum)
{ piecenum=tur3;
 }

QueryPrimary(piecenum)
{ if (fire1==0) 
   { piecenum=flare1a; }
  if (fire1==1) 
   { piecenum=flare1b; }
 return 0; 
 }

QuerySecondary(piecenum)
{ if (fire2==0) 
   { piecenum=flare2a; }
  if (fire2==1) 
   { piecenum=flare2b; }
  if (fire2==2) 
   { piecenum=flare2c; }
 return 0; 
 }

QueryTertiary(piecenum)
{ if (fire3==0) 
   { piecenum=flare3a; }
  if (fire3==1) 
   { piecenum=flare3b; }
  if (fire3==2) 
   { piecenum=flare3c; 
   }
 return 0; 
 }

SweetSpot(piecenum)
{ piecenum=tur1;
 }

Killed( severity, corpsetype )
{ 
  explode barrel1a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
  explode barrel2b type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
  explode barrel2c type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
  explode base type BITMAPONLY | BITMAP5;
  explode tur1 type BITMAPONLY | BITMAP4;
  explode tur3 type BITMAPONLY | BITMAP3;
  explode wake1 type BITMAPONLY | BITMAP3;
  explode wake2 type BITMAPONLY | BITMAP3;
  explode flare1a type BITMAPONLY | BITMAP3;
  explode flare2b type BITMAPONLY | BITMAP3;
  explode flare3b type BITMAPONLY | BITMAP3;
  if (severity <= 25)
   { corpsetype = 1; return( 0 ); }
  explode tur1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
  explode barrel2a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
  explode tur3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
  explode barrel1a type SHATTER | EXPLODE_ON_HIT | BITMAP1;
  if (severity <= 50)
   { corpsetype = 2; return( 0 ); }
  corpsetype = 3;
  explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
 }
