#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  missle1, missle2, base, winga, wingb, thrusta1, thrusta2, thrustb;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		turn winga to z-axis <0.> now;
		turn winga to z-axis <-91.> speed <63.>;
		turn wingb to z-axis <0.> now;
		turn wingb to z-axis <91.> speed <63.>;
		sleep 1443;
	}
	sleep 23;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		turn winga to z-axis <-91.> now;
		turn winga to z-axis <0.> speed <63.>;
		turn wingb to z-axis <91.> now;
		turn wingb to z-axis <0.> speed <63.>;
		sleep 1445;
	}
	sleep 24;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

MoveRate2()
{
	if( Rand( 1, 10 ) == 1 )
	{
		if( !Static_Var_1 )
		{
			Static_Var_1 = 1;
			turn base to z-axis <240.> speed <120.>;
			wait-for-turn base around z-axis;
			turn base to z-axis <120.> speed <180.>;
			wait-for-turn base around z-axis;
			turn base to z-axis <0.> speed <120.>;
			Static_Var_1 = 0;
		}
	}
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

FireSecondary()
{
	if( Static_Var_2 == 0 )
	{
		Static_Var_2 = 1;
		return (0);
	}
	if( Static_Var_2 == 1 )
	{
		Static_Var_2 = 0;
		return (0);
	}
}

QuerySecondary(piecenum)
{
	if( Static_Var_2 == 0 )
	{
		piecenum = missle1;
	}
	if( Static_Var_2 == 1 )
	{
		piecenum = missle2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode missle1 type BITMAPONLY | BITMAP1;
		explode missle2 type BITMAPONLY | BITMAP1;
		explode thrusta1 type BITMAPONLY | BITMAP1;
		explode thrusta2 type BITMAPONLY | BITMAP1;
		explode thrustb type BITMAPONLY | BITMAP1;
		explode winga type BITMAPONLY | BITMAP1;
		explode wingb type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode missle1 type FALL | BITMAP1;
		explode missle2 type FALL | BITMAP1;
		explode thrusta1 type FALL | BITMAP1;
		explode thrusta2 type FALL | BITMAP1;
		explode thrustb type FALL | BITMAP1;
		explode winga type SHATTER | BITMAP1;
		explode wingb type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode missle1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode missle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode thrusta1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode thrusta2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode thrustb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode winga type SHATTER | BITMAP1;
		explode wingb type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode missle1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode missle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode thrusta1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode thrusta2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode thrustb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode winga type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wingb type BITMAPONLY | BITMAP1;
}
