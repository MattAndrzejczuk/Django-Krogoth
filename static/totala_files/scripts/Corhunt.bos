#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, rsonar, lsonar, lwing, rwing, ltail, rtail, wake1,
       bombdrop;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		turn lwing to z-axis <0.> now;
		turn lwing to z-axis <90.> speed <112.>;
		turn rwing to z-axis <0.> now;
		turn rwing to z-axis <-90.> speed <112.>;
		sleep 802;
	}
	if( TRUE )
	{
		turn ltail to z-axis <45.> speed <55.>;
		turn rtail to z-axis <-45.> speed <55.>;
		sleep 809;
	}
	if( TRUE )
	{
		move rsonar to y-axis [7.] speed [13.];
		move lsonar to y-axis [7.] speed [13.];
		sleep 491;
	}
	sleep 25;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move rsonar to y-axis [7.] now;
		move rsonar to y-axis [0.] speed [13.];
		move lsonar to y-axis [7.] now;
		move lsonar to y-axis [0.] speed [13.];
		turn lwing to z-axis <90.> now;
		turn rwing to z-axis <-90.> now;
		turn ltail to z-axis <45.> now;
		turn rtail to z-axis <-45.> now;
		sleep 497;
	}
	if( TRUE )
	{
		turn ltail to z-axis <0.> speed <56.>;
		turn rtail to z-axis <0.> speed <56.>;
		sleep 806;
	}
	if( TRUE )
	{
		turn lwing to z-axis <0.> speed <112.>;
		turn rwing to z-axis <0.> speed <112.>;
		sleep 800;
	}
	sleep 45;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	Static_Var_2 = 1;
}

Activate()
{
	start-script RequestState(0);
	spin rsonar around x-axis speed <90.>;
	spin lsonar around x-axis speed <90.>;
}

Deactivate()
{
	start-script RequestState(1);
	stop-spin rsonar around x-axis;
	stop-spin lsonar around x-axis;
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		if( Static_Var_1 == 3 )
		{
			emit-sfx 259 from rtail;
			emit-sfx 259 from ltail;
			emit-sfx 259 from base;
			emit-sfx 259 from rsonar;
			emit-sfx 259 from lwing;
			emit-sfx 259 from lsonar;
			emit-sfx 259 from rwing;
		}
		sleep 250;
	}
}

StopMoving()
{
	signal 2;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = bombdrop;
}

AimPrimary(heading, pitch)
{
	while( !Static_Var_2 )
	{
		sleep 250;
	}
	return (1);
}

FirePrimary()
{
	Static_Var_2 = 0;
	sleep 9000;
	Static_Var_2 = 1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode lsonar type BITMAPONLY | BITMAP2;
		explode ltail type BITMAPONLY | BITMAP3;
		explode lwing type BITMAPONLY | BITMAP4;
		explode rsonar type BITMAPONLY | BITMAP5;
		explode rtail type BITMAPONLY | BITMAP1;
		explode rwing type BITMAPONLY | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake1 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode lsonar type SHATTER | BITMAP2;
		explode ltail type FALL | BITMAP3;
		explode lwing type BITMAPONLY | BITMAP4;
		explode rsonar type FALL | BITMAP5;
		explode rtail type FALL | BITMAP1;
		explode rwing type BITMAPONLY | BITMAP2;
		explode wake1 type FALL | BITMAP3;
		explode wake1 type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode lsonar type SHATTER | BITMAP2;
		explode ltail type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode lwing type BITMAPONLY | BITMAP4;
		explode rsonar type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode rtail type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rwing type BITMAPONLY | BITMAP2;
		explode wake1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode wake1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode lsonar type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode ltail type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode lwing type BITMAPONLY | BITMAP4;
	explode rsonar type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode rtail type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rwing type BITMAPONLY | BITMAP2;
	explode wake1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode wake1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
}
