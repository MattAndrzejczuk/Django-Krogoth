#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret1, wake1, wake2, wake3, wake4, wake5, wake6,
       wake7, wake8, turret2, door3, door4, boom2, boom3, magnet,
       boom1, boom4, link, gunbase, turret, gun, flare;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide turret2;
	hide boom1;
	hide boom2;
	hide boom3;
	hide boom4;
	hide magnet;
	hide link;
	hide flare;
	Static_Var_6 = 2000;
	start-script SmokeUnit();
	turn magnet to x-axis <-50.> now;
	turn boom1 to x-axis <50.> now;
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		emit-sfx 5 from wake1;
		emit-sfx 3 from wake2;
		emit-sfx 5 from wake3;
		emit-sfx 3 from wake4;
		emit-sfx 5 from wake5;
		emit-sfx 3 from wake6;
		emit-sfx 3 from wake7;
		emit-sfx 5 from wake8;
		emit-sfx 3 from wake1;
		emit-sfx 5 from wake2;
		emit-sfx 3 from wake3;
		emit-sfx 5 from wake4;
		emit-sfx 3 from wake5;
		emit-sfx 5 from wake6;
		emit-sfx 5 from wake7;
		emit-sfx 3 from wake8;
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setsfxoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

boomcalcload(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4, Func_Var_5)
{
	Func_Var_3 = get PIECE_XZ(turret1) - Func_Var_1;
	Func_Var_4 = Func_Var_2 - get PIECE_Y(turret1) - 2457600;
	Func_Var_5 = get XZ_HYPOT(Func_Var_3);
	Static_Var_2 = get HYPOT(Func_Var_5,Func_Var_4) - 2457600;
	Static_Var_3 = get XZ_ATAN(Func_Var_3);
	Static_Var_4 = get ATAN(Func_Var_4,Func_Var_5);
	Static_Var_5 = Static_Var_2 < 9580400;
}

boomcalcunload(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4, Func_Var_5)
{
	Func_Var_3 = get PIECE_XZ(turret1) - Func_Var_1;
	Func_Var_4 = Func_Var_2 - get PIECE_Y(turret1) - 2457600;
	Func_Var_5 = get XZ_HYPOT(Func_Var_3);
	Static_Var_2 = get HYPOT(Func_Var_5,Func_Var_4) - 2457600;
	Static_Var_3 = get XZ_ATAN(Func_Var_3);
	Static_Var_4 = get ATAN(Func_Var_4,Func_Var_5);
	Static_Var_5 = Static_Var_2 < 9580400;
}

BoomExtend()
{
	turn turret2 to y-axis Static_Var_3 now;
	turn magnet to x-axis Static_Var_4 now;
	turn boom1 to x-axis <0.> - Static_Var_4 now;//is this correct ?
	move boom2 to z-axis Static_Var_2 / [0.000018] now;//it's noticeably different
	move boom3 to z-axis Static_Var_2 / [0.000018] now;//to the other transports
	move boom4 to z-axis Static_Var_2 / [0.000018] now;//it looks like two lines
	wait-for-turn turret2 around y-axis;//may have been mixed up as one line
	wait-for-turn boom1 around x-axis;
	wait-for-move boom2 along z-axis;
	wait-for-move boom3 along z-axis;
	wait-for-move boom4 along z-axis;
}

BoomToPad()
{
	turn turret2 to y-axis <0.> now;
	turn magnet to x-axis <-50.> now;
	turn boom1 to x-axis <50.> now;
	move boom2 to z-axis [0.] now;
	move boom3 to z-axis [0.] now;
	move boom4 to z-axis [0.] now;
	wait-for-turn turret2 around y-axis;
	wait-for-turn boom1 around x-axis;
	wait-for-move boom2 along z-axis;
	wait-for-move boom3 along z-axis;
	wait-for-move boom4 along z-axis;
}

TransportPickup(unitid)
{
	call-script boomcalcload(get UNIT_XZ(unitid),get UNIT_Y(unitid) + get UNIT_HEIGHT(unitid));
	if( Static_Var_5 )
	{
		set BUSY to 1;
		call-script BoomExtend();
		move link to y-axis [0.] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to 0 - 1;
		explode link type BITMAPONLY | BITMAP5;
		call-script BoomToPad();
		sleep 500;
		set BUSY to 0;
	}
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_6 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_6;
	set-signal-mask 0;
	turn turret to y-axis <0.> speed <300.>;
	turn gun to x-axis <0.> speed <200.>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
}

AimPrimary(heading, pitch)
{
	signal 8;
	set-signal-mask 8;
	turn turret to y-axis heading speed <300.>;
	turn gun to x-axis <0.> - pitch speed <200.>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 150;
	hide flare;
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

Killed(severity, corpsetype)
{
	hide flare;
	hide link;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode boom1 type BITMAPONLY | BITMAP1;
		explode boom2 type BITMAPONLY | BITMAP2;
		explode boom3 type BITMAPONLY | BITMAP5;
		explode base type BITMAPONLY | BITMAP3;
		explode door3 type BITMAPONLY | BITMAP4;
		explode door4 type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode turret1 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode boom1 type BITMAPONLY | BITMAP1;
		explode boom2 type BITMAPONLY | BITMAP2;
		explode boom3 type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP3;
		explode door3 type BITMAPONLY | BITMAP4;
		explode door4 type BITMAPONLY | BITMAP5;
		explode turret type FALL | BITMAP2;
		explode gun type FALL | BITMAP3;
		explode turret1 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode boom1 type BITMAPONLY | BITMAP1;
		explode boom2 type BITMAPONLY | BITMAP2;
		explode boom3 type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP3;
		explode door3 type BITMAPONLY | BITMAP4;
		explode door4 type BITMAPONLY | BITMAP5;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret1 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode boom1 type BITMAPONLY | BITMAP1;
	explode boom2 type BITMAPONLY | BITMAP2;
	explode boom3 type BITMAPONLY | BITMAP4;
	explode base type BITMAPONLY | BITMAP3;
	explode door3 type BITMAPONLY | BITMAP4;
	explode door4 type BITMAPONLY | BITMAP5;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret1 type BITMAPONLY | BITMAP2;
}

TransportDrop(unitid, position)
{
	call-script boomcalcunload(position,get GROUND_HEIGHT(position) + get UNIT_HEIGHT(unitid));
	if( Static_Var_5 )
	{
		set BUSY to 1;
		call-script BoomExtend();
		move link to y-axis [0.] - get UNIT_HEIGHT(unitid) now;
		explode link type BITMAPONLY | BITMAP5;
		attach-unit unitid to link;
		sleep 125;
		show base;
		drop-unit unitid;
		call-script BoomToPad();
		sleep 1000;
		set BUSY to 0;
	}
}
