#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, gun, arms, turret, flare3;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		move arms to y-axis [0.] now;
		move arms to y-axis [3.] speed [2.];
		move gun to y-axis [0.] now;
		move gun to y-axis [2.] speed [1.];
		sleep 1325;
	}
	sleep 22;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move arms to y-axis [3.] now;
		move arms to y-axis [0.] speed [2.];
		move gun to y-axis [2.] now;
		move gun to y-axis [0.] speed [1.];
		sleep 1325;
	}
	sleep 20;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.>;
	turn base to x-axis Func_Var_1 speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 5;
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	turn turret to y-axis <0.> speed <90.>;
}

AimTertiary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	start-script RequestState(0);
	turn turret to y-axis heading speed <250.>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( Static_Var_1 == 0 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		Static_Var_1 = 1;
		return (0);
	}
	if( Static_Var_1 == 1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		Static_Var_1 = 0;
		return (0);
	}
}

AimFromTertiary(piecenum)
{
	piecenum = gun;
}

QueryTertiary(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = flare1;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arms type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare1 type BITMAPONLY | BITMAP3;
		explode flare2 type BITMAPONLY | BITMAP4;
		explode flare3 type BITMAPONLY | BITMAP5;
		explode gun type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arms type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare1 type FALL | BITMAP3;
		explode flare2 type FALL | BITMAP4;
		explode flare3 type FALL | BITMAP5;
		explode gun type FALL | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arms type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode arms type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
}
