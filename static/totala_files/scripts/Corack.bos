#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  rnanospray, lnanospray, torso, lforeleg, rforeleg, rcasedoor, lcasedoor, rhindleg,
       lhindleg, lnanocase, rnanocase, rgunjoint, lgunjoint, ground, lnanogun, pelvis,
       rnanogun;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7;


walk()
{
	if( Static_Var_2 )
	{
		move lforeleg to z-axis [2.] now;
		move rforeleg to z-axis [-2.] now;
		move torso to y-axis [0.] now;
		move rcasedoor to x-axis [0.] now;
		move lcasedoor to x-axis [0.] now;
		sleep 150;
	}
	if( Static_Var_2 )
	{
		move lforeleg to z-axis [1.] now;
		move rforeleg to y-axis [0.] now;
		move rforeleg to z-axis [-2.] now;
		move torso to y-axis [0.] now;
		move rhindleg to z-axis [2.] now;
		turn torso to x-axis <-8.> now;
		sleep 130;
	}
	if( Static_Var_2 )
	{
		move lforeleg to z-axis [0.] now;
		move rforeleg to y-axis [1.] now;
		move rforeleg to z-axis [-2.] now;
		move torso to y-axis [0.] now;
		move rhindleg to z-axis [3.] now;
		turn torso to x-axis <-12.> now;
		sleep 110;
	}
	if( Static_Var_2 )
	{
		move lforeleg to z-axis [-1.] now;
		move rforeleg to y-axis [0.] now;
		move rforeleg to z-axis [0.] now;
		move torso to y-axis [0.] now;
		move rhindleg to z-axis [2.] now;
		turn torso to x-axis <-8.> now;
		sleep 130;
	}
	if( Static_Var_2 )
	{
		move lforeleg to z-axis [-2.] now;
		move rforeleg to y-axis [0.] now;
		move rforeleg to z-axis [2.] now;
		move torso to y-axis [0.] now;
		move rhindleg to z-axis [0.] now;
		turn torso to x-axis <0.> now;
		sleep 150;
	}
	if( Static_Var_2 )
	{
		move lforeleg to y-axis [0.] now;
		move rforeleg to z-axis [1.] now;
		move torso to y-axis [0.] now;
		move lhindleg to z-axis [2.] now;
		turn torso to x-axis <-8.> now;
		sleep 130;
	}
	if( Static_Var_2 )
	{
		move lforeleg to y-axis [1.] now;
		move rforeleg to z-axis [0.] now;
		move torso to y-axis [0.] now;
		move lhindleg to z-axis [3.] now;
		turn torso to x-axis <-12.> now;
		sleep 110;
	}
	if( Static_Var_2 )
	{
		move lforeleg to y-axis [0.] now;
		move lforeleg to z-axis [0.] now;
		move rforeleg to z-axis [-1.] now;
		move torso to y-axis [0.] now;
		move lhindleg to z-axis [2.] now;
		turn torso to x-axis <-8.> now;
	}
	sleep 130;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

walklegs()
{
	if( Static_Var_2 )
	{
		move lforeleg to z-axis [2.] now;
		move rforeleg to z-axis [-2.] now;
		move rcasedoor to x-axis [0.] now;
		move lcasedoor to x-axis [0.] now;
		sleep 150;
	}
	if( Static_Var_2 )
	{
		move lforeleg to z-axis [1.] now;
		move rforeleg to y-axis [0.] now;
		move rforeleg to z-axis [-2.] now;
		move rhindleg to z-axis [2.] now;
		sleep 130;
	}
	if( Static_Var_2 )
	{
		move lforeleg to z-axis [0.] now;
		move rforeleg to y-axis [1.] now;
		move rforeleg to z-axis [-2.] now;
		move rhindleg to z-axis [3.] now;
		sleep 110;
	}
	if( Static_Var_2 )
	{
		move lforeleg to z-axis [-1.] now;
		move rforeleg to y-axis [0.] now;
		move rforeleg to z-axis [0.] now;
		move rhindleg to z-axis [2.] now;
		sleep 130;
	}
	if( Static_Var_2 )
	{
		move lforeleg to z-axis [-2.] now;
		move rforeleg to y-axis [0.] now;
		move rforeleg to z-axis [2.] now;
		move rhindleg to z-axis [0.] now;
		sleep 150;
	}
	if( Static_Var_2 )
	{
		move lforeleg to y-axis [0.] now;
		move rforeleg to z-axis [1.] now;
		move lhindleg to z-axis [2.] now;
		sleep 130;
	}
	if( Static_Var_2 )
	{
		move lforeleg to y-axis [1.] now;
		move rforeleg to z-axis [0.] now;
		move lhindleg to z-axis [3.] now;
		sleep 110;
	}
	if( Static_Var_2 )
	{
		move lforeleg to y-axis [0.] now;
		move lforeleg to z-axis [0.] now;
		move rforeleg to z-axis [-1.] now;
		move lhindleg to z-axis [2.] now;
	}
	sleep 130;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(Func_Var_1, Func_Var_2)
{
	while( TRUE )
	{
		Func_Var_1 = Static_Var_2;
		Func_Var_2 = Static_Var_3;
		if( Func_Var_1 )
		{
			if( Func_Var_2 )
			{
				Static_Var_4 = 1;
				call-script walklegs();
			}
			if( !Func_Var_2 )
			{
				Static_Var_4 = 0;
				call-script walk();
			}
		}
		if( !Func_Var_1 )
		{
			Static_Var_4 = 1;
		}
		sleep 130;
	}
}

Go()
{
	Static_Var_3 = 1;
	if( Static_Var_3 )
	{
		move lnanocase to x-axis [0.] now;
		move lnanocase to x-axis [-3.] speed [5.];
		move rnanocase to x-axis [0.] now;
		move rnanocase to x-axis [3.] speed [5.];
		move rcasedoor to x-axis [0.] now;
		move lcasedoor to x-axis [0.] now;
		sleep 513;
	}
	if( Static_Var_3 )
	{
		turn lnanocase to y-axis <-90.> speed <173.>;
		turn rnanocase to y-axis <90.> speed <173.>;
		turn rcasedoor to z-axis <-90.> speed <173.>;
		turn lcasedoor to z-axis <90.> speed <173.>;
		sleep 518;
	}
	if( Static_Var_3 )
	{
		move rgunjoint to x-axis [5.] speed [9.];
		move lgunjoint to x-axis [-5.] speed [9.];
		sleep 520;
	}
	sleep 21;
	turn torso to y-axis Static_Var_1 speed <160.>;
	wait-for-turn torso around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn torso to y-axis <0.> speed <160.>;
	wait-for-turn torso around y-axis;
	if( Static_Var_3 )
	{
		move lnanocase to x-axis [-3.] now;
		move rnanocase to x-axis [3.] now;
		move rgunjoint to x-axis [5.] now;
		move rgunjoint to x-axis [0.] speed [6.];
		move rcasedoor to x-axis [0.] now;
		move lgunjoint to x-axis [-5.] now;
		move lgunjoint to x-axis [0.] speed [6.];
		move lcasedoor to x-axis [0.] now;
		turn lnanocase to y-axis <-90.> now;
		turn rnanocase to y-axis <90.> now;
		turn rcasedoor to z-axis <-90.> now;
		turn lcasedoor to z-axis <90.> now;
		sleep 683;
	}
	if( Static_Var_3 )
	{
		turn lnanocase to y-axis <0.> speed <130.>;
		turn rnanocase to y-axis <0.> speed <130.>;
		turn rcasedoor to z-axis <0.> speed <131.>;
		turn lcasedoor to z-axis <0.> speed <130.>;
		sleep 689;
	}
	if( Static_Var_3 )
	{
		move lnanocase to x-axis [0.] speed [4.];
		move rnanocase to x-axis [0.] speed [4.];
		sleep 691;
	}
	sleep 34;
	Static_Var_3 = 0;
}

InitState()
{
	Static_Var_6 = 1;
	Static_Var_7 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_7 )
	{
		Static_Var_6 = requestedstate;
		return (0);
	}
	Static_Var_7 = 1;
	currentstate = Static_Var_6;
	Static_Var_6 = requestedstate;
	while( Static_Var_6 != currentstate )
	{
		if( Static_Var_6 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_6 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_7 = 0;
}

Create()
{
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	Static_Var_4 = 1;
	Static_Var_5 = 0;
	Static_Var_1 = 0;
	call-script InitState();
	start-script MotionControl();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

StartMoving()
{
	Static_Var_2 = 1;
}

StopMoving()
{
	Static_Var_2 = 0;
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_5 == 0 )
	{
		piecenum = rnanospray;
		Static_Var_5 = 1;
		return (0);
	}
	if( Static_Var_5 == 1 )
	{
		piecenum = lnanospray;
		Static_Var_5 = 0;
	}
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ground type BITMAPONLY | BITMAP1;
		explode lcasedoor type BITMAPONLY | BITMAP2;
		explode lforeleg type BITMAPONLY | BITMAP3;
		explode lgunjoint type BITMAPONLY | BITMAP4;
		explode lhindleg type BITMAPONLY | BITMAP5;
		explode lnanocase type BITMAPONLY | BITMAP1;
		explode lnanogun type BITMAPONLY | BITMAP2;
		explode lnanospray type BITMAPONLY | BITMAP3;
		explode pelvis type BITMAPONLY | BITMAP4;
		explode rcasedoor type BITMAPONLY | BITMAP5;
		explode rforeleg type BITMAPONLY | BITMAP1;
		explode rgunjoint type BITMAPONLY | BITMAP2;
		explode rhindleg type BITMAPONLY | BITMAP3;
		explode rnanocase type BITMAPONLY | BITMAP4;
		explode rnanogun type BITMAPONLY | BITMAP5;
		explode rnanospray type BITMAPONLY | BITMAP1;
		explode torso type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type FALL | BITMAP1;
		explode lcasedoor type FALL | BITMAP2;
		explode lforeleg type FALL | BITMAP3;
		explode lgunjoint type FALL | BITMAP4;
		explode lhindleg type FALL | BITMAP5;
		explode lnanocase type BITMAPONLY | BITMAP1;
		explode lnanogun type FALL | BITMAP2;
		explode lnanospray type FALL | BITMAP3;
		explode pelvis type FALL | BITMAP4;
		explode rcasedoor type FALL | BITMAP5;
		explode rforeleg type FALL | BITMAP1;
		explode rgunjoint type FALL | BITMAP2;
		explode rhindleg type FALL | BITMAP3;
		explode rnanocase type BITMAPONLY | BITMAP4;
		explode rnanogun type FALL | BITMAP5;
		explode rnanospray type FALL | BITMAP1;
		explode torso type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lcasedoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lforeleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lgunjoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lhindleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lnanocase type BITMAPONLY | BITMAP1;
		explode lnanogun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lnanospray type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rcasedoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rforeleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rgunjoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rhindleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rnanocase type BITMAPONLY | BITMAP4;
		explode rnanogun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rnanospray type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode torso type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lcasedoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lforeleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lgunjoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lhindleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lnanocase type BITMAPONLY | BITMAP1;
	explode lnanogun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lnanospray type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rcasedoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rforeleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rgunjoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rhindleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rnanocase type BITMAPONLY | BITMAP4;
	explode rnanogun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rnanospray type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}
