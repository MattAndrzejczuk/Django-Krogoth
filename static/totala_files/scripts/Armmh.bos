#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare, base, box, wake1, wake2, wake3, wake4, wake5,
       wake6, wake7, wake8;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


activatescr()
{
	if( TRUE )
	{
		turn base to x-axis <0.> now;
		turn base to x-axis <1.> speed <3.>;
		turn box to x-axis <0.> now;
		turn box to x-axis <-20.> speed <58.>;
		sleep 352;
	}
	if( TRUE )
	{
		turn base to x-axis <0.> speed <3.>;
		turn box to x-axis <-70.> speed <141.>;
		sleep 354;
	}
	if( TRUE )
	{
		turn base to x-axis <-3.> speed <9.>;
		turn box to x-axis <-93.> speed <64.>;
		sleep 353;
	}
	if( TRUE )
	{
		turn base to x-axis <0.> speed <9.>;
		turn box to x-axis <-90.> speed <8.>;
		sleep 355;
	}
	sleep 16;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		turn base to x-axis <0.> now;
		turn base to x-axis <-3.> speed <12.>;
		turn box to x-axis <-90.> now;
		turn box to x-axis <-93.> speed <12.>;
		sleep 262;
	}
	if( TRUE )
	{
		turn base to x-axis <0.> speed <11.>;
		turn box to x-axis <-70.> speed <86.>;
		sleep 266;
	}
	if( TRUE )
	{
		turn base to x-axis <1.> speed <4.>;
		turn box to x-axis <-20.> speed <189.>;
		sleep 264;
	}
	if( TRUE )
	{
		turn base to x-axis <0.> speed <4.>;
		turn box to x-axis <0.> speed <76.>;
		sleep 267;
	}
	sleep 13;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.>;
	turn base to x-axis Func_Var_1 speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

Go()
{
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
}

InitState()
{
	Static_Var_4 = 1;
	Static_Var_5 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_5 )
	{
		Static_Var_4 = requestedstate;
		return (0);
	}
	Static_Var_5 = 1;
	currentstate = Static_Var_4;
	Static_Var_4 = requestedstate;
	while( Static_Var_4 != currentstate )
	{
		if( Static_Var_4 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_4 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_5 = 0;
}

StartMoving()
{
	signal 4;
	set-signal-mask 4;
	while( TRUE )
	{
		if( Static_Var_2 == 1 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		if( Static_Var_2 == 2 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_3 = 3000;
	call-script InitState();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_3 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_3;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 200;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 150;
}

AimFromPrimary(piecenum)
{
	piecenum = box;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( Static_Var_2 == 1 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode base type BITMAPONLY | BITMAP1;
			explode flare type FALL | BITMAP2;
			explode box type SHATTER | BITMAP3;
			return (0);
		}
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode box type SHATTER | BITMAP3;
		return (0);
	}
	if( Static_Var_2 == 2 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode base type BITMAPONLY | BITMAP1;
			explode flare type FALL | BITMAP2;
			explode box type SHATTER | BITMAP3;
			return (0);
		}
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode box type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare type BITMAPONLY | BITMAP2;
		explode box type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode flare type FALL | BITMAP2;
		explode box type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode box type SHATTER | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode box type SHATTER | EXPLODE_ON_HIT | BITMAP3;
}
