#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, head2, conduit2, head1, conduit1,
       block1, block2, pedistal, sleeve1, sleeve2, bump2, bump1, gun2,
       gun1, dish, blinks;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		move head2 to x-axis [0.] now;
		move head2 to x-axis [-1.] speed [1.];
		move head2 to z-axis [0.] now;
		move conduit2 to x-axis [0.] now;
		move conduit2 to z-axis [0.] now;
		move head1 to x-axis [0.] now;
		move head1 to x-axis [1.] speed [1.];
		move head1 to z-axis [0.] now;
		move conduit1 to x-axis [0.] now;
		move conduit1 to z-axis [0.] now;
		turn block1 to x-axis <0.> now;
		turn block1 to x-axis <0.> speed <0.>;
		turn block1 to y-axis <0.> now;
		turn block1 to y-axis <0.> speed <0.>;
		turn block1 to z-axis <0.> now;
		turn block1 to z-axis <-90.> speed <114.>;
		turn block2 to z-axis <0.> now;
		turn block2 to z-axis <90.> speed <114.>;
		turn head1 to x-axis <0.> now;
		turn head1 to x-axis <0.> speed <0.>;
		sleep 792;
	}
	if( TRUE )
	{
		turn block1 to x-axis <0.> speed <0.>;
		turn block1 to y-axis <0.> speed <0.>;
		turn block1 to z-axis <-180.> speed <360.>;
		turn block2 to z-axis <180.> speed <360.>;
		sleep 250;
	}
	if( TRUE )
	{
		move pedistal to y-axis [5.] speed [20.];
		sleep 250;
	}
	if( TRUE )
	{
		move sleeve1 to x-axis [4.] speed [12.];
		move sleeve2 to x-axis [-4.] speed [12.];
		move head2 to y-axis [-3.] speed [9.];
		move head1 to y-axis [-3.] speed [9.];
		sleep 307;
	}
	if( TRUE )
	{
		move head2 to x-axis [-1.] speed [0.];
		move head2 to y-axis [-3.] speed [0.];
		move bump2 to x-axis [2.] speed [7.];
		move bump2 to y-axis [0.] speed [1.];
		move conduit2 to x-axis [-4.] speed [10.];
		move head1 to y-axis [-3.] speed [0.];
		move bump1 to x-axis [-2.] speed [7.];
		move bump1 to y-axis [0.] speed [1.];
		move conduit1 to x-axis [4.] speed [10.];
		move conduit1 to z-axis [-0.] speed [0.];
		turn conduit1 to z-axis <0.> speed <0.>;
		sleep 360;
	}
	if( TRUE )
	{
		move conduit1 to z-axis [-0.] speed [0.];
		turn gun2 to x-axis <180.> speed <242.>;
		turn gun1 to x-axis <180.> speed <242.>;
		turn conduit1 to z-axis <0.> speed <0.>;
		sleep 744;
	}
	sleep 8;
}

deactivatescr()
{
	if( TRUE )
	{
		move pedistal to y-axis [5.] now;
		move sleeve1 to x-axis [4.] now;
		move sleeve2 to x-axis [-4.] now;
		move head2 to x-axis [-1.] now;
		move head2 to y-axis [-3.] now;
		move head2 to z-axis [0.] now;
		move bump2 to x-axis [2.] now;
		move bump2 to y-axis [0.] now;
		move conduit2 to x-axis [-4.] now;
		move conduit2 to z-axis [0.] now;
		move head1 to x-axis [1.] now;
		move head1 to y-axis [-3.] now;
		move head1 to z-axis [0.] now;
		move bump1 to x-axis [-2.] now;
		move bump1 to y-axis [0.] now;
		move conduit1 to x-axis [4.] now;
		move conduit1 to z-axis [-0.] now;
		move conduit1 to z-axis [-0.] speed [0.];
		turn block1 to z-axis <-180.> now;
		turn block2 to z-axis <180.> now;
		turn gun2 to x-axis <180.> now;
		turn gun2 to x-axis <0.> speed <338.>;
		turn gun1 to x-axis <180.> now;
		turn gun1 to x-axis <0.> speed <338.>;
		turn head1 to x-axis <0.> now;
		turn conduit1 to z-axis <0.> now;
		turn conduit1 to z-axis <0.> speed <0.>;
		sleep 532;
	}
	if( TRUE )
	{
		move head2 to x-axis [-1.] speed [0.];
		move head2 to y-axis [-3.] speed [0.];
		move bump2 to x-axis [0.] speed [6.];
		move bump2 to y-axis [0.] speed [1.];
		move conduit2 to x-axis [0.] speed [10.];
		move head1 to y-axis [-3.] speed [0.];
		move bump1 to x-axis [0.] speed [6.];
		move bump1 to y-axis [0.] speed [1.];
		move conduit1 to x-axis [0.] speed [10.];
		move conduit1 to z-axis [0.] speed [0.];
		turn conduit1 to z-axis <0.> speed <0.>;
		sleep 388;
	}
	if( TRUE )
	{
		move sleeve1 to x-axis [0.] speed [10.];
		move sleeve2 to x-axis [0.] speed [9.];
		move head2 to y-axis [0.] speed [7.];
		move head1 to y-axis [0.] speed [7.];
		sleep 389;
	}
	if( TRUE )
	{
		move pedistal to y-axis [0.] speed [8.];
		sleep 595;
	}
	if( TRUE )
	{
		turn block1 to x-axis <0.> speed <0.>;
		turn block1 to y-axis <0.> speed <0.>;
		turn block1 to z-axis <-90.> speed <224.>;
		turn block2 to z-axis <90.> speed <224.>;
		sleep 402;
	}
	if( TRUE )
	{
		move head2 to x-axis [0.] speed [2.];
		move head1 to x-axis [0.] speed [2.];
		turn block1 to x-axis <0.> speed <0.>;
		turn block1 to y-axis <0.> speed <0.>;
		turn block1 to z-axis <0.> speed <225.>;
		turn block2 to z-axis <0.> speed <225.>;
		turn head1 to x-axis <0.> speed <0.>;
		sleep 402;
	}
	sleep 13;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache block1;
	dont-cache block2;
	dont-cache bump1;
	dont-cache bump2;
	dont-cache conduit1;
	dont-cache conduit2;
	dont-cache gun1;
	dont-cache gun2;
	dont-cache head1;
	dont-cache head2;
	dont-cache pedistal;
	dont-cache sleeve1;
	dont-cache sleeve2;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache block1;
	cache block2;
	cache bump1;
	cache bump2;
	cache conduit1;
	cache conduit2;
	cache gun1;
	cache gun2;
	cache head1;
	cache head2;
	cache pedistal;
	cache sleeve1;
	cache sleeve2;
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	dont-shade dish;
	dont-cache dish;
	dont-shade blinks;
	dont-cache blinks;
	dont-cache pad;
	dont-shade beam1;
	dont-shade beam2;
	dont-shade block1;
	dont-shade block2;
	dont-shade bump1;
	dont-shade bump2;
	dont-shade conduit1;
	dont-shade conduit2;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade head1;
	dont-shade head2;
	dont-shade pad;
	dont-shade pedistal;
	dont-shade sleeve1;
	dont-shade sleeve2;
	Static_Var_2 = 0;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	spin dish around y-axis speed <150.>;
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = beam1;
	}
	if( Static_Var_1 != 0 )
	{
		piecenum = beam2;
	}
	Static_Var_1 = !Static_Var_1;
}

Demo()
{
	Static_Var_2 = 1;
}

Activate()
{
	signal 2;
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	if( !Static_Var_2 )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode block1 type BITMAPONLY | BITMAP4;
		explode block2 type BITMAPONLY | BITMAP5;
		explode conduit2 type BITMAPONLY | BITMAP1;
		explode blinks type BITMAPONLY | BITMAP2;
		explode dish type BITMAPONLY | BITMAP3;
		explode gun1 type BITMAPONLY | BITMAP4;
		explode gun2 type BITMAPONLY | BITMAP5;
		explode head1 type BITMAPONLY | BITMAP1;
		explode head2 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode pedistal type BITMAPONLY | BITMAP4;
		explode sleeve1 type BITMAPONLY | BITMAP5;
		explode sleeve2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | BITMAP2;
		explode beam2 type FALL | BITMAP3;
		explode block1 type BITMAPONLY | BITMAP4;
		explode block2 type BITMAPONLY | BITMAP5;
		explode bump1 type FALL | BITMAP5;
		explode bump2 type FALL | BITMAP5;
		explode conduit1 type FALL | BITMAP5;
		explode conduit2 type FALL | BITMAP1;
		explode blinks type FALL | BITMAP2;
		explode dish type FALL | BITMAP3;
		explode gun1 type FALL | BITMAP4;
		explode gun2 type FALL | BITMAP5;
		explode head1 type SHATTER | BITMAP1;
		explode head2 type SHATTER | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode pedistal type BITMAPONLY | BITMAP4;
		explode sleeve1 type FALL | BITMAP5;
		explode sleeve2 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode block1 type BITMAPONLY | BITMAP4;
		explode block2 type BITMAPONLY | BITMAP5;
		explode bump1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode bump2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode conduit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode conduit2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode blinks type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode dish type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode head1 type SHATTER | BITMAP1;
		explode head2 type SHATTER | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode pedistal type BITMAPONLY | BITMAP4;
		explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode block1 type BITMAPONLY | BITMAP4;
	explode block2 type BITMAPONLY | BITMAP5;
	explode bump1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode bump2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode conduit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode conduit2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode blinks type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode dish type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode head1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode head2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode pad type BITMAPONLY | BITMAP3;
	explode pedistal type BITMAPONLY | BITMAP4;
	explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
