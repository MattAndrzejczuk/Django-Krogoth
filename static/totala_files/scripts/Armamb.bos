#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, gun, door1, door2, door3, door4, stand,
       turret, barrel;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		move door1 to y-axis [0.] now;
		move door1 to y-axis [-3.] speed [8.];
		move door2 to y-axis [0.] now;
		move door2 to y-axis [-3.] speed [8.];
		move door3 to y-axis [0.] now;
		move door3 to y-axis [-3.] speed [8.];
		move door4 to y-axis [0.] now;
		move door4 to y-axis [-3.] speed [8.];
		move stand to y-axis [-5.] now;
		move turret to y-axis [-14.] now;
		move barrel to z-axis [-8.] now;
		turn door1 to x-axis <90.> now;
		turn door1 to x-axis <0.> speed <227.>;
		turn door2 to z-axis <-90.> now;
		turn door2 to z-axis <0.> speed <227.>;
		turn door3 to x-axis <-90.> now;
		turn door3 to x-axis <0.> speed <227.>;
		turn door4 to z-axis <90.> now;
		turn door4 to z-axis <0.> speed <227.>;
		turn stand to y-axis <295.> now;
		turn gun to x-axis <-90.> now;
		sleep 398;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.] speed [0.];
		move door2 to y-axis [-3.] speed [0.];
		move door3 to y-axis [-3.] speed [0.];
		move door4 to y-axis [-3.] speed [0.];
		move stand to y-axis [-2.] speed [7.];
		turn stand to y-axis <-180.> speed <333.>;
		sleep 539;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.] speed [0.];
		move door2 to y-axis [-3.] speed [0.];
		move door3 to y-axis [-3.] speed [0.];
		move door4 to y-axis [-3.] speed [0.];
		move stand to y-axis [0.] speed [2.];
		turn stand to y-axis <0.> speed <346.>;
		sleep 521;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.] speed [0.];
		move door2 to y-axis [-3.] speed [0.];
		move door3 to y-axis [-3.] speed [0.];
		move door4 to y-axis [-3.] speed [0.];
		move turret to y-axis [0.] speed [40.];
		sleep 354;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.] speed [0.];
		move door2 to y-axis [-3.] speed [0.];
		move door3 to y-axis [-3.] speed [0.];
		move door4 to y-axis [-3.] speed [0.];
		turn gun to x-axis <0.> speed <253.>;
		sleep 357;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.] speed [0.];
		move door2 to y-axis [-3.] speed [0.];
		move door3 to y-axis [-3.] speed [0.];
		move door4 to y-axis [-3.] speed [0.];
		move barrel to z-axis [0.] speed [22.];
		sleep 352;
	}
	sleep 25;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		stop-spin turret around y-axis;
		stop-spin gun around x-axis;
		move door1 to y-axis [-3.] now;
		move door1 to y-axis [-3.] speed [0.];
		move door2 to y-axis [-3.] now;
		move door2 to y-axis [-3.] speed [0.];
		move door3 to y-axis [-3.] now;
		move door3 to y-axis [-3.] speed [0.];
		move door4 to y-axis [-3.] now;
		move door4 to y-axis [-3.] speed [0.];
		move barrel to z-axis [0.] now;
		move barrel to z-axis [-8.] speed [24.];
		sleep 320;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.] speed [0.];
		move door2 to y-axis [-3.] speed [0.];
		move door3 to y-axis [-3.] speed [0.];
		move door4 to y-axis [-3.] speed [0.];
		turn gun to x-axis <-90.> speed <281.>;
		sleep 321;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.] speed [0.];
		move door2 to y-axis [-3.] speed [0.];
		move door3 to y-axis [-3.] speed [0.];
		move door4 to y-axis [-3.] speed [0.];
		move turret to y-axis [-14.] speed [44.];
		sleep 321;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.] speed [0.];
		move door2 to y-axis [-3.] speed [0.];
		move door3 to y-axis [-3.] speed [0.];
		move door4 to y-axis [-3.] speed [0.];
		move stand to y-axis [-2.] speed [3.];
		turn stand to y-axis <-180.> speed <362.>;
		sleep 498;
	}
	if( TRUE )
	{
		move door1 to y-axis [0.] speed [6.];
		move door2 to y-axis [0.] speed [6.];
		move door3 to y-axis [0.] speed [6.];
		move door4 to y-axis [0.] speed [6.];
		move stand to y-axis [-5.] speed [7.];
		turn stand to y-axis <295.> speed <353.>;
		sleep 509;
	}
	if( TRUE )
	{
		turn door1 to x-axis <90.> speed <225.>;
		turn door2 to z-axis <-90.> speed <225.>;
		turn door3 to x-axis <-90.> speed <225.>;
		turn door4 to z-axis <90.> speed <225.>;
		sleep 400;
	}
	sleep 17;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache barrel;
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	dont-cache flare;
	dont-cache gun;
	dont-cache stand;
	dont-cache turret;
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script deactivatescr();
	cache barrel;
	cache door1;
	cache door2;
	cache door3;
	cache door4;
	cache flare;
	cache gun;
	cache stand;
	cache turret;
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	dont-shade barrel;
	dont-shade base;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade flare;
	dont-shade gun;
	dont-shade stand;
	dont-shade turret;
	hide flare;
	Static_Var_1 = 1;
	Static_Var_2 = 3000;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <100.>;
	turn gun to x-axis <0.> - pitch speed <50.>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	return (1);
}

FirePrimary()
{
	move barrel to z-axis [-5.] speed [500.];
	show flare;
	sleep 250;
	hide flare;
	move barrel to z-axis [0.] speed [3.];
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 1;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 2;
		}
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP2;
		explode door3 type BITMAPONLY | BITMAP2;
		explode door4 type BITMAPONLY | BITMAP2;
		explode flare type BITMAPONLY | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode stand type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 2;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 3;
		}
		explode barrel type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode door2 type FALL | BITMAP3;
		explode door3 type FALL | BITMAP3;
		explode door4 type FALL | BITMAP3;
		explode flare type FALL | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode stand type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 3;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 4;
		}
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode stand type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 4;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode stand type BITMAPONLY | BITMAP5;
	explode turret type BITMAPONLY | BITMAP1;
}
