#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, float1, float2, float3, float4, float5, float6, door1,
       door2, door3, door4, glow;

static-var  Static_Var_1, Static_Var_2;


activatescr()
{
	if( TRUE )
	{
		move float1 to y-axis [0.] now;
		move float1 to z-axis [0.] now;
		move float1 to z-axis [-2.] speed [2.];
		move float2 to x-axis [0.] now;
		move float2 to x-axis [-2.] speed [2.];
		move float2 to y-axis [0.] now;
		move float2 to z-axis [0.] now;
		move float2 to z-axis [-1.] speed [1.];
		move float3 to x-axis [0.] now;
		move float3 to x-axis [-2.] speed [2.];
		move float3 to y-axis [0.] now;
		move float3 to z-axis [0.] now;
		move float3 to z-axis [1.] speed [1.];
		move float4 to y-axis [0.] now;
		move float4 to z-axis [0.] now;
		move float4 to z-axis [2.] speed [2.];
		move float5 to x-axis [0.] now;
		move float5 to x-axis [2.] speed [2.];
		move float5 to y-axis [0.] now;
		move float5 to z-axis [0.] now;
		move float5 to z-axis [1.] speed [1.];
		move float6 to x-axis [0.] now;
		move float6 to x-axis [2.] speed [2.];
		move float6 to y-axis [0.] now;
		move float6 to z-axis [0.] now;
		move float6 to z-axis [-1.] speed [1.];
		sleep 963;
	}
	if( TRUE )
	{
		turn door1 to x-axis <-90.> speed <93.>;
		turn door2 to x-axis <90.> speed <93.>;
		turn door3 to z-axis <90.> speed <93.>;
		turn door4 to z-axis <-90.> speed <93.>;
		sleep 968;
	}
	sleep 19;
}

deactivatescr()
{
	if( TRUE )
	{
		move float1 to y-axis [0.] now;
		move float1 to z-axis [-2.] now;
		move float2 to x-axis [-2.] now;
		move float2 to y-axis [0.] now;
		move float2 to z-axis [-1.] now;
		move float3 to x-axis [-2.] now;
		move float3 to y-axis [0.] now;
		move float3 to z-axis [1.] now;
		move float4 to y-axis [0.] now;
		move float4 to z-axis [2.] now;
		move float5 to x-axis [2.] now;
		move float5 to y-axis [0.] now;
		move float5 to z-axis [1.] now;
		move float6 to x-axis [2.] now;
		move float6 to y-axis [0.] now;
		move float6 to z-axis [-1.] now;
		turn door1 to x-axis <0.> speed <90.>;
		turn door2 to x-axis <0.> speed <90.>;
		turn door3 to z-axis <0.> speed <90.>;
		turn door4 to z-axis <0.> speed <90.>;
		sleep 998;
	}
	if( TRUE )
	{
		move float1 to z-axis [-1.] speed [1.];
		move float2 to x-axis [-1.] speed [1.];
		move float2 to z-axis [-0.] speed [1.];
		move float3 to x-axis [-1.] speed [1.];
		move float3 to z-axis [0.] speed [1.];
		move float4 to z-axis [1.] speed [1.];
		move float5 to x-axis [1.] speed [1.];
		move float5 to z-axis [0.] speed [1.];
		move float6 to x-axis [1.] speed [1.];
		move float6 to z-axis [-0.] speed [1.];
		sleep 1008;
	}
	sleep 32;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script activatescr();
	move base to y-axis [0.] speed [5.];
}

Stop()
{
	call-script deactivatescr();
	move base to y-axis [-5.] speed [5.];
}

InitState()
{
	Static_Var_1 = 1;
	Static_Var_2 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_2 )
	{
		Static_Var_1 = requestedstate;
		return (0);
	}
	Static_Var_2 = 1;
	currentstate = Static_Var_1;
	Static_Var_1 = requestedstate;
	while( Static_Var_1 != currentstate )
	{
		if( Static_Var_1 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_1 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_2 = 0;
}

Create()
{
	dont-shade base;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade float1;
	dont-shade float2;
	dont-shade float3;
	dont-shade float4;
	dont-shade float5;
	dont-shade float6;
	dont-cache base;
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	dont-cache float1;
	dont-cache float2;
	dont-cache float3;
	dont-cache float4;
	dont-cache float5;
	dont-cache float6;
	dont-cache glow;
	dont-shade glow;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode door3 type BITMAPONLY | BITMAP4;
		explode door4 type BITMAPONLY | BITMAP5;
		explode float1 type BITMAPONLY | BITMAP1;
		explode float2 type BITMAPONLY | BITMAP2;
		explode float3 type BITMAPONLY | BITMAP3;
		explode float4 type BITMAPONLY | BITMAP4;
		explode float5 type BITMAPONLY | BITMAP5;
		explode float6 type BITMAPONLY | BITMAP1;
		explode glow type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type FALL | BITMAP2;
		explode door2 type FALL | BITMAP3;
		explode door3 type FALL | BITMAP4;
		explode door4 type FALL | BITMAP5;
		explode float1 type FALL | BITMAP1;
		explode float2 type FALL | BITMAP2;
		explode float3 type FALL | BITMAP3;
		explode float4 type FALL | BITMAP4;
		explode float5 type FALL | BITMAP5;
		explode float6 type FALL | BITMAP1;
		explode glow type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode float1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode float2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode float3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode float4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode float5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode float6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode glow type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode float1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode float2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode float3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode float4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode float5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode float6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode glow type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}
