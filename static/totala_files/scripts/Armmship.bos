#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  rocket1, rocket2, flare1, flare2, base, launcher1, launcher2, door1,
       door2, plate, wake1, wake2, turret1, turret2, dish;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;


activatescr()
{
	if( TRUE )
	{
		move door1 to x-axis [0.] now;
		move door1 to x-axis [4.] speed [6.];
		move door2 to x-axis [0.] now;
		move door2 to x-axis [-4.] speed [7.];
		sleep 600;
	}
	if( TRUE )
	{
		move plate to y-axis [4.] speed [7.];
		sleep 600;
	}
	if( TRUE )
	{
		turn launcher1 to x-axis <-90.> speed <120.>;
		sleep 750;
	}
	sleep 10;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move plate to y-axis [4.] now;
		move door1 to x-axis [4.] now;
		move door2 to x-axis [-4.] now;
		move launcher1 to x-axis [0.] now;
		move launcher1 to x-axis [0.] speed [0.];
		turn launcher1 to x-axis <-90.> now;
		turn launcher1 to x-axis <0.> speed <120.>;
		sleep 750;
	}
	if( TRUE )
	{
		move plate to y-axis [0.] speed [7.];
		sleep 600;
	}
	if( TRUE )
	{
		move door1 to x-axis [0.] speed [6.];
		move door2 to x-axis [0.] speed [7.];
		sleep 600;
	}
	sleep 10;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	set ARMORED to 0;
	show rocket1;
	show rocket2;
	call-script activatescr();
	sleep 1500;
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	sleep 1500;
	call-script deactivatescr();
	sleep 1500;
	set ARMORED to 1;
}

InitState()
{
	Static_Var_5 = 1;
	Static_Var_6 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_6 )
	{
		Static_Var_5 = requestedstate;
		return (0);
	}
	Static_Var_6 = 1;
	currentstate = Static_Var_5;
	Static_Var_5 = requestedstate;
	while( Static_Var_5 != currentstate )
	{
		if( Static_Var_5 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_5 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_6 = 0;
}

Create()
{
	Static_Var_2 = 1;
	Static_Var_3 = 1;
	Static_Var_1 = 0;
	Static_Var_4 = 3000;
	call-script InitState();
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	spin dish around y-axis speed <150.>;
	set ARMORED to 1;
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_4 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_4;
	set-signal-mask 0;
	start-script RequestState(1);
}

RestoreTertiary()
{
	sleep 4000;
	set-signal-mask 0;
	turn launcher2 to y-axis <0.> speed <70.>;
	turn launcher2 to x-axis <0.> speed <30.>;
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal 8;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn launcher2 to y-axis heading speed <400.>;
	turn launcher2 to x-axis <0.> - pitch speed <250.>;
	wait-for-turn launcher2 around y-axis;
	wait-for-turn launcher2 around x-axis;
	start-script RestoreTertiary();
	return (1);
}

FirePrimary()
{
	if( Static_Var_2 == 1 )
	{
		hide rocket1;
		Static_Var_2 = 2;
		return (0);
	}
	if( Static_Var_2 == 2 )
	{
		hide rocket2;
		Static_Var_1 = 0;
		call-script RequestState(1);
		Static_Var_2 = 1;
		return (0);
	}
}

FireTertiary()
{
	if( Static_Var_3 == 1 )
	{
		Static_Var_3 = 2;
		return (0);
	}
	if( Static_Var_3 == 2 )
	{
		Static_Var_3 = 1;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = launcher1;
}

AimFromTertiary(piecenum)
{
	piecenum = launcher2;
}

QueryPrimary(piecenum)
{
	if( Static_Var_2 == 1 )
	{
		piecenum = rocket1;
	}
	if( Static_Var_2 == 2 )
	{
		piecenum = rocket2;
	}
}

QueryTertiary(piecenum)
{
	if( Static_Var_3 == 1 )
	{
		piecenum = flare1;
	}
	if( Static_Var_3 == 2 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP4;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode launcher1 type BITMAPONLY | BITMAP1;
		explode launcher2 type BITMAPONLY | BITMAP2;
		explode plate type BITMAPONLY | BITMAP3;
		explode rocket1 type BITMAPONLY | BITMAP4;
		explode rocket2 type BITMAPONLY | BITMAP5;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launcher1 type BITMAPONLY | BITMAP1;
		explode launcher2 type SHATTER | BITMAP2;
		explode plate type BITMAPONLY | BITMAP3;
		explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode turret1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launcher1 type BITMAPONLY | BITMAP1;
		explode launcher2 type SHATTER | BITMAP2;
		explode plate type BITMAPONLY | BITMAP3;
		explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode door1 type BITMAPONLY | BITMAP2;
	explode door2 type BITMAPONLY | BITMAP3;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode launcher1 type BITMAPONLY | BITMAP1;
	explode launcher2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode plate type BITMAPONLY | BITMAP3;
	explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
