#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, upper2, upper1, lower1, lower2,
       ldoor2, udoor2, ldoor1, udoor1, lbox2, ubox2, lbox1, ubox1,
       gun2, gun1, blink;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		turn upper2 to x-axis <0.> now;
		turn upper2 to x-axis <180.> speed <195.>;
		turn upper1 to x-axis <0.> now;
		turn upper1 to x-axis <180.> speed <195.>;
		sleep 925;
	}
	if( TRUE )
	{
		move lower1 to x-axis [9.] speed [9.];
		move lower2 to x-axis [-9.] speed [9.];
		sleep 990;
	}
	if( TRUE )
	{
		move ldoor2 to y-axis [-0.] speed [2.];
		move udoor2 to y-axis [0.] speed [2.];
		move ldoor1 to y-axis [-0.] speed [2.];
		move udoor1 to y-axis [0.] speed [2.];
		turn udoor1 to y-axis <1.> speed <8.>;
		sleep 81;
	}
	if( TRUE )
	{
		move ldoor2 to x-axis [-4.] speed [8.];
		move udoor2 to x-axis [-4.] speed [8.];
		move ldoor1 to x-axis [4.] speed [8.];
		move udoor1 to x-axis [4.] speed [8.];
		sleep 476;
	}
	if( TRUE )
	{
		move pad to z-axis [6.] speed [11.];
		move lbox2 to y-axis [4.] speed [8.];
		move ubox2 to y-axis [-4.] speed [8.];
		move lbox1 to y-axis [4.] speed [8.];
		move ubox1 to y-axis [-4.] speed [8.];
		sleep 574;
	}
	if( TRUE )
	{
		move gun2 to z-axis [1.] speed [2.];
		move gun1 to z-axis [1.] speed [2.];
		turn gun2 to y-axis <90.> speed <158.>;
		turn gun1 to y-axis <-90.> speed <158.>;
		sleep 569;
	}
	sleep 29;
}

deactivatescr()
{
	if( TRUE )
	{
		move pad to z-axis [6.] now;
		move lower1 to x-axis [9.] now;
		move lower2 to x-axis [-9.] now;
		move ldoor2 to x-axis [-4.] now;
		move ldoor2 to y-axis [-0.] now;
		move lbox2 to y-axis [4.] now;
		move udoor2 to x-axis [-4.] now;
		move udoor2 to y-axis [0.] now;
		move ubox2 to y-axis [-4.] now;
		move gun2 to z-axis [1.] now;
		move gun2 to z-axis [0.] speed [2.];
		move ldoor1 to x-axis [4.] now;
		move ldoor1 to y-axis [-0.] now;
		move lbox1 to y-axis [4.] now;
		move udoor1 to x-axis [4.] now;
		move udoor1 to y-axis [0.] now;
		move ubox1 to y-axis [-4.] now;
		move gun1 to z-axis [1.] now;
		move gun1 to z-axis [0.] speed [2.];
		turn upper2 to x-axis <180.> now;
		turn gun2 to y-axis <90.> now;
		turn gun2 to y-axis <0.> speed <160.>;
		turn upper1 to x-axis <180.> now;
		turn udoor1 to y-axis <1.> now;
		turn gun1 to y-axis <-90.> now;
		turn gun1 to y-axis <0.> speed <160.>;
		sleep 562;
	}
	if( TRUE )
	{
		move pad to z-axis [0.] speed [11.];
		move lbox2 to y-axis [0.] speed [8.];
		move ubox2 to y-axis [0.] speed [8.];
		move lbox1 to y-axis [0.] speed [8.];
		move ubox1 to y-axis [0.] speed [8.];
		sleep 570;
	}
	if( TRUE )
	{
		move ldoor2 to x-axis [0.] speed [6.];
		move udoor2 to x-axis [0.] speed [6.];
		move ldoor1 to x-axis [0.] speed [6.];
		move udoor1 to x-axis [0.] speed [6.];
		sleep 572;
	}
	if( TRUE )
	{
		move ldoor2 to y-axis [0.] speed [1.];
		move udoor2 to y-axis [0.] speed [1.];
		move ldoor1 to y-axis [0.] speed [1.];
		move udoor1 to y-axis [0.] speed [1.];
		turn udoor1 to y-axis <0.> speed <5.>;
		sleep 120;
	}
	if( TRUE )
	{
		move lower1 to x-axis [0.] speed [10.];
		move lower2 to x-axis [0.] speed [10.];
		sleep 874;
	}
	if( TRUE )
	{
		turn upper2 to x-axis <0.> speed <188.>;
		turn upper1 to x-axis <0.> speed <188.>;
		sleep 956;
	}
	sleep 31;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache gun1;
	dont-cache gun2;
	dont-cache lbox1;
	dont-cache lbox2;
	dont-cache ldoor1;
	dont-cache ldoor2;
	dont-cache lower1;
	dont-cache lower2;
	dont-cache pad;
	dont-cache ubox1;
	dont-cache ubox2;
	dont-cache udoor1;
	dont-cache udoor2;
	dont-cache upper1;
	dont-cache upper2;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache gun1;
	cache gun2;
	cache lbox1;
	cache lbox2;
	cache ldoor1;
	cache ldoor2;
	cache lower1;
	cache lower2;
	cache pad;
	cache ubox1;
	cache ubox2;
	cache udoor1;
	cache udoor2;
	cache upper1;
	cache upper2;
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	dont-shade blink;
	dont-cache blink;
	dont-shade beam1;
	dont-shade beam2;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade lbox1;
	dont-shade lbox2;
	dont-shade ldoor1;
	dont-shade ldoor2;
	dont-shade lower1;
	dont-shade lower2;
	dont-shade pad;
	dont-shade ubox1;
	dont-shade ubox2;
	dont-shade udoor1;
	dont-shade udoor2;
	dont-shade upper1;
	dont-shade upper2;
	Static_Var_2 = 0;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = beam1;
	}
	if( Static_Var_1 != 0 )
	{
		piecenum = beam2;
	}
	Static_Var_1 = !Static_Var_1;
}

Demo()
{
	Static_Var_2 = 1;
}

Activate()
{
	signal 2;
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	if( !Static_Var_2 )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode blink type BITMAPONLY | BITMAP4;
		explode gun1 type BITMAPONLY | BITMAP5;
		explode gun2 type BITMAPONLY | BITMAP1;
		explode lbox1 type BITMAPONLY | BITMAP2;
		explode lbox2 type BITMAPONLY | BITMAP3;
		explode ldoor1 type BITMAPONLY | BITMAP4;
		explode ldoor2 type BITMAPONLY | BITMAP5;
		explode lower1 type BITMAPONLY | BITMAP1;
		explode lower2 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode ubox1 type BITMAPONLY | BITMAP4;
		explode ubox2 type BITMAPONLY | BITMAP5;
		explode udoor1 type BITMAPONLY | BITMAP5;
		explode udoor2 type BITMAPONLY | BITMAP5;
		explode upper1 type BITMAPONLY | BITMAP5;
		explode upper2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | BITMAP2;
		explode beam2 type FALL | BITMAP3;
		explode blink type FALL | BITMAP4;
		explode gun1 type FALL | BITMAP5;
		explode gun2 type FALL | BITMAP1;
		explode lbox1 type FALL | BITMAP2;
		explode lbox2 type FALL | BITMAP3;
		explode ldoor1 type FALL | BITMAP4;
		explode ldoor2 type FALL | BITMAP5;
		explode lower1 type BITMAPONLY | BITMAP1;
		explode lower2 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode ubox1 type FALL | BITMAP4;
		explode ubox2 type FALL | BITMAP5;
		explode udoor1 type FALL | BITMAP5;
		explode udoor2 type FALL | BITMAP5;
		explode upper1 type SHATTER | BITMAP5;
		explode upper2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode blink type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lbox1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lbox2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode ldoor1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode ldoor2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lower1 type BITMAPONLY | BITMAP1;
		explode lower2 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode ubox1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode ubox2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode udoor1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode udoor2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode upper1 type SHATTER | BITMAP5;
		explode upper2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode blink type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lbox1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lbox2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode ldoor1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode ldoor2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lower1 type BITMAPONLY | BITMAP1;
	explode lower2 type BITMAPONLY | BITMAP2;
	explode pad type BITMAPONLY | BITMAP3;
	explode ubox1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode ubox2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode udoor1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode udoor2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode upper1 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode upper2 type BITMAPONLY | BITMAP5;
}
