#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, turret, base, sleeve1, sleeve2, barrel1, barrel2,
       wake1, wake2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.>;
	turn base to x-axis Func_Var_1 speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.>;
	turn base to z-axis anglez speed <50.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <20.>;
	turn base to x-axis <0.> speed <20.>;
}

EmitSFX()
{
	while( TRUE )
	{
		if( Static_Var_4 )
		{
			if( Static_Var_3 == 3 )
			{
				emit-sfx 259 from wake1;
				emit-sfx 259 from wake2;
			}
		}
		sleep 250;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	Static_Var_3 = 4;
	Static_Var_4 = 0;
	Static_Var_2 = 0;
	Static_Var_1 = 3000;
	start-script EmitSFX();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn turret to y-axis <0.> speed <65.>;
	turn sleeve1 to x-axis <0.> speed <35.>;
	turn sleeve2 to x-axis <0.> speed <35.>;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_3 = Func_Var_1;
}

StartMoving()
{
	Static_Var_4 = 1;
}

StopMoving()
{
	Static_Var_4 = 0;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <75.>;
	turn sleeve1 to x-axis <0.> - pitch speed <45.>;
	turn sleeve2 to x-axis <0.> - pitch speed <45.>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve1 around x-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_2 == 0 )
	{
		show flare1;
		move barrel1 to z-axis [-2.] speed [500.];
		sleep 150;
		hide flare1;
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.] speed [3.];
	}
	if( Static_Var_2 == 1 )
	{
		show flare2;
		move barrel2 to z-axis [-2.] speed [500.];
		sleep 150;
		hide flare2;
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.] speed [3.];
	}
	Static_Var_2 = !Static_Var_2;
}

QueryPrimary(piecenum)
{
	piecenum = Static_Var_2;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type BITMAPONLY | BITMAP4;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode barrel1 type BITMAPONLY | BITMAP4;
		explode barrel2 type BITMAPONLY | BITMAP5;
		explode sleeve1 type BITMAPONLY | BITMAP1;
		explode sleeve2 type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | BITMAP4;
		explode flare2 type FALL | BITMAP5;
		explode barrel1 type FALL | BITMAP4;
		explode barrel2 type FALL | BITMAP5;
		explode sleeve1 type SHATTER | BITMAP1;
		explode sleeve2 type BITMAPONLY | BITMAP2;
		explode turret type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleeve1 type SHATTER | BITMAP1;
		explode sleeve2 type BITMAPONLY | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleeve1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode sleeve2 type BITMAPONLY | BITMAP2;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
