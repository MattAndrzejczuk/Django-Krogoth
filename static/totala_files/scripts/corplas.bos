#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  emitplasl, emitplasr, plasbase, plasturret, plasgunL, plasgunR;

static-var  Static_Var_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from plasbase;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	hide emitplasl;
	hide emitplasr;
	dont-cache emitplasl;
	dont-cache emitplasr;
	dont-cache plasgunL;
	dont-cache plasgunR;
	dont-cache plasturret;
	Static_Var_1 = 0;
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn plasturret to y-axis heading speed <400.>;
	turn plasturret to x-axis <0.> - pitch speed <200.>;
	wait-for-turn plasturret around y-axis;
	wait-for-turn plasturret around x-axis;
	return (1);
}

FirePrimary()
{
	if( Static_Var_1 == 0 )
	{
		move plasgunL to z-axis [-2.] now;
		show emitplasl;
		sleep 150;
		hide emitplasl;
		move plasgunL to z-axis [0.] speed [3.];
		Static_Var_1 = 1;
		return (0);
	}
	if( Static_Var_1 == 1 )
	{
		move plasgunR to z-axis [-2.] now;
		show emitplasr;
		sleep 150;
		hide emitplasr;
		move plasgunR to z-axis [0.] speed [3.];
		Static_Var_1 = 0;
	}
}

QueryPrimary(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = emitplasl;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = emitplasr;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = plasturret;
}

SweetSpot(piecenum)
{
	piecenum = plasbase;
}

Killed(severity, corpsetype)
{
	hide emitplasl;
	hide emitplasr;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode emitplasl type BITMAPONLY | BITMAP1;
		explode emitplasr type BITMAPONLY | BITMAP2;
		explode plasbase type BITMAPONLY | BITMAP3;
		explode plasgunL type BITMAPONLY | BITMAP4;
		explode plasgunR type BITMAPONLY | BITMAP4;
		explode plasturret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode emitplasl type FALL | BITMAP1;
		explode emitplasr type FALL | BITMAP2;
		explode plasbase type BITMAPONLY | BITMAP3;
		explode plasturret type BITMAPONLY | BITMAP4;
		explode plasgunL type BITMAPONLY | BITMAP5;
		explode plasgunR type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode emitplasl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode emitplasr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode plasbase type BITMAPONLY | BITMAP3;
		explode plasturret type SHATTER | BITMAP4;
		explode plasgunL type BITMAPONLY | BITMAP5;
		explode plasgunR type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode emitplasl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode emitplasr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode plasbase type BITMAPONLY | BITMAP3;
	explode plasturret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode plasgunL type BITMAPONLY | BITMAP5;
	explode plasgunR type BITMAPONLY | BITMAP5;
}
