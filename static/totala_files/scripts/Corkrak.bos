#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, fan1, fan2, fan3, fan4, turret, sleeve, barrel1,
       flare1, barrel2, flare2, wake01, wake02, wake03, wake04, wake05,
       wake06, wake07, wake08, wake09, wake10, wake11, wake12, wake13,
       wake14, wake15, wake16, wake17, wake18, wake19, wake20;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		if( Static_Var_1 )
		{
			healthpercent = get HEALTH;
			if( healthpercent < 66 )
			{
				smoketype = 256 | 2;
				if( Rand( 1, 66 ) < healthpercent )
				{
					smoketype = 256 | 1;
				}
				emit-sfx smoketype from base;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

SpinSlow()
{
	stop-spin fan1 around y-axis decelerate <4.>;
	stop-spin fan2 around y-axis decelerate <4.>;
	stop-spin fan3 around y-axis decelerate <4.>;
	stop-spin fan4 around y-axis decelerate <4.>;
}

SpinFast()
{
	spin fan1 around y-axis speed <600.> accelerate <50.>;
	spin fan2 around y-axis speed <600.> accelerate <50.>;
	spin fan3 around y-axis speed <600.> accelerate <50.>;
	spin fan4 around y-axis speed <600.> accelerate <50.>;
}

Go()
{
	if( !Static_Var_1 )
	{
		call-script SpinFast();
		Static_Var_4 = 1;
		sleep 1500;
		Static_Var_5 = 1;
		move base to y-axis [2.] speed [24.];
		wait-for-move base along y-axis;
		move base to y-axis [0.] speed [8.];
		wait-for-move base along y-axis;
		move base to y-axis [1.] speed [8.];
		sleep 250;
		move base to y-axis [0.] speed [8.];
		sleep 250;
		Static_Var_4 = 0;
		Static_Var_5 = 0;
		turn base to x-axis <0.> speed <8.>;
		turn base to z-axis <0.> speed <8.>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
	}
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script SpinSlow();
	sleep 1000;
	Static_Var_4 = 1;
	Static_Var_5 = 1;
	move base to y-axis [-12.] speed [8.];
	wait-for-move base along y-axis;
	move base to y-axis [-16.] speed [4.];
	wait-for-move base along y-axis;
	Static_Var_5 = 0;
	Static_Var_4 = 0;
	turn base to x-axis <0.> speed <8.>;
	turn base to z-axis <0.> speed <8.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
}

InitState()
{
	Static_Var_6 = 1;
	Static_Var_7 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_7 )
	{
		Static_Var_6 = requestedstate;
		return (0);
	}
	Static_Var_7 = 1;
	currentstate = Static_Var_6;
	Static_Var_6 = requestedstate;
	while( Static_Var_6 != currentstate )
	{
		if( Static_Var_6 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_6 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_7 = 0;
}

Sway()
{
	while( TRUE )
	{
		if( Static_Var_5 )
		{
			turn base to x-axis <8.> speed <20.>;
			turn base to z-axis <8.> speed <20.>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
			turn base to x-axis <-8.> speed <16.>;
			turn base to z-axis <-8.> speed <16.>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
			turn base to x-axis <4.> speed <12.>;
			turn base to z-axis <4.> speed <12.>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
			turn base to x-axis <0.> speed <8.>;
			turn base to z-axis <0.> speed <8.>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
		}
		sleep 250;
	}
}

ShowBubbles()
{
	while( TRUE )
	{
		if( Static_Var_4 )
		{
			emit-sfx 5 from wake01;
			emit-sfx 5 from wake02;
			emit-sfx 5 from wake03;
			emit-sfx 5 from wake04;
			emit-sfx 5 from wake05;
			emit-sfx 5 from wake06;
			emit-sfx 5 from wake07;
			emit-sfx 5 from wake08;
			emit-sfx 5 from wake09;
			emit-sfx 5 from wake10;
			emit-sfx 5 from wake11;
			emit-sfx 5 from wake12;
			emit-sfx 5 from wake13;
			emit-sfx 5 from wake14;
			emit-sfx 5 from wake15;
			emit-sfx 5 from wake16;
			emit-sfx 5 from wake17;
			emit-sfx 5 from wake18;
			emit-sfx 5 from wake19;
			emit-sfx 5 from wake20;
		}
		sleep 250;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex * <0.016484> speed <20.>;
	turn base to z-axis anglez * <0.016484> speed <20.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.> - anglex speed <16.>;
	turn base to z-axis <0.> - anglez speed <16.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis anglex / <0.010989> speed <16.>;
	turn base to z-axis anglez / <0.010989> speed <16.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.> speed <8.>;
	turn base to z-axis <0.> speed <8.>;
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	turn sleeve to x-axis <0.> speed <25.>;
	start-script RequestState(1);
}

Create()
{
	hide flare1;
	hide flare2;
	dont-cache base;
	dont-cache fan1;
	dont-cache fan2;
	dont-cache fan3;
	dont-cache fan4;
	dont-cache turret;
	dont-cache sleeve;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache wake01;
	dont-cache wake02;
	dont-cache wake03;
	dont-cache wake04;
	dont-cache wake05;
	dont-cache wake06;
	dont-cache wake07;
	dont-cache wake08;
	dont-cache wake09;
	dont-cache wake10;
	dont-cache wake11;
	dont-cache wake12;
	dont-cache wake13;
	dont-cache wake14;
	dont-cache wake15;
	dont-cache wake16;
	dont-cache wake17;
	dont-cache wake18;
	dont-cache wake19;
	dont-cache wake20;
	dont-shade base;
	dont-shade fan1;
	dont-shade fan2;
	dont-shade fan3;
	dont-shade fan4;
	dont-shade turret;
	dont-shade sleeve;
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade flare1;
	dont-shade flare2;
	dont-shade wake01;
	dont-shade wake02;
	dont-shade wake03;
	dont-shade wake04;
	dont-shade wake05;
	dont-shade wake06;
	dont-shade wake07;
	dont-shade wake08;
	dont-shade wake09;
	dont-shade wake10;
	dont-shade wake11;
	dont-shade wake12;
	dont-shade wake13;
	dont-shade wake14;
	dont-shade wake15;
	dont-shade wake16;
	dont-shade wake17;
	dont-shade wake18;
	dont-shade wake19;
	dont-shade wake20;
	Static_Var_2 = 3000;
	Static_Var_1 = 1;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	call-script InitState();
	start-script SmokeUnit();
	start-script ShowBubbles();
	start-script Sway();
	start-script RequestState(0);
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	spin fan1 around y-axis speed <600.>;
	spin fan2 around y-axis speed <600.>;
	spin fan3 around y-axis speed <600.>;
	spin fan4 around y-axis speed <600.>;
	set-signal-mask 2;
	start-script RestoreAfterDelay();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <100.>;
	turn sleeve to x-axis <0.> - pitch speed <50.>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_3 == 0 )
	{
		move barrel1 to z-axis [-4.] now;
		show flare1;
		sleep 250;
		hide flare1;
		move barrel1 to z-axis [0.] speed [3.];
	}
	if( Static_Var_3 == 1 )
	{
		move barrel2 to z-axis [-4.] now;
		show flare2;
		sleep 250;
		hide flare2;
		move barrel2 to z-axis [0.] speed [3.];
	}
	++Static_Var_3;
	if( Static_Var_3 == 2 )
	{
		Static_Var_3 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

QueryPrimary(piecenum)
{
	if( Static_Var_3 == 0 )
	{
		piecenum = flare1;
	}
	if( Static_Var_3 == 1 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode fan1 type BITMAPONLY | BITMAP1;
		explode fan2 type BITMAPONLY | BITMAP2;
		explode fan3 type BITMAPONLY | BITMAP1;
		explode fan4 type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP2;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode fan1 type FALL | BITMAP1;
		explode fan2 type FALL | BITMAP2;
		explode fan3 type FALL | BITMAP1;
		explode fan4 type FALL | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		explode sleeve type BITMAPONLY | BITMAP2;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode fan1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode fan2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fan3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode fan4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type BITMAPONLY | BITMAP3;
		explode sleeve type SHATTER | BITMAP4;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode fan1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode fan2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fan3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode fan4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type BITMAPONLY | BITMAP3;
	explode sleeve type SHATTER | BITMAP4;
	explode barrel1 type BITMAPONLY | BITMAP3;
	explode barrel2 type BITMAPONLY | BITMAP3;
}
