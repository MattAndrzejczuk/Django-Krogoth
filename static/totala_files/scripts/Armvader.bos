#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  leg1, leg2, leg3, leg4, base;

static-var  Static_Var_1;


walkscr()
{
	while( Static_Var_1 )
	{
		if( Static_Var_1 )
		{
			turn leg1 to z-axis <0.> now;
			turn leg1 to z-axis <-38.> speed <262.>;
			turn leg2 to y-axis <55.> now;
			turn leg2 to y-axis <55.> speed <0.>;
			turn leg2 to z-axis <38.> now;
			turn leg2 to z-axis <0.> speed <262.>;
			turn leg3 to y-axis <0.> now;
			turn leg3 to y-axis <60.> speed <413.>;
			turn leg3 to z-axis <38.> now;
			turn leg4 to y-axis <-60.> now;
			turn leg4 to y-axis <0.> speed <413.>;
			turn leg4 to z-axis <0.> now;
			turn leg4 to z-axis <0.> speed <0.>;
			sleep 146;
		}
		if( Static_Var_1 )
		{
			turn leg1 to y-axis <-55.> speed <377.>;
			turn leg1 to z-axis <-38.> speed <0.>;
			turn leg2 to y-axis <0.> speed <377.>;
			turn leg2 to z-axis <0.> speed <0.>;
			turn leg3 to z-axis <0.> speed <258.>;
			turn leg4 to z-axis <-38.> speed <261.>;
			sleep 147;
		}
		if( Static_Var_1 )
		{
			turn leg1 to y-axis <-55.> speed <0.>;
			turn leg1 to z-axis <0.> speed <262.>;
			turn leg2 to z-axis <38.> speed <262.>;
			turn leg3 to y-axis <0.> speed <413.>;
			turn leg3 to z-axis <0.> speed <0.>;
			turn leg4 to y-axis <-60.> speed <413.>;
			turn leg4 to z-axis <-38.> speed <0.>;
			sleep 146;
		}
		turn leg1 to y-axis <0.> speed <377.>;
		turn leg1 to z-axis <0.> speed <0.>;
		turn leg2 to y-axis <55.> speed <377.>;
		turn leg2 to z-axis <38.> speed <0.>;
		turn leg3 to z-axis <37.> speed <258.>;
		turn leg4 to y-axis <-60.> speed <0.>;
		turn leg4 to z-axis <0.> speed <261.>;
		sleep 147;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = Static_Var_1;
		if( Func_Var_1 )
		{
			call-script walkscr();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
		}
	}
}

Create()
{
	Static_Var_1 = 0;
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	Static_Var_1 = 1;
}

StopMoving()
{
	Static_Var_1 = 0;
}

SweetSpot(piecenum)
{
	piecenum = leg1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode leg1 type BITMAPONLY | BITMAP2;
		explode leg2 type BITMAPONLY | BITMAP3;
		explode leg3 type BITMAPONLY | BITMAP4;
		explode leg4 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode leg1 type SHATTER | BITMAP2;
		explode leg2 type FALL | BITMAP3;
		explode leg3 type FALL | BITMAP4;
		explode leg4 type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode leg1 type SHATTER | BITMAP2;
		explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode leg1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
