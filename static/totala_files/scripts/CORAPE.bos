#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, winga, wingb, gun1, gun2, thrusta,
       thrustb1, thrustb2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Go()
{
	turn winga to z-axis <-90.> speed <120.>;
	turn wingb to z-axis <90.> speed <120.>;
}

Stop()
{
	turn winga to z-axis <0.> speed <120.>;
	turn wingb to z-axis <0.> speed <120.>;
}

InitState()
{
	Static_Var_2 = 1;
	Static_Var_3 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( Static_Var_2 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_2 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_3 = 0;
}

Create()
{
	hide flare1;
	hide flare2;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = flare1;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = flare2;
	}
}

AimPrimary()
{
	return (1);
}

FirePrimary()
{
	if( Static_Var_1 == 0 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		Static_Var_1 = 1;
		return (0);
	}
	if( Static_Var_1 == 1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		Static_Var_1 = 0;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type BITMAPONLY | BITMAP2;
		explode flare2 type BITMAPONLY | BITMAP3;
		explode gun1 type BITMAPONLY | BITMAP4;
		explode gun2 type BITMAPONLY | BITMAP5;
		explode thrusta type BITMAPONLY | BITMAP1;
		explode thrustb1 type BITMAPONLY | BITMAP2;
		explode thrustb2 type BITMAPONLY | BITMAP3;
		explode winga type BITMAPONLY | BITMAP4;
		explode wingb type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | BITMAP2;
		explode flare2 type FALL | BITMAP3;
		explode gun1 type FALL | BITMAP4;
		explode gun2 type FALL | BITMAP5;
		explode thrusta type FALL | BITMAP1;
		explode thrustb1 type FALL | BITMAP2;
		explode thrustb2 type FALL | BITMAP3;
		explode winga type SHATTER | BITMAP4;
		explode wingb type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode thrusta type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode thrustb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode thrustb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode winga type SHATTER | BITMAP4;
		explode wingb type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode thrusta type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode thrustb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode thrustb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode winga type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode wingb type BITMAPONLY | BITMAP5;
}
