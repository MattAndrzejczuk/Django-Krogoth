#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1a, flare1b, flare1c, flare2a, flare2b, flare2c, base, turret1,
       turret2, wake1, wake2, barrel1a, barrel1b, barrel1c, barrel2a, barrel2b,
       barrel2c;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	hide flare1a;
	hide flare1b;
	hide flare1c;
	hide flare2a;
	hide flare2b;
	hide flare2c;
	Static_Var_1 = 1;
	Static_Var_2 = 1;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	Static_Var_3 = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_3 = Func_Var_1 * 8;
}

RestorePrimary()
{
	sleep Static_Var_3;
	turn turret1 to y-axis <0.> speed <55.>;
	turn turret1 to x-axis <0.> speed <30.>;
	Static_Var_1 = 1;
}

RestoreSecondary()
{
	sleep Static_Var_3;
	turn turret2 to y-axis <0.> speed <55.>;
	turn turret2 to x-axis <0.> speed <30.>;
	Static_Var_2 = 1;
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal 8;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret1 to y-axis heading speed <55.>;
	turn turret1 to x-axis <0.> - pitch speed <30.>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret1 around x-axis;
	while( Static_Var_4 )
	{
		wait-for-move barrel1a along z-axis;
		wait-for-move barrel1b along z-axis;
		wait-for-move barrel1c along z-axis;
		Static_Var_1 = 1;
		Static_Var_4 = 0;
	}
	start-script RestorePrimary();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn turret2 to y-axis heading speed <55.>;
	turn turret2 to x-axis <0.> - pitch speed <30.>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;
	while( Static_Var_5 )
	{
		wait-for-move barrel2a along z-axis;
		wait-for-move barrel2b along z-axis;
		wait-for-move barrel2c along z-axis;
		Static_Var_2 = 1;
		Static_Var_5 = 0;
	}
	start-script RestoreSecondary();
	return (1);
}

FirePrimary()
{
	if( Static_Var_1 == 1 )
	{
		show flare1a;
		move barrel1a to z-axis [-3.] now;
		sleep 150;
		hide flare1a;
		move barrel1a to z-axis [0.] speed [1.];
	}
	if( Static_Var_1 == 2 )
	{
		show flare1b;
		move barrel1b to z-axis [-3.] now;
		sleep 150;
		hide flare1b;
		move barrel1b to z-axis [0.] speed [1.];
	}
	if( Static_Var_1 == 3 )
	{
		Static_Var_4 = 1;
		show flare1c;
		move barrel1c to z-axis [-3.] now;
		sleep 150;
		hide flare1c;
		move barrel1c to z-axis [0.] speed [1.];
	}
	++Static_Var_1;
}

FireSecondary()
{
	if( Static_Var_2 == 1 )
	{
		show flare2a;
		move barrel2a to z-axis [-3.] now;
		sleep 150;
		hide flare2a;
		move barrel2a to z-axis [0.] speed [1.];
	}
	if( Static_Var_2 == 2 )
	{
		show flare2b;
		move barrel2b to z-axis [-3.] now;
		sleep 150;
		hide flare2b;
		move barrel2b to z-axis [0.] speed [1.];
	}
	if( Static_Var_2 == 3 )
	{
		Static_Var_5 = 1;
		show flare2c;
		move barrel2c to z-axis [-3.] now;
		sleep 150;
		hide flare2c;
		move barrel2c to z-axis [0.] speed [1.];
	}
	++Static_Var_2;
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

QueryPrimary(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = flare1a;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = flare1b;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = flare1c;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QuerySecondary(piecenum)
{
	if( Static_Var_2 == 1 )
	{
		piecenum = flare2a;
	}
	if( Static_Var_2 == 2 )
	{
		piecenum = flare2b;
	}
	if( Static_Var_2 == 3 )
	{
		piecenum = flare2c;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare1b;
	hide flare1c;
	hide flare2a;
	hide flare2b;
	hide flare2c;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1a type BITMAPONLY | BITMAP1;
		explode barrel1b type BITMAPONLY | BITMAP2;
		explode barrel1c type BITMAPONLY | BITMAP3;
		explode barrel2a type BITMAPONLY | BITMAP4;
		explode barrel2b type BITMAPONLY | BITMAP5;
		explode barrel2c type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare1a type BITMAPONLY | BITMAP3;
		explode flare1b type BITMAPONLY | BITMAP4;
		explode flare1c type BITMAPONLY | BITMAP5;
		explode flare2a type BITMAPONLY | BITMAP1;
		explode flare2b type BITMAPONLY | BITMAP2;
		explode flare2c type BITMAPONLY | BITMAP3;
		explode turret1 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP5;
		explode wake1 type BITMAPONLY | BITMAP1;
		explode wake2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1a type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1b type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode barrel1c type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode barrel2a type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode barrel2b type FALL | EXPLODE_ON_HIT | BITMAP5;
		explode barrel2c type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare1a type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode flare1b type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode flare1c type FALL | EXPLODE_ON_HIT | BITMAP5;
		explode flare2a type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode flare2b type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode flare2c type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode turret1 type BITMAPONLY | BITMAP4;
		explode turret2 type SHATTER | BITMAP5;
		explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode barrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode barrel2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel2c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flare2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret1 type BITMAPONLY | BITMAP4;
	explode turret2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
