#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, emit, vents, fliptop, riser;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		move vents to y-axis [0.] now;
		move vents to y-axis [2.] speed [4.];
		sleep 436;
	}
	if( TRUE )
	{
		move vents to y-axis [5.] speed [7.];
		turn fliptop to z-axis <41.> speed <94.>;
		sleep 439;
	}
	if( TRUE )
	{
		move vents to y-axis [4.] speed [0.];
		move riser to y-axis [3.] speed [7.];
		turn fliptop to z-axis <72.> speed <70.>;
		sleep 439;
	}
	if( TRUE )
	{
		move vents to y-axis [5.] speed [1.];
		move riser to y-axis [8.] speed [10.];
		turn fliptop to z-axis <160.> speed <201.>;
		sleep 439;
	}
	if( TRUE )
	{
		move riser to y-axis [13.] speed [12.];
		sleep 438;
	}
	if( TRUE )
	{
		move riser to y-axis [14.] speed [4.];
		sleep 439;
	}
	sleep 43;
}

deactivatescr()
{
	if( TRUE )
	{
		move vents to y-axis [4.] now;
		move vents to y-axis [5.] speed [2.];
		move riser to y-axis [14.] now;
		move riser to y-axis [13.] speed [3.];
		turn fliptop to z-axis <160.> now;
		sleep 552;
	}
	if( TRUE )
	{
		move vents to y-axis [4.] speed [3.];
		move riser to y-axis [8.] speed [9.];
		sleep 553;
	}
	if( TRUE )
	{
		move vents to y-axis [2.] speed [2.];
		move riser to y-axis [3.] speed [8.];
		turn fliptop to z-axis <72.> speed <159.>;
		sleep 553;
	}
	if( TRUE )
	{
		move vents to y-axis [1.] speed [2.];
		move riser to y-axis [0.] speed [6.];
		turn fliptop to z-axis <41.> speed <55.>;
		sleep 558;
	}
	if( TRUE )
	{
		move vents to y-axis [0.] speed [2.];
		turn fliptop to z-axis <0.> speed <74.>;
		sleep 555;
	}
	if( TRUE )
	{
		move vents to y-axis [0.] speed [0.];
		sleep 556;
	}
	sleep 38;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script activatescr();
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	sleep 4000;
	call-script deactivatescr();
	show riser;
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	Static_Var_1 = 0;
	dont-shade base;
	dont-shade riser;
	dont-shade fliptop;
	dont-shade vents;
	dont-cache fliptop;
	dont-cache riser;
	dont-cache vents;
	Static_Var_2 = 3000;
	start-script SmokeUnit();
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	hide riser;
	Static_Var_1 = 0;
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = emit;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode fliptop type FALL | BITMAP2;
		explode vents type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode fliptop type FALL | BITMAP2;
		explode vents type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode fliptop type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode vents type SHATTER | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode fliptop type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode vents type SHATTER | EXPLODE_ON_HIT | BITMAP3;
}
