#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, rfirept, lfirept, pelvis, lleg, rleg, rthigh, lthigh,
       luparm, lloarm, rloarm, ruparm, rgun, lgun, ground;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7;


walk()
{
	while( Static_Var_1 )
	{
		if( Static_Var_1 )
		{
			move pelvis to y-axis [-0.] now;
			move rfirept to z-axis [0.] now;
			move lfirept to z-axis [0.] now;
			move lleg to y-axis [0.] now;
			move rleg to y-axis [0.] now;
			turn rthigh to x-axis <36.> now;
			turn lthigh to x-axis <-35.> now;
			turn lleg to x-axis <35.> now;
			turn rleg to x-axis <26.> now;
			sleep 20;
		}
		if( Static_Var_1 )
		{
			move torso to y-axis [-0.] now;
			sleep 20;
		}
		if( Static_Var_1 )
		{
			move torso to y-axis [-0.] now;
			sleep 50;
		}
		if( Static_Var_1 )
		{
			move torso to y-axis [-0.] now;
			sleep 20;
		}
		if( Static_Var_1 )
		{
			move pelvis to y-axis [-0.] now;
			move torso to y-axis [0.] now;
			move rleg to y-axis [0.] now;
			turn rthigh to x-axis <20.> now;
			turn lthigh to x-axis <-31.> now;
			turn lleg to x-axis <30.> now;
			turn rleg to x-axis <27.> now;
			sleep 70;
		}
		if( Static_Var_1 )
		{
			move pelvis to y-axis [-0.] now;
			move rleg to y-axis [1.] now;
			turn rthigh to x-axis <9.> now;
			turn lthigh to x-axis <-24.> now;
			turn lleg to x-axis <25.> now;
			turn rleg to x-axis <27.> now;
			sleep 60;
		}
		if( Static_Var_1 )
		{
			move pelvis to y-axis [-1.] now;
			turn rthigh to x-axis <-12.> now;
			turn lthigh to x-axis <-7.> now;
			turn lleg to x-axis <7.> now;
			turn rleg to x-axis <26.> now;
			sleep 50;
		}
		if( Static_Var_1 )
		{
			move pelvis to y-axis [0.] now;
			move rleg to y-axis [1.] now;
			turn rthigh to x-axis <-21.> now;
			turn lthigh to x-axis <5.> now;
			turn lleg to x-axis <17.> now;
			turn rleg to x-axis <26.> now;
			sleep 40;
		}
		if( Static_Var_1 )
		{
			move pelvis to y-axis [-0.] now;
			turn rthigh to x-axis <-29.> now;
			turn lthigh to x-axis <16.> now;
			sleep 50;
		}
		if( Static_Var_1 )
		{
			move pelvis to y-axis [-0.] now;
			turn rthigh to x-axis <-44.> now;
			turn lthigh to x-axis <19.> now;
			sleep 60;
		}
		if( Static_Var_1 )
		{
			move pelvis to y-axis [-0.] now;
			turn rthigh to x-axis <-54.> now;
			turn lthigh to x-axis <26.> now;
			sleep 70;
		}
		if( Static_Var_1 )
		{
			move pelvis to y-axis [-0.] now;
			move rleg to y-axis [0.] now;
			turn rthigh to x-axis <-36.> now;
			turn lthigh to x-axis <28.> now;
			turn lleg to x-axis <16.> now;
			turn rleg to x-axis <36.> now;
			sleep 20;
		}
		if( Static_Var_1 )
		{
			move torso to y-axis [-0.] now;
			sleep 20;
		}
		if( Static_Var_1 )
		{
			move torso to y-axis [-0.] now;
			sleep 50;
		}
		if( Static_Var_1 )
		{
			move torso to y-axis [-0.] now;
			sleep 20;
		}
		if( Static_Var_1 )
		{
			move pelvis to y-axis [-0.] now;
			move torso to y-axis [0.] now;
			move lleg to y-axis [1.] now;
			turn rthigh to x-axis <-28.> now;
			turn lthigh to x-axis <21.> now;
			turn lleg to x-axis <22.> now;
			turn rleg to x-axis <28.> now;
			sleep 70;
		}
		if( Static_Var_1 )
		{
			move pelvis to y-axis [-0.] now;
			turn rthigh to x-axis <-22.> now;
			turn lthigh to x-axis <8.> now;
			turn lleg to x-axis <24.> now;
			turn rleg to x-axis <22.> now;
			sleep 60;
		}
		if( Static_Var_1 )
		{
			move pelvis to y-axis [-0.] now;
			turn rthigh to x-axis <-16.> now;
			turn lthigh to x-axis <-7.> now;
			turn rleg to x-axis <17.> now;
			sleep 50;
		}
		if( Static_Var_1 )
		{
			move pelvis to y-axis [0.] now;
			move lleg to y-axis [1.] now;
			turn rthigh to x-axis <-7.> now;
			turn lthigh to x-axis <-15.> now;
			turn lleg to x-axis <20.> now;
			turn rleg to x-axis <25.> now;
			sleep 40;
		}
		if( Static_Var_1 )
		{
			move pelvis to y-axis [-0.] now;
			turn rthigh to x-axis <3.> now;
			turn lthigh to x-axis <-26.> now;
			sleep 50;
		}
		if( Static_Var_1 )
		{
			move pelvis to y-axis [-0.] now;
			turn rthigh to x-axis <10.> now;
			turn lthigh to x-axis <-35.> now;
			sleep 60;
		}
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <21.> now;
		turn lthigh to x-axis <-56.> now;
		sleep 70;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	Static_Var_2 = 1;
	if( !Static_Var_3 )
	{
		turn luparm to z-axis <0.> now;
		turn luparm to z-axis <-73.> speed <212.>;
		turn lloarm to z-axis <0.> now;
		turn lloarm to z-axis <90.> speed <260.>;
		turn rloarm to z-axis <0.> now;
		turn rloarm to z-axis <-90.> speed <260.>;
		turn ruparm to z-axis <0.> now;
		turn ruparm to z-axis <75.> speed <218.>;
		sleep 346;
		Static_Var_3 = 1;
	}
	sleep 354;
}

Stop()
{
	if( Static_Var_3 )
	{
		Static_Var_3 = 0;
		turn luparm to z-axis <-73.> now;
		turn luparm to z-axis <0.> speed <67.>;
		turn lloarm to z-axis <90.> now;
		turn lloarm to z-axis <0.> speed <82.>;
		turn rloarm to z-axis <-90.> now;
		turn rloarm to z-axis <0.> speed <82.>;
		turn ruparm to z-axis <76.> now;
		turn ruparm to z-axis <0.> speed <68.>;
		sleep 1097;
	}
	sleep 1109;
	Static_Var_2 = 0;
}

InitState()
{
	Static_Var_6 = 1;
	Static_Var_7 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_7 )
	{
		Static_Var_6 = requestedstate;
		return (0);
	}
	Static_Var_7 = 1;
	currentstate = Static_Var_6;
	Static_Var_6 = requestedstate;
	while( Static_Var_6 != currentstate )
	{
		if( Static_Var_6 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_6 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_7 = 0;
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = Static_Var_1;
		aiming = Static_Var_2;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{
				move pelvis to y-axis [0.] speed [1.];
				turn rthigh to x-axis <0.> speed <200.>;
				turn rleg to x-axis <0.> speed <200.>;
				turn lthigh to x-axis <0.> speed <200.>;
				turn lleg to x-axis <0.> speed <200.>;
				if( !aiming )
				{
					turn torso to y-axis <0.> speed <90.>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	hide rfirept;
	hide lfirept;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	Static_Var_5 = 3000;
	start-script InitState();
	start-script MotionControl();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_5 = Func_Var_1 * 5;
}

StartMoving()
{
	Static_Var_1 = 1;
}

StopMoving()
{
	Static_Var_1 = 0;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

RestoreAfterDelay()
{
	sleep Static_Var_5;
	set-signal-mask 0;
	turn torso to y-axis <0.> speed <90.>;
}

AimTertiary(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_3 )
	{
		sleep 100;
	}
	turn torso to y-axis heading speed <275.>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( Static_Var_4 == 0 )
	{
		Static_Var_4 = 1;
		move rgun to z-axis [-2.] speed [25.];
		wait-for-move rgun along z-axis;
		move rgun to z-axis [0.] speed [3.];
		return (0);
	}
	if( Static_Var_4 == 1 )
	{
		Static_Var_4 = 0;
		move lgun to z-axis [-2.] speed [25.];
		wait-for-move lgun along z-axis;
		move lgun to z-axis [0.] speed [3.];
	}
}

AimFromTertiary(piecenum)
{
	piecenum = torso;
}

QueryTertiary(piecenum)
{
	if( Static_Var_4 == 0 )
	{
		piecenum = rfirept;
	}
	if( Static_Var_4 == 1 )
	{
		piecenum = lfirept;
	}
}

Killed(severity, corpsetype)
{
	hide rfirept;
	hide lfirept;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ground type BITMAPONLY | BITMAP1;
		explode lfirept type BITMAPONLY | BITMAP2;
		explode lgun type BITMAPONLY | BITMAP3;
		explode lleg type BITMAPONLY | BITMAP4;
		explode lloarm type BITMAPONLY | BITMAP5;
		explode lthigh type BITMAPONLY | BITMAP1;
		explode luparm type BITMAPONLY | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP3;
		explode rfirept type BITMAPONLY | BITMAP4;
		explode rgun type BITMAPONLY | BITMAP5;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rloarm type BITMAPONLY | BITMAP2;
		explode rthigh type BITMAPONLY | BITMAP3;
		explode ruparm type BITMAPONLY | BITMAP4;
		explode torso type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type FALL | BITMAP1;
		explode lfirept type FALL | BITMAP2;
		explode lgun type FALL | BITMAP3;
		explode lleg type FALL | BITMAP4;
		explode lloarm type FALL | BITMAP5;
		explode lthigh type FALL | BITMAP1;
		explode luparm type FALL | BITMAP2;
		explode pelvis type FALL | BITMAP3;
		explode rfirept type FALL | BITMAP4;
		explode rgun type FALL | BITMAP5;
		explode rleg type FALL | BITMAP1;
		explode rloarm type FALL | BITMAP2;
		explode rthigh type FALL | BITMAP3;
		explode ruparm type FALL | BITMAP4;
		explode torso type SHATTER | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lfirept type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rfirept type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode torso type SHATTER | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lfirept type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rfirept type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP5;
}
