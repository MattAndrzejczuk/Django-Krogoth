#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flap2, flap3, flap4, flap1, topcap, glowingthing;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


activatescr()
{
	if( TRUE )
	{
		move flap2 to z-axis [0.] now;
		move flap3 to z-axis [0.] now;
		move flap4 to x-axis [0.] now;
		turn flap3 to z-axis <0.> now;
		turn flap3 to z-axis <-69.> speed <261.>;
		sleep 265;
	}
	if( TRUE )
	{
		turn flap2 to x-axis <-4.> speed <18.>;
		turn flap4 to x-axis <-86.> speed <324.>;
		sleep 266;
	}
	if( TRUE )
	{
		turn flap2 to z-axis <69.> speed <260.>;
		sleep 266;
	}
	if( TRUE )
	{
		turn flap1 to x-axis <89.> speed <336.>;
		sleep 266;
	}
	if( TRUE )
	{
		turn topcap to y-axis <45.> speed <169.>;
		sleep 266;
	}
	if( TRUE )
	{
		move topcap to y-axis [-16.] speed [60.];
		sleep 267;
	}
	if( TRUE )
	{
		turn topcap to z-axis <-180.> speed <676.>;
		sleep 266;
	}
	if( TRUE )
	{
		move topcap to y-axis [-1.] speed [57.];
		sleep 266;
	}
	sleep 266;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move flap2 to z-axis [0.] now;
		move flap3 to z-axis [0.] now;
		move flap4 to x-axis [0.] now;
		move topcap to y-axis [-1.] now;
		move topcap to y-axis [-16.] speed [57.];
		turn flap1 to x-axis <89.> now;
		turn flap2 to x-axis <-5.> now;
		turn flap2 to z-axis <69.> now;
		turn flap3 to z-axis <-69.> now;
		turn flap4 to x-axis <-86.> now;
		turn topcap to y-axis <45.> now;
		turn topcap to z-axis <-180.> now;
		sleep 265;
	}
	if( TRUE )
	{
		turn topcap to z-axis <0.> speed <676.>;
		sleep 266;
	}
	if( TRUE )
	{
		move topcap to y-axis [0.] speed [60.];
		sleep 266;
	}
	if( TRUE )
	{
		turn topcap to y-axis <0.> speed <169.>;
		sleep 266;
	}
	if( TRUE )
	{
		turn flap1 to x-axis <0.> speed <334.>;
		sleep 267;
	}
	if( TRUE )
	{
		turn flap2 to z-axis <0.> speed <260.>;
		sleep 266;
	}
	if( TRUE )
	{
		turn flap2 to x-axis <0.> speed <18.>;
		turn flap4 to x-axis <0.> speed <324.>;
		sleep 266;
	}
	if( TRUE )
	{
		turn flap3 to z-axis <0.> speed <260.>;
		sleep 266;
	}
	sleep 266;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	if( Static_Var_1 )
	{
		set ACTIVATION to 0;
		return (0);
	}
	dont-cache flap1;
	dont-cache flap2;
	dont-cache flap3;
	dont-cache flap4;
	dont-cache topcap;
	dont-cache glowingthing;
	call-script activatescr();
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	call-script deactivatescr();
	cache flap1;
	cache flap2;
	cache flap3;
	cache flap4;
	cache topcap;
	cache glowingthing;
}

InitState()
{
	Static_Var_2 = 1;
	Static_Var_3 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( Static_Var_2 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_2 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_3 = 0;
}

Create()
{
	dont-shade glowingthing;
	cache glowingthing;
	dont-shade base;
	dont-shade flap1;
	dont-shade flap2;
	dont-shade flap3;
	dont-shade flap4;
	dont-shade topcap;
	call-script InitState();
	start-script SmokeUnit();
	Static_Var_1 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	set ARMORED to 1;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( get ACTIVATION )
	{
		Static_Var_1 = 1;
	}
	if( Static_Var_1 )
	{
		signal 2;
		set-signal-mask 2;
		set ACTIVATION to 0;
		sleep 8000;
		Static_Var_1 = 0;
		set ACTIVATION to 100;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode glowingthing type BITMAPONLY | BITMAP2;
		explode flap1 type BITMAPONLY | BITMAP3;
		explode flap2 type BITMAPONLY | BITMAP4;
		explode flap3 type BITMAPONLY | BITMAP5;
		explode flap4 type BITMAPONLY | BITMAP1;
		explode topcap type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode glowingthing type SHATTER | BITMAP2;
		explode flap1 type FALL | BITMAP3;
		explode flap2 type FALL | BITMAP4;
		explode flap3 type FALL | BITMAP5;
		explode flap4 type FALL | BITMAP1;
		explode topcap type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode glowingthing type SHATTER | BITMAP2;
		explode flap1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flap2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flap3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flap4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode topcap type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode glowingthing type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode flap1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flap2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flap3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flap4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode topcap type BITMAPONLY | BITMAP2;
}
