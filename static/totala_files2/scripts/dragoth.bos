#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, neck1, neck2, neck3, neck4, head, mouth,
       sungut, tailbase, tailbase1, tailbase2, tailbase4, tail1, tail2, tail3,
       tail4, tail5, wing1a, wing1b, wing1c, chakr1, wing2a, wing2b,
       wing2c, chakr2, ffoot1a, ffoot1b, ffoot1c, ffoot2a, ffoot2b, ffoot2c,
       rfoot1a, rfoot1b, rfoot1c, rpad1, rfoot2a, rfoot2b, rfoot2c, rpad2,
       firept1, firept2a, firept2b, firept2c, firept2d, firept2, dragun2, firepath,
       way;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


activatescr()
{
	if( TRUE )
	{
		turn neck3 to x-axis <-10.> speed <35.>;
		turn head to x-axis <-10.> speed <35.>;
		turn mouth to x-axis <20.> speed <35.>;
		wait-for-turn mouth around y-axis;
		turn body to x-axis <-50.> speed <25.>;
		move body to y-axis [20.] speed [55.];
		turn rfoot1a to x-axis <70.> speed <35.>;
		turn rfoot2a to x-axis <70.> speed <35.>;
		turn ffoot1a to x-axis <45.> speed <35.>;
		turn ffoot2a to x-axis <45.> speed <35.>;
		turn ffoot1b to x-axis <15.> speed <35.>;
		turn ffoot2b to x-axis <15.> speed <35.>;
		turn rfoot1b to x-axis <-20.> speed <35.>;
		turn rfoot2b to x-axis <-20.> speed <35.>;
		turn tailbase1 to x-axis <20.> speed <55.>;
		turn tailbase2 to x-axis <10.> speed <35.>;
		turn tailbase4 to x-axis <5.> speed <55.>;
		wait-for-turn body around y-axis;
		wait-for-turn rfoot1a around x-axis;
		wait-for-turn rfoot2a around x-axis;
		sleep 300;
		sleep 50;
	}
	if( TRUE )
	{
		move body to y-axis [12.] speed [25.];
		turn body to x-axis <-35.> speed <20.>;
		turn tailbase1 to x-axis <15.> speed <15.>;
		turn tailbase2 to x-axis <0.> speed <35.>;
		turn tailbase4 to x-axis <-5.> speed <55.>;
		turn rfoot1a to x-axis <110.> speed <35.>;
		turn rfoot2a to x-axis <110.> speed <25.>;
		turn rfoot1c to x-axis <-5.> speed <25.>;
		turn rfoot2c to x-axis <-5.> speed <25.>;
		turn rpad1 to x-axis <30.> speed <25.>;
		turn rpad2 to x-axis <30.> speed <35.>;
		turn neck4 to x-axis <25.> speed <35.>;
		turn head to x-axis <5.> speed <25.>;
		wait-for-turn body around y-axis;
		wait-for-turn rfoot1a around x-axis;
		wait-for-turn rfoot2a around x-axis;
		sleep 400;
		sleep 50;
	}
	if( TRUE )
	{
		move body to y-axis [0.] speed [15.];
		turn body to x-axis <0.> speed <25.>;
		turn tailbase1 to x-axis <0.> speed <25.>;
		turn rfoot1a to x-axis <15.> speed <45.>;
		turn rfoot2a to x-axis <15.> speed <45.>;
		turn rfoot1b to x-axis <40.> speed <45.>;
		turn rfoot2b to x-axis <40.> speed <45.>;
		turn rfoot1b to y-axis <30.> speed <45.>;
		turn rfoot2b to y-axis <-30.> speed <45.>;
		turn rfoot1c to x-axis <0.> speed <45.>;
		turn rfoot2c to x-axis <0.> speed <45.>;
		turn rpad1 to x-axis <125.> speed <45.>;
		turn rpad2 to x-axis <125.> speed <45.>;
		turn ffoot1a to x-axis <95.> speed <45.>;
		turn ffoot2a to x-axis <95.> speed <45.>;
		turn ffoot1b to x-axis <50.> speed <45.>;
		turn ffoot2b to x-axis <50.> speed <45.>;
		turn ffoot1c to x-axis <50.> speed <45.>;
		turn ffoot2c to x-axis <50.> speed <45.>;
		turn neck4 to x-axis <0.> speed <45.>;
		turn head to x-axis <-5.> speed <45.>;
		turn mouth to x-axis <-5.> speed <75.>;
		turn tailbase2 to x-axis <0.> speed <105.>;
		turn tailbase4 to x-axis <0.> speed <105.>;
		sleep 150;
		sleep 200;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		turn neck3 to x-axis <5.> speed <35.>;
		turn neck4 to x-axis <5.> speed <25.>;
		turn head to x-axis <10.> speed <25.>;
		turn body to x-axis <-45.> speed <20.>;
		move body to y-axis [5.] speed [25.];
		turn rfoot1a to x-axis <40.> speed <35.>;
		turn rfoot2a to x-axis <40.> speed <35.>;
		turn ffoot1a to x-axis <15.> speed <35.>;
		turn ffoot2a to x-axis <15.> speed <35.>;
		turn ffoot1b to x-axis <15.> speed <35.>;
		turn ffoot2b to x-axis <15.> speed <35.>;
		turn rfoot1b to x-axis <-20.> speed <35.>;
		turn rfoot2b to x-axis <-20.> speed <35.>;
		turn tailbase1 to x-axis <35.> speed <25.>;
		turn tailbase2 to x-axis <5.> speed <25.>;
		turn tailbase4 to x-axis <5.> speed <25.>;
		wait-for-turn body around x-axis;
		wait-for-turn rfoot1a around x-axis;
		wait-for-turn rfoot2a around x-axis;
		sleep 1800;
		sleep 50;
	}
	if( TRUE )
	{
		move body to y-axis [0.] speed [45.];
		turn body to x-axis <0.> speed <240.>;
		turn tailbase1 to x-axis <0.> speed <45.>;
		turn rfoot1a to x-axis <0.> speed <85.>;
		turn rfoot2a to x-axis <0.> speed <85.>;
		turn rfoot1b to x-axis <0.> speed <85.>;
		turn rfoot2b to x-axis <0.> speed <85.>;
		turn rfoot1b to y-axis <0.> speed <85.>;
		turn rfoot2b to y-axis <0.> speed <85.>;
		turn rfoot1c to x-axis <0.> speed <85.>;
		turn rfoot2c to x-axis <0.> speed <85.>;
		turn rpad1 to x-axis <0.> speed <85.>;
		turn rpad2 to x-axis <0.> speed <85.>;
		turn ffoot1a to x-axis <0.> speed <85.>;
		turn ffoot2a to x-axis <0.> speed <85.>;
		turn ffoot1b to x-axis <0.> speed <85.>;
		turn ffoot2b to x-axis <0.> speed <85.>;
		turn ffoot1c to x-axis <0.> speed <85.>;
		turn ffoot2c to x-axis <0.> speed <85.>;
		turn neck4 to x-axis <0.> speed <45.>;
		turn neck3 to x-axis <0.> speed <45.>;
		turn head to x-axis <0.> speed <45.>;
		turn tailbase2 to x-axis <0.> speed <105.>;
		turn tailbase4 to x-axis <0.> speed <105.>;
		sleep 150;
	}
}

InitState()
{
	Static_Var_2 = 1;
	Static_Var_3 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( Static_Var_2 == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( Static_Var_2 == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	Static_Var_3 = 0;
}

Create()
{
	move body to z-axis [12.] now;
	turn body to x-axis <-70.> now;
	move body to y-axis [7.] now;
	turn neck3 to x-axis <30.> now;
	turn neck1 to x-axis <30.> now;
	turn head to x-axis <30.> now;
	turn tailbase to x-axis <40.> now;
	turn tailbase1 to x-axis <40.> now;
	turn tailbase to y-axis <-30.> now;
	turn tail2 to y-axis <-40.> now;
	turn tail3 to y-axis <-30.> now;
	turn tail4 to y-axis <-40.> now;
	turn tail5 to y-axis <-40.> now;
	turn rfoot2a to x-axis <70.> now;
	turn rfoot1a to x-axis <70.> now;
	turn ffoot1a to x-axis <70.> now;
	turn ffoot2a to x-axis <70.> now;
	turn rfoot1c to x-axis <50.> now;
	turn rfoot2c to x-axis <50.> now;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	move body to z-axis [0.] speed [400.];
	turn neck3 to x-axis <0.> speed <500.>;
	turn neck1 to x-axis <0.> speed <500.>;
	turn tailbase to x-axis <0.> speed <500.>;
	turn tailbase to y-axis <0.> speed <500.>;
	turn tail5 to y-axis <0.> speed <500.>;
	turn body to x-axis <0.> speed <200.>;
	move body to y-axis [0.] now;
	turn head to x-axis <0.> now;
	turn tailbase1 to x-axis <0.> now;
	turn tail2 to y-axis <0.> now;
	turn tail3 to y-axis <0.> now;
	turn tail4 to y-axis <0.> now;
	turn rfoot2a to x-axis <0.> now;
	turn rfoot1a to x-axis <0.> now;
	turn ffoot1a to x-axis <0.> now;
	turn ffoot2a to x-axis <0.> now;
	turn rfoot1c to x-axis <0.> now;
	turn rfoot2c to x-axis <0.> now;
	call-script InitState();
	set ARMORED to 1;
}

Flap()
{
	if( TRUE )
	{
	}
	while( TRUE )
	{
		if( TRUE )
		{
			turn wing1a to z-axis <75.> speed <120.>;
			turn wing1b to z-axis <-3.> speed <120.>;
			turn wing1c to z-axis <-4.> speed <120.>;
			turn wing2a to z-axis <-75.> speed <120.>;
			turn wing2b to z-axis <3.> speed <120.>;
			turn wing2c to z-axis <4.> speed <120.>;
			turn tail1 to y-axis <-16.> speed <55.>;
			turn tail2 to y-axis <12.> speed <35.>;
			turn tail3 to y-axis <-11.> speed <35.>;
			turn tail4 to y-axis <3.> speed <35.>;
			turn tail2 to x-axis <4.> speed <35.>;
			turn tail3 to x-axis <-4.> speed <35.>;
			turn tail4 to x-axis <3.> speed <35.>;
			turn tail5 to x-axis <-3.> speed <35.>;
			wait-for-turn wing1a around z-axis;
			wait-for-turn wing2a around z-axis;
			sleep 50;
		}
		if( TRUE )
		{
			turn wing1a to z-axis <0.> speed <120.>;
			turn wing1b to z-axis <-5.> speed <120.>;
			turn wing1c to z-axis <-2.> speed <120.>;
			turn wing2a to z-axis <0.> speed <120.>;
			turn wing2b to z-axis <5.> speed <120.>;
			turn wing2c to z-axis <2.> speed <120.>;
			turn tail1 to y-axis <16.> speed <55.>;
			turn tail2 to y-axis <-12.> speed <35.>;
			turn tail3 to y-axis <11.> speed <35.>;
			turn tail4 to y-axis <-3.> speed <35.>;
			turn tail2 to x-axis <-4.> speed <35.>;
			turn tail3 to x-axis <4.> speed <35.>;
			turn tail4 to x-axis <-3.> speed <35.>;
			turn tail5 to x-axis <3.> speed <35.>;
			wait-for-turn wing1a around z-axis;
			wait-for-turn wing2a around z-axis;
			sleep 50;
		}
	}
}

stopflap()
{
	if( TRUE )
	{
		turn wing1a to z-axis <75.> speed <120.>;
		turn wing1b to z-axis <-3.> speed <120.>;
		turn wing1c to z-axis <4.> speed <120.>;
		turn wing2a to z-axis <-75.> speed <120.>;
		turn wing2b to z-axis <-3.> speed <120.>;
		turn wing2c to z-axis <4.> speed <120.>;
		turn tail1 to y-axis <20.> speed <50.>;
		turn tail2 to y-axis <-15.> speed <35.>;
		turn tail3 to y-axis <15.> speed <35.>;
		turn tail4 to y-axis <-5.> speed <35.>;
		turn tail2 to x-axis <-5.> speed <35.>;
		turn tail3 to x-axis <5.> speed <35.>;
		turn tail4 to x-axis <-5.> speed <35.>;
		wait-for-turn wing1a around z-axis;
		wait-for-turn wing2a around z-axis;
		sleep 50;
	}
	if( TRUE )
	{
		turn wing1a to z-axis <0.> speed <120.>;
		turn wing1b to z-axis <-5.> speed <120.>;
		turn wing1c to z-axis <-5.> speed <120.>;
		turn wing2a to z-axis <0.> speed <120.>;
		turn wing2b to z-axis <5.> speed <120.>;
		turn wing2c to z-axis <5.> speed <120.>;
		turn tail1 to y-axis <-20.> speed <50.>;
		turn tail2 to y-axis <15.> speed <35.>;
		turn tail3 to y-axis <-15.> speed <35.>;
		turn tail4 to y-axis <5.> speed <35.>;
		turn tail2 to x-axis <-5.> speed <35.>;
		turn tail3 to x-axis <5.> speed <35.>;
		turn tail4 to x-axis <-5.> speed <35.>;
		wait-for-turn wing1a around z-axis;
		wait-for-turn wing2a around z-axis;
		sleep 50;
	}
	if( TRUE )
	{
		turn wing1a to z-axis <75.> speed <120.>;
		turn wing1b to z-axis <-3.> speed <120.>;
		turn wing1c to z-axis <4.> speed <120.>;
		turn wing2a to z-axis <-75.> speed <120.>;
		turn wing2b to z-axis <-3.> speed <120.>;
		turn wing2c to z-axis <4.> speed <120.>;
		turn tail1 to y-axis <15.> speed <35.>;
		turn tail2 to y-axis <-15.> speed <35.>;
		turn tail3 to y-axis <15.> speed <35.>;
		turn tail4 to y-axis <-5.> speed <35.>;
		turn tail2 to x-axis <-5.> speed <35.>;
		turn tail3 to x-axis <5.> speed <35.>;
		turn tail4 to x-axis <-5.> speed <35.>;
		wait-for-turn wing1a around z-axis;
		wait-for-turn wing2a around z-axis;
		sleep 50;
	}
	if( TRUE )
	{
		turn wing1a to z-axis <20.> speed <120.>;
		turn wing1b to z-axis <-20.> speed <120.>;
		turn wing1c to z-axis <40.> speed <120.>;
		turn wing2a to z-axis <-20.> speed <120.>;
		turn wing2b to z-axis <20.> speed <120.>;
		turn wing2c to z-axis <-40.> speed <120.>;
		turn tail1 to y-axis <-5.> speed <35.>;
		turn tail2 to y-axis <5.> speed <35.>;
		turn tail3 to y-axis <-5.> speed <35.>;
		turn tail4 to y-axis <5.> speed <35.>;
		turn tail2 to x-axis <-5.> speed <35.>;
		turn tail3 to x-axis <5.> speed <35.>;
		turn tail4 to x-axis <-5.> speed <35.>;
		wait-for-turn wing1a around z-axis;
		wait-for-turn wing2a around z-axis;
		sleep 50;
	}
	return (0);
	turn wing1a to z-axis <-20.> speed <120.>;
	turn wing1b to z-axis <20.> speed <120.>;
	turn wing1c to z-axis <-40.> speed <120.>;
	turn wing2a to z-axis <20.> speed <120.>;
	turn wing2b to z-axis <-20.> speed <120.>;
	turn wing2c to z-axis <40.> speed <120.>;
	turn tail1 to y-axis <0.> speed <35.>;
	turn tail2 to y-axis <0.> speed <35.>;
	turn tail3 to y-axis <0.> speed <35.>;
	turn tail4 to y-axis <0.> speed <35.>;
	turn tail2 to x-axis <0.> speed <35.>;
	turn tail3 to x-axis <0.> speed <35.>;
	turn tail4 to x-axis <0.> speed <35.>;
	turn tail5 to x-axis <0.> speed <35.>;
	wait-for-turn wing1a around z-axis;
	wait-for-turn wing2a around z-axis;
	sleep 50;
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	start-script Flap();
}

StopMoving()
{
	signal 2;
	start-script stopflap();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = firept1;
}

attackstance()
{
	turn body to x-axis <-25.> speed <125.>;
	turn neck2 to x-axis <25.> speed <125.>;
	turn ffoot1a to x-axis <60.> speed <135.>;
	turn ffoot2a to x-axis <60.> speed <135.>;
	turn ffoot1b to x-axis <45.> speed <135.>;
	turn ffoot2b to x-axis <45.> speed <135.>;
	turn ffoot1c to x-axis <30.> speed <135.>;
	turn ffoot2c to x-axis <30.> speed <135.>;
	turn rfoot1b to x-axis <50.> speed <135.>;
	turn rfoot2b to x-axis <50.> speed <135.>;
	turn rfoot1c to x-axis <175.> speed <135.>;
	turn rfoot2c to x-axis <175.> speed <135.>;
	turn rfoot1a to x-axis <45.> speed <135.>;
	turn rfoot2a to x-axis <45.> speed <135.>;
	turn rfoot1b to x-axis <45.> speed <135.>;
	turn rfoot2b to x-axis <45.> speed <135.>;
	turn rfoot1c to x-axis <30.> speed <135.>;
	turn rfoot2c to x-axis <30.> speed <135.>;
	sleep 3000;
	turn body to x-axis <0.> speed <25.>;
	turn mouth to x-axis <0.> speed <1000.>;
	turn tailbase1 to x-axis <0.> speed <25.>;
	turn rfoot1a to x-axis <15.> speed <45.>;
	turn rfoot2a to x-axis <15.> speed <45.>;
	turn rfoot1b to x-axis <40.> speed <45.>;
	turn rfoot2b to x-axis <40.> speed <45.>;
	turn rfoot1b to y-axis <30.> speed <45.>;
	turn rfoot2b to y-axis <-30.> speed <45.>;
	turn rfoot1c to x-axis <0.> speed <45.>;
	turn rfoot2c to x-axis <0.> speed <45.>;
	turn ffoot1a to x-axis <95.> speed <45.>;
	turn ffoot2a to x-axis <95.> speed <45.>;
	turn ffoot1b to x-axis <50.> speed <45.>;
	turn ffoot2b to x-axis <50.> speed <45.>;
	turn ffoot1c to x-axis <0.> speed <45.>;
	turn ffoot2c to x-axis <0.> speed <45.>;
	turn neck2 to x-axis <0.> speed <45.>;
}

FirePrimary()
{
	start-script attackstance();
	turn mouth to x-axis <20.> speed <1000.>;
}

FireSecondary()
{
	move neck1 to z-axis [-1.] speed [100.];
	move neck2 to z-axis [-1.] speed [100.];
	move neck3 to z-axis [-1.] speed [100.];
	sleep 200;
	move neck1 to z-axis [0.] speed [100.];
	move neck2 to z-axis [0.] speed [100.];
	move neck3 to z-axis [0.] speed [100.];
}

QuerySecondary(piecenum)
{
	piecenum = firept2;
}

QueryTertiary(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = firept2a;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = firept2b;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = firept2c;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = firept2d;
	}
}

FireTertiary()
{
	Static_Var_1 = !Static_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode body type BITMAPONLY | BITMAP5;
		explode mouth type BITMAPONLY | BITMAP3;
		explode neck2 type BITMAPONLY | BITMAP5;
		explode neck4 type SHATTER | BITMAP4;
		explode wing1b type SHATTER | BITMAP3;
		explode ffoot1a type SHATTER | BITMAP1;
		explode ffoot1b type SHATTER | BITMAP2;
		explode head type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode wing1c type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode neck3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP3;
		explode body type BITMAPONLY | BITMAP5;
		explode rfoot1a type BITMAPONLY | BITMAP3;
		explode neck1 type BITMAPONLY | BITMAP5;
		explode neck3 type SHATTER | BITMAP4;
		explode tail5 type SHATTER | BITMAP2;
		explode wing1b type SHATTER | BITMAP3;
		explode wing2c type SHATTER | BITMAP3;
		explode ffoot2a type SHATTER | BITMAP1;
		explode ffoot1c type SHATTER | BITMAP2;
		explode head type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode wing1c type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode tail3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP3;
		explode body type BITMAPONLY | BITMAP5;
		explode rfoot1a type BITMAPONLY | BITMAP3;
		explode neck1 type BITMAPONLY | BITMAP5;
		explode neck3 type SHATTER | BITMAP4;
		explode tail5 type SHATTER | BITMAP2;
		explode tail2 type SHATTER | BITMAP2;
		explode wing1b type SHATTER | BITMAP3;
		explode wing1a type SHATTER | BITMAP3;
		explode wing2c type SHATTER | BITMAP3;
		explode ffoot2a type SHATTER | BITMAP1;
		explode ffoot1c type SHATTER | BITMAP2;
		explode rpad1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode wing1c type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode wing2a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode tail3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP3;
	explode body type BITMAPONLY | BITMAP5;
	explode rfoot1a type BITMAPONLY | BITMAP3;
	explode neck1 type BITMAPONLY | BITMAP5;
	explode neck3 type SHATTER | BITMAP4;
	explode tail5 type SHATTER | BITMAP2;
	explode tail2 type SHATTER | BITMAP2;
	explode wing1b type SHATTER | BITMAP3;
	explode wing1a type SHATTER | BITMAP3;
	explode wing2c type SHATTER | BITMAP3;
	explode ffoot2a type SHATTER | BITMAP1;
	explode ffoot1c type SHATTER | BITMAP2;
	explode rpad1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode wing1c type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode wing2a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode tail3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
