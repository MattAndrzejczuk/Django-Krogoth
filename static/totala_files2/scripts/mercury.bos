#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, turret, axel, firepoint, firea, fireb,
       foot1, foot2, joint, leftgun-barrel, leftgun-rear, leftgun-front, leftgun-port, rightgun-rear,
       rightgun-front, rightgun-barrel, rightgun-port;

static-var  Static_Var_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	dont-cache flare1;
	dont-cache flare2;
	dont-shade flare1;
	dont-shade flare2;
	Static_Var_1 = 1;
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <75.>;
	turn axel to x-axis <0.> - pitch speed <75.>;
	wait-for-turn turret around y-axis;
	wait-for-turn axel around x-axis;
	return (1);
}

FirePrimary()
{
	if( Static_Var_1 == 1 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		Static_Var_1 = 2;
		return (0);
	}
	if( Static_Var_1 == 2 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		Static_Var_1 = 1;
		return (0);
	}
}

QueryPrimary(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = firea;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = fireb;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = axel;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode foot1 type BITMAPONLY | BITMAP2;
		explode foot2 type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode joint type BITMAPONLY | BITMAP5;
		explode leftgun-barrel type SHATTER;
		explode leftgun-port type SHATTER;
		explode leftgun-front type SHATTER;
		explode leftgun-rear type SHATTER;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode firea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rightgun-barrel type BITMAPONLY;
		explode rightgun-port type BITMAPONLY;
		explode rightgun-front type BITMAPONLY;
		explode rightgun-rear type BITMAPONLY;
		explode flare2 type BITMAPONLY | BITMAP1;
		explode fireb type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode foot1 type BITMAPONLY | BITMAP2;
		explode foot2 type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode joint type BITMAPONLY | BITMAP5;
		explode leftgun-barrel type SHATTER;
		explode leftgun-port type SHATTER;
		explode leftgun-front type SHATTER;
		explode leftgun-rear type SHATTER;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode firea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rightgun-barrel type BITMAPONLY;
		explode rightgun-port type BITMAPONLY;
		explode rightgun-front type BITMAPONLY;
		explode rightgun-rear type BITMAPONLY;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode fireb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode foot1 type BITMAPONLY | BITMAP2;
		explode foot2 type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode joint type BITMAPONLY | BITMAP5;
		explode leftgun-barrel type SHATTER;
		explode leftgun-port type SHATTER;
		explode leftgun-front type SHATTER;
		explode leftgun-rear type SHATTER;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode firea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rightgun-barrel type BITMAPONLY;
		explode rightgun-port type BITMAPONLY;
		explode rightgun-front type BITMAPONLY;
		explode rightgun-rear type BITMAPONLY;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode fireb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode foot1 type BITMAPONLY | BITMAP2;
	explode foot2 type BITMAPONLY | BITMAP3;
	explode turret type BITMAPONLY | BITMAP4;
	explode joint type BITMAPONLY | BITMAP5;
	explode leftgun-barrel type SHATTER;
	explode leftgun-port type SHATTER;
	explode leftgun-front type SHATTER;
	explode leftgun-rear type SHATTER;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode firea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rightgun-barrel type BITMAPONLY;
	explode rightgun-port type BITMAPONLY;
	explode rightgun-front type BITMAPONLY;
	explode rightgun-rear type BITMAPONLY;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode fireb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
