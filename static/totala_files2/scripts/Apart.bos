#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, arm1, arm2, arm3, arm4, arm5, arm6, espin,
       e1, e2, e3, stand, sphere, sphere1, f1, f2,
       f3;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
	}
	sleep 22;
}

deactivatescr()
{
	if( TRUE )
	{
	}
	sleep 22;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	Static_Var_2 = 1;
	Static_Var_3 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( Static_Var_2 == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( Static_Var_2 == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	Static_Var_3 = 0;
}

Smoker()
{
	Static_Var_4 = 1;
	while( Static_Var_4 == 1 )
	{
		emit-sfx 257 from e1;
		emit-sfx 257 from e2;
		emit-sfx 257 from e3;
		emit-sfx 0 from e1;
		emit-sfx 0 from e2;
		emit-sfx 0 from e3;
		sleep 50;
		emit-sfx 0 from e1;
		emit-sfx 0 from e2;
		emit-sfx 0 from e3;
		sleep 50;
		emit-sfx 0 from e1;
		emit-sfx 0 from e2;
		emit-sfx 0 from e3;
		sleep 50;
		emit-sfx 0 from e1;
		emit-sfx 0 from e2;
		emit-sfx 0 from e3;
		sleep 50;
		emit-sfx 0 from e1;
		emit-sfx 0 from e2;
		emit-sfx 0 from e3;
		sleep 50;
		emit-sfx 0 from e1;
		emit-sfx 0 from e2;
		emit-sfx 0 from e3;
		sleep 50;
		emit-sfx 0 from e1;
		emit-sfx 0 from e2;
		emit-sfx 0 from e3;
		sleep 50;
	}
}

Create()
{
	Static_Var_1 = 0;
	dont-cache arm1;
	dont-cache arm2;
	dont-cache arm3;
	dont-cache arm4;
	dont-cache arm5;
	dont-cache arm6;
	dont-cache stand;
	dont-cache sphere;
	dont-cache sphere1;
	dont-cache base;
	dont-shade base;
	dont-shade arm1;
	dont-shade arm2;
	dont-shade arm3;
	dont-shade arm4;
	dont-shade arm5;
	dont-shade arm6;
	dont-shade stand;
	dont-shade sphere;
	dont-shade sphere1;
	call-script InitState();
	Static_Var_4 = 0;
	start-script SmokeUnit();
}

Demo()
{
	Static_Var_1 = 1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Activate()
{
	spin sphere1 around y-axis speed <-50.>;
	spin sphere around y-axis speed <-50.>;
	spin espin around y-axis speed <200.>;
	if( Static_Var_4 == 0 )
	{
		start-script Smoker();
	}
	set ACTIVATION to 1;
	if( Static_Var_1 )
	{
		start-script RequestState(0);
	}
}

Deactivate()
{
	spin espin around y-axis speed <50.>;
	set ACTIVATION to 0;
	if( Static_Var_1 )
	{
		start-script RequestState(1);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = f1;
}

QueryPrimary(piecenum)
{
	piecenum = f1;
}

AimPrimary(heading, pitch)
{
	return (1);
}

FirePrimary()
{
	return (1);
}

AimFromSecondary(piecenum)
{
	piecenum = f2;
}

QuerySecondary(piecenum)
{
	piecenum = f2;
}

AimSecondary(heading, pitch)
{
	sleep 1000;
	return (1);
}

FireSecondary()
{
	return (1);
}

AimFromTertiary(piecenum)
{
	piecenum = f3;
}

QueryTertiary(piecenum)
{
	piecenum = f3;
}

AimTertiary(heading, pitch)
{
	sleep 2000;
	return (1);
}

FireTertiary()
{
	return (1);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP1;
		explode arm3 type BITMAPONLY | BITMAP1;
		explode arm4 type BITMAPONLY | BITMAP1;
		explode arm5 type BITMAPONLY | BITMAP1;
		explode arm6 type BITMAPONLY | BITMAP1;
		explode stand type BITMAPONLY | BITMAP1;
		explode sphere type BITMAPONLY | BITMAP1;
		explode sphere1 type BITMAPONLY | BITMAP1;
		explode espin type BITMAPONLY | BITMAP1;
		explode e1 type BITMAPONLY | BITMAP1;
		explode e2 type BITMAPONLY | BITMAP1;
		explode e3 type BITMAPONLY | BITMAP1;
		explode f1 type BITMAPONLY | BITMAP1;
		explode f2 type BITMAPONLY | BITMAP1;
		explode f3 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP1;
		explode arm3 type BITMAPONLY | BITMAP1;
		explode arm4 type BITMAPONLY | BITMAP1;
		explode arm5 type BITMAPONLY | BITMAP1;
		explode arm6 type BITMAPONLY | BITMAP1;
		explode stand type BITMAPONLY | BITMAP1;
		explode sphere type BITMAPONLY | BITMAP1;
		explode sphere1 type BITMAPONLY | BITMAP1;
		explode espin type BITMAPONLY | BITMAP1;
		explode e1 type BITMAPONLY | BITMAP1;
		explode e2 type BITMAPONLY | BITMAP1;
		explode e3 type BITMAPONLY | BITMAP1;
		explode f1 type BITMAPONLY | BITMAP1;
		explode f2 type BITMAPONLY | BITMAP1;
		explode f3 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode arm3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode arm4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode arm5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode arm6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode stand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sphere type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sphere1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode espin type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode e1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode e2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode e3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode f1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode f2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode f3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode arm3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode arm4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode arm5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode arm6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode stand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sphere type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sphere1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode espin type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode e1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode e2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode e3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode f1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode f2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode f3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
