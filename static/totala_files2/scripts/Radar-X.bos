#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pelvis, lthigh, lleg, lfoot, rthigh, rleg, rfoot,
       body, radar, lhand, rhand, lbarrel1, lbarrel2, rbarrel1, rbarrel2,
       f1, f2, f3, f4, lheel, rheel, f5, f6;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;


HitByWeapon(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 50 )
	{
		if( Static_Var_5 == 0 )
		{
			Static_Var_5 = 1;
			hide rbarrel2;
			explode rbarrel2 type FALL | SMOKE | BITMAP2;
		}
	}
	if( Func_Var_3 <= 25 )
	{
		if( Static_Var_6 == 0 )
		{
			Static_Var_6 = 1;
			hide lbarrel1;
			explode lbarrel1 type FALL | SMOKE | BITMAP2;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	Static_Var_5 = 0;
	Static_Var_6 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent >= 50 )
		{
			if( Static_Var_6 == 1 )
			{
				Static_Var_6 = 0;
				show lbarrel1;
			}
		}
		if( healthpercent >= 75 )
		{
			if( Static_Var_5 == 1 )
			{
				Static_Var_5 = 0;
				show rbarrel2;
			}
		}
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

walk(Func_Var_1, Func_Var_2)
{
	Func_Var_1 = Static_Var_4;
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-1.] now;
		turn rthigh to x-axis <11.> speed <30.>;
		turn lthigh to x-axis <-53.> speed <149.>;
		turn lleg to x-axis <53.> speed <149.>;
		turn rleg to x-axis <53.> speed <149.>;
		turn rfoot to x-axis <-38.> speed <105.>;
		Func_Var_2 = Func_Var_1 + Static_Var_4;
		if( !Func_Var_2 )
		{
			turn lhand to x-axis <5.> speed <15.>;
			turn rhand to x-axis <-27.> speed <74.>;
		}
		sleep 360;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-10.> speed <75.>;
		turn lthigh to x-axis <-42.> speed <43.>;
		turn lleg to x-axis <42.> speed <41.>;
		turn rleg to x-axis <82.> speed <101.>;
		turn rfoot to x-axis <-31.> speed <24.>;
		Func_Var_2 = Func_Var_1 + Static_Var_4;
		if( !Func_Var_2 )
		{
			turn lhand to x-axis <-5.> speed <37.>;
			turn rhand to x-axis <-21.> speed <21.>;
		}
		sleep 280;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-18.> speed <39.>;
		turn lthigh to x-axis <-25.> speed <84.>;
		turn lleg to x-axis <25.> speed <86.>;
		turn rleg to x-axis <86.> speed <19.>;
		turn rfoot to x-axis <-23.> speed <41.>;
		Func_Var_2 = Func_Var_1 + Static_Var_4;
		if( !Func_Var_2 )
		{
			turn lhand to x-axis <-9.> speed <20.>;
			turn rhand to x-axis <-12.> speed <42.>;
		}
		sleep 200;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [0.] now;
		turn rthigh to x-axis <-42.> speed <152.>;
		turn lthigh to x-axis <5.> speed <188.>;
		turn lleg to x-axis <7.> speed <113.>;
		turn lfoot to x-axis <-9.> speed <57.>;
		turn rleg to x-axis <105.> speed <118.>;
		turn rfoot to x-axis <0.> speed <144.>;
		Func_Var_2 = Func_Var_1 + Static_Var_4;
		if( !Func_Var_2 )
		{
			turn lhand to x-axis <-21.> speed <76.>;
			turn rhand to x-axis <3.> speed <94.>;
		}
		sleep 160;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-70.> speed <138.>;
		turn lthigh to x-axis <15.> speed <47.>;
		turn lleg to x-axis <15.> speed <43.>;
		turn lfoot to x-axis <-25.> speed <80.>;
		turn rleg to x-axis <107.> speed <14.>;
		Func_Var_2 = Func_Var_1 + Static_Var_4;
		if( !Func_Var_2 )
		{
			turn lhand to x-axis <-35.> speed <69.>;
			turn rhand to x-axis <7.> speed <24.>;
		}
		sleep 200;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-75.> speed <19.>;
		turn lthigh to x-axis <20.> speed <19.>;
		turn lleg to x-axis <26.> speed <40.>;
		turn lfoot to x-axis <-34.> speed <31.>;
		turn rleg to x-axis <65.> speed <153.>;
		Func_Var_2 = Func_Var_1 + Static_Var_4;
		if( !Func_Var_2 )
		{
			turn lhand to x-axis <-38.> speed <10.>;
			turn rhand to x-axis <10.> speed <10.>;
		}
		sleep 280;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-1.] now;
		turn rthigh to x-axis <-57.> speed <51.>;
		turn lthigh to x-axis <24.> speed <11.>;
		turn lleg to x-axis <39.> speed <34.>;
		turn lfoot to x-axis <-39.> speed <14.>;
		turn rleg to x-axis <57.> speed <22.>;
		Func_Var_2 = Func_Var_1 + Static_Var_4;
		if( !Func_Var_2 )
		{
			turn lhand to x-axis <-28.> speed <26.>;
			turn rhand to x-axis <12.> speed <6.>;
		}
		sleep 360;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-45.> speed <42.>;
		turn lthigh to x-axis <5.> speed <68.>;
		turn lleg to x-axis <67.> speed <101.>;
		turn rfoot to x-axis <-12.> speed <44.>;
		Func_Var_2 = Func_Var_1 + Static_Var_4;
		if( !Func_Var_2 )
		{
			turn lhand to x-axis <-22.> speed <21.>;
			turn rhand to x-axis <3.> speed <34.>;
		}
		sleep 280;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-23.> speed <111.>;
		turn lthigh to x-axis <-13.> speed <90.>;
		turn lleg to x-axis <79.> speed <62.>;
		turn lfoot to x-axis <-28.> speed <53.>;
		turn rleg to x-axis <37.> speed <99.>;
		turn rfoot to x-axis <-16.> speed <17.>;
		Func_Var_2 = Func_Var_1 + Static_Var_4;
		if( !Func_Var_2 )
		{
			turn lhand to x-axis <-11.> speed <56.>;
			turn rhand to x-axis <-6.> speed <45.>;
		}
		sleep 200;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [0.] now;
		turn rthigh to x-axis <3.> speed <159.>;
		turn lthigh to x-axis <-42.> speed <185.>;
		turn lleg to x-axis <90.> speed <67.>;
		turn lfoot to x-axis <-15.> speed <80.>;
		turn rleg to x-axis <7.> speed <190.>;
		turn rfoot to x-axis <-9.> speed <16.>;
		Func_Var_2 = Func_Var_1 + Static_Var_4;
		if( !Func_Var_2 )
		{
			turn lhand to x-axis <1.> speed <80.>;
			turn rhand to x-axis <-21.> speed <93.>;
		}
		sleep 160;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <13.> speed <51.>;
		turn lthigh to x-axis <-57.> speed <74.>;
		turn rfoot to x-axis <-19.> speed <144.>;
		Func_Var_2 = Func_Var_1 + Static_Var_4;
		if( !Func_Var_2 )
		{
			turn lhand to x-axis <7.> speed <26.>;
			turn rhand to x-axis <-29.> speed <37.>;
		}
		sleep 200;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <16.> speed <12.>;
		turn lthigh to x-axis <-67.> speed <35.>;
		turn lleg to x-axis <56.> speed <124.>;
		turn lfoot to x-axis <-3.> speed <44.>;
		turn rleg to x-axis <25.> speed <65.>;
		turn rfoot to x-axis <-33.> speed <50.>;
		Func_Var_2 = Func_Var_1 + Static_Var_4;
		if( !Func_Var_2 )
		{
			turn lhand to x-axis <8.> speed <6.>;
			turn rhand to x-axis <-34.> speed <18.>;
		}
		sleep 280;
	}
}

stand()
{
	turn body to z-axis <0.> speed <10.>;
	turn rthigh to x-axis <0.> speed <30.>;
	turn lthigh to x-axis <0.> speed <30.>;
	turn lleg to x-axis <0.> speed <30.>;
	turn lfoot to x-axis <0.> speed <30.>;
	turn rleg to x-axis <0.> speed <30.>;
	turn rfoot to x-axis <0.> speed <30.>;
	move pelvis to y-axis [0.] speed [3.];
	if( !Static_Var_4 )
	{
		turn lhand to x-axis <0.> speed <30.>;
		turn rhand to x-axis <0.> speed <30.>;
	}
}

MotionControl(Func_Var_1, Func_Var_2)
{
	Func_Var_2 = 1;
	while( TRUE )
	{
		Func_Var_1 = Static_Var_1;
		if( Func_Var_1 )
		{
			call-script walk();
			Func_Var_2 = 1;
		}
		if( !Func_Var_1 )
		{
			if( Func_Var_2 )
			{
				Func_Var_2 = 0;
				call-script stand();
			}
			sleep 100;
		}
	}
}

RestoreAfterDelay()
{
	signal 2;
	set-signal-mask 2;
	sleep Static_Var_3;
	turn lhand to x-axis <0.> speed <45.>;
	turn rhand to x-axis <0.> speed <45.>;
	turn body to y-axis <0.> speed <45.>;
	wait-for-turn rhand around x-axis;
	wait-for-turn body around y-axis;
	Static_Var_4 = 0;
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_3 = Func_Var_1 * 2;
}

Create()
{
	Static_Var_2 = 1;
	Static_Var_1 = 0;
	Static_Var_4 = 0;
	hide f1;
	hide f2;
	hide f3;
	hide f4;
	dont-cache radar;
	Static_Var_3 = 10000;
	start-script MotionControl();
	start-script SmokeUnit();
}

Activate()
{
	turn radar to y-axis <0.> now;
	signal 8;
	dont-cache radar;
	spin radar around y-axis speed <-60.> accelerate <-2.>;
}

Deactivate()
{
	set-signal-mask 8;
	spin radar around y-axis speed <0.> accelerate <2.>;
	dont-cache radar;
	sleep 10000;
	turn radar to y-axis <0.> speed <10.>;
}

StartMoving()
{
	Static_Var_1 = 1;
}

StopMoving()
{
	Static_Var_1 = 0;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimFromTertiary(piecenum)
{
	piecenum = f4;
}

QueryTertiary(piecenum)
{
	if( Static_Var_2 == 1 )
	{
		piecenum = f1;
		if( Static_Var_6 )
		{
			Static_Var_2 = 2;
		}
	}
	if( Static_Var_2 == 2 )
	{
		piecenum = f3;
		if( Static_Var_5 )
		{
			Static_Var_2 = 3;
		}
	}
	if( Static_Var_2 == 3 )
	{
		piecenum = f4;
	}
	if( Static_Var_2 == 4 )
	{
		piecenum = f2;
	}
}

AimTertiary(heading, pitch)
{
	signal 4;
	signal 2;
	set-signal-mask 4;
	Static_Var_4 = 1;
	turn body to y-axis heading speed <500.>;
	turn lhand to x-axis <270.> - pitch speed <150.>;
	turn rhand to x-axis <270.> - pitch speed <150.>;
	wait-for-turn body around y-axis;
	wait-for-turn lhand around x-axis;
	wait-for-turn rhand around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( Static_Var_2 == 1 )
	{
		Static_Var_2 = 2;
		if( !Static_Var_6 )
		{
			show f1;
			move lbarrel1 to y-axis [3.] speed [500.];
			sleep 200;
			hide f1;
			wait-for-move lbarrel1 along y-axis;
			move lbarrel1 to y-axis [0.] speed [5.];
			return (0);
		}
	}
	if( Static_Var_2 == 2 )
	{
		Static_Var_2 = 3;
		if( !Static_Var_5 )
		{
			show f3;
			move rbarrel2 to y-axis [3.] speed [500.];
			sleep 200;
			hide f3;
			wait-for-move rbarrel2 along y-axis;
			move rbarrel2 to y-axis [0.] speed [5.];
			return (0);
		}
	}
	if( Static_Var_2 == 3 )
	{
		show f4;
		move lbarrel2 to y-axis [3.] speed [500.];
		Static_Var_2 = 4;
		sleep 200;
		hide f4;
		wait-for-move lbarrel2 along y-axis;
		move lbarrel2 to y-axis [0.] speed [5.];
		return (0);
	}
	if( Static_Var_2 == 4 )
	{
		show f2;
		move rbarrel1 to y-axis [3.] speed [500.];
		Static_Var_2 = 1;
		sleep 200;
		hide f2;
		wait-for-move lbarrel1 along y-axis;
		move rbarrel1 to y-axis [0.] speed [5.];
	}
}

AimSecondary(heading, pitch)
{
	return (1);
}

FireSecondary()
{
}

AimFromSecondary(piecenum)
{
	piecenum = f5;
}

QuerySecondary(piecenum)
{
	piecenum = f5;
}

AimPrimary(heading, pitch)
{
	return (1);
}

FirePrimary()
{
}

AimFromPrimary(piecenum)
{
	piecenum = f6;
}

QueryPrimary(piecenum)
{
	piecenum = f6;
}

Killed(severity, corpsetype)
{
	hide f1;
	hide f2;
	hide f3;
	hide f4;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode lhand type FALL | BITMAP2;
		explode rhand type FALL | BITMAP2;
		explode lbarrel2 type FALL | BITMAP2;
		explode rbarrel1 type FALL | BITMAP2;
		explode rfoot type BITMAPONLY | BITMAP1;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode rleg type BITMAPONLY | BITMAP2;
		explode lleg type BITMAPONLY | BITMAP5;
		explode rthigh type BITMAPONLY | BITMAP4;
		explode lthigh type BITMAPONLY | BITMAP2;
		explode body type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lhand type FALL | BITMAP2;
		explode rhand type FALL | BITMAP2;
		explode rfoot type BITMAPONLY | BITMAP2;
		explode lfoot type BITMAPONLY | BITMAP2;
		explode lbarrel2 type FALL | BITMAP2;
		explode rbarrel1 type FALL | BITMAP2;
		explode rleg type BITMAPONLY | BITMAP2;
		explode lleg type BITMAPONLY | BITMAP5;
		explode rthigh type BITMAPONLY | BITMAP4;
		explode lthigh type BITMAPONLY | BITMAP2;
		explode body type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode lhand type FALL | SMOKE | BITMAP2;
		explode rhand type FALL | SMOKE | BITMAP2;
		explode rfoot type FALL | SMOKE | BITMAP2;
		explode lfoot type FALL | SMOKE | BITMAP2;
		explode lbarrel2 type FALL | SMOKE | BITMAP2;
		explode rbarrel1 type FALL | SMOKE | BITMAP2;
		explode rleg type BITMAPONLY | BITMAP2;
		explode lleg type BITMAPONLY | BITMAP5;
		explode rthigh type BITMAPONLY | BITMAP4;
		explode lthigh type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 4;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode lhand type FALL | SMOKE | BITMAP2;
	explode rhand type FALL | SMOKE | BITMAP2;
	explode rfoot type FALL | SMOKE | BITMAP2;
	explode lfoot type FALL | SMOKE | BITMAP2;
	explode lbarrel2 type FALL | SMOKE | BITMAP2;
	explode rbarrel1 type FALL | SMOKE | BITMAP2;
	explode rleg type BITMAPONLY | BITMAP2;
	explode lleg type BITMAPONLY | BITMAP5;
	explode rthigh type BITMAPONLY | BITMAP4;
	explode lthigh type BITMAPONLY | BITMAP2;
}
