#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pelvis, lthigh, lleg, lfoot, rthigh, rleg, rfoot,
       body, radar, rbase, mbase, mlbase, mlauncher, ml1, ml2,
       ml3, ml4, ml5, ml6, cover, cbase, lroller, larm,
       lhand, lbarrel, lflare, rroller, rarm, rhand, rbarrel, rflare,
       rl1, rl2, rl3, rl4, rr1, rr2, rr3, rr4,
       lcover1, lcover2, lcover3, rcover1, rcover2, rcover3;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8, Static_Var_9;


HitByWeapon(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 50 )
	{
		if( Static_Var_7 == 0 )
		{
			Static_Var_7 = 1;
			hide lcover1;
			explode lcover1 type FALL | SMOKE | BITMAP2;
		}
	}
	if( Func_Var_3 <= 25 )
	{
		if( Static_Var_8 == 0 )
		{
			Static_Var_8 = 1;
			hide lcover2;
			explode lcover2 type FALL | SMOKE | BITMAP2;
		}
	}
	if( Func_Var_3 <= 10 )
	{
		if( Static_Var_9 == 0 )
		{
			Static_Var_9 = 1;
			hide cover;
			explode cover type SHATTER | BITMAP1;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	Static_Var_7 = 0;
	Static_Var_8 = 0;
	Static_Var_9 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent >= 25 )
		{
			if( Static_Var_9 == 1 )
			{
				Static_Var_9 = 0;
				show cover;
			}
		}
		if( healthpercent >= 50 )
		{
			if( Static_Var_8 == 1 )
			{
				Static_Var_8 = 0;
				show lcover2;
			}
		}
		if( healthpercent >= 75 )
		{
			if( Static_Var_7 == 1 )
			{
				Static_Var_7 = 0;
				show lcover1;
			}
		}
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

walk(Func_Var_1, Func_Var_2)
{
	Func_Var_1 = Static_Var_6;
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-1.] now;
		turn rthigh to x-axis <11.> speed <30.>;
		turn lthigh to x-axis <-53.> speed <149.>;
		turn lleg to x-axis <53.> speed <149.>;
		turn rleg to x-axis <53.> speed <149.>;
		turn rfoot to x-axis <-38.> speed <105.>;
		Func_Var_2 = Func_Var_1 + Static_Var_6;
		if( !Func_Var_2 )
		{
			turn larm to x-axis <5.> speed <15.>;
			turn rarm to x-axis <-27.> speed <74.>;
		}
		sleep 360;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-1.] now;
		turn rthigh to x-axis <-10.> speed <75.>;
		turn lthigh to x-axis <-42.> speed <43.>;
		turn lleg to x-axis <42.> speed <41.>;
		turn rleg to x-axis <82.> speed <101.>;
		turn rfoot to x-axis <-31.> speed <24.>;
		Func_Var_2 = Func_Var_1 + Static_Var_6;
		if( !Func_Var_2 )
		{
			turn larm to x-axis <-5.> speed <37.>;
			turn rarm to x-axis <-21.> speed <21.>;
		}
		sleep 280;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-18.> speed <39.>;
		turn lthigh to x-axis <-25.> speed <84.>;
		turn lleg to x-axis <25.> speed <86.>;
		turn rleg to x-axis <86.> speed <19.>;
		turn rfoot to x-axis <-23.> speed <41.>;
		Func_Var_2 = Func_Var_1 + Static_Var_6;
		if( !Func_Var_2 )
		{
			turn larm to x-axis <-9.> speed <20.>;
			turn rarm to x-axis <-12.> speed <42.>;
		}
		sleep 200;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [0.] now;
		turn rthigh to x-axis <-42.> speed <152.>;
		turn lthigh to x-axis <5.> speed <188.>;
		turn lleg to x-axis <7.> speed <113.>;
		turn lfoot to x-axis <-9.> speed <57.>;
		turn rleg to x-axis <105.> speed <118.>;
		turn rfoot to x-axis <0.> speed <144.>;
		Func_Var_2 = Func_Var_1 + Static_Var_6;
		if( !Func_Var_2 )
		{
			turn larm to x-axis <-21.> speed <76.>;
			turn rarm to x-axis <3.> speed <94.>;
		}
		sleep 160;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-70.> speed <138.>;
		turn lthigh to x-axis <15.> speed <47.>;
		turn lleg to x-axis <15.> speed <43.>;
		turn lfoot to x-axis <-25.> speed <80.>;
		turn rleg to x-axis <107.> speed <14.>;
		Func_Var_2 = Func_Var_1 + Static_Var_6;
		if( !Func_Var_2 )
		{
			turn larm to x-axis <-35.> speed <69.>;
			turn rarm to x-axis <7.> speed <24.>;
		}
		sleep 200;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-1.] now;
		turn rthigh to x-axis <-75.> speed <19.>;
		turn lthigh to x-axis <20.> speed <19.>;
		turn lleg to x-axis <26.> speed <40.>;
		turn lfoot to x-axis <-34.> speed <31.>;
		turn rleg to x-axis <65.> speed <153.>;
		Func_Var_2 = Func_Var_1 + Static_Var_6;
		if( !Func_Var_2 )
		{
			turn larm to x-axis <-38.> speed <10.>;
			turn rarm to x-axis <10.> speed <10.>;
		}
		sleep 280;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-1.] now;
		turn rthigh to x-axis <-57.> speed <51.>;
		turn lthigh to x-axis <24.> speed <11.>;
		turn lleg to x-axis <39.> speed <34.>;
		turn lfoot to x-axis <-39.> speed <14.>;
		turn rleg to x-axis <57.> speed <22.>;
		Func_Var_2 = Func_Var_1 + Static_Var_6;
		if( !Func_Var_2 )
		{
			turn larm to x-axis <-28.> speed <26.>;
			turn rarm to x-axis <12.> speed <6.>;
		}
		sleep 360;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-1.] now;
		turn rthigh to x-axis <-45.> speed <42.>;
		turn lthigh to x-axis <5.> speed <68.>;
		turn lleg to x-axis <67.> speed <101.>;
		turn rfoot to x-axis <-12.> speed <44.>;
		Func_Var_2 = Func_Var_1 + Static_Var_6;
		if( !Func_Var_2 )
		{
			turn larm to x-axis <-22.> speed <21.>;
			turn rarm to x-axis <3.> speed <34.>;
		}
		sleep 280;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <-23.> speed <111.>;
		turn lthigh to x-axis <-13.> speed <90.>;
		turn lleg to x-axis <79.> speed <62.>;
		turn lfoot to x-axis <-28.> speed <53.>;
		turn rleg to x-axis <37.> speed <99.>;
		turn rfoot to x-axis <-16.> speed <17.>;
		Func_Var_2 = Func_Var_1 + Static_Var_6;
		if( !Func_Var_2 )
		{
			turn larm to x-axis <-11.> speed <56.>;
			turn rarm to x-axis <-6.> speed <45.>;
		}
		sleep 200;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [0.] now;
		turn rthigh to x-axis <3.> speed <159.>;
		turn lthigh to x-axis <-42.> speed <185.>;
		turn lleg to x-axis <90.> speed <67.>;
		turn lfoot to x-axis <-15.> speed <80.>;
		turn rleg to x-axis <7.> speed <190.>;
		turn rfoot to x-axis <-9.> speed <16.>;
		Func_Var_2 = Func_Var_1 + Static_Var_6;
		if( !Func_Var_2 )
		{
			turn larm to x-axis <1.> speed <80.>;
			turn rarm to x-axis <-21.> speed <93.>;
		}
		sleep 160;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-0.] now;
		turn rthigh to x-axis <13.> speed <51.>;
		turn lthigh to x-axis <-57.> speed <74.>;
		turn rfoot to x-axis <-19.> speed <144.>;
		Func_Var_2 = Func_Var_1 + Static_Var_6;
		if( !Func_Var_2 )
		{
			turn larm to x-axis <7.> speed <26.>;
			turn rarm to x-axis <-29.> speed <37.>;
		}
		sleep 200;
	}
	if( Static_Var_1 )
	{
		move pelvis to y-axis [-1.] now;
		turn rthigh to x-axis <16.> speed <12.>;
		turn lthigh to x-axis <-67.> speed <35.>;
		turn lleg to x-axis <56.> speed <124.>;
		turn lfoot to x-axis <-3.> speed <44.>;
		turn rleg to x-axis <25.> speed <65.>;
		turn rfoot to x-axis <-33.> speed <50.>;
		Func_Var_2 = Func_Var_1 + Static_Var_6;
		if( !Func_Var_2 )
		{
			turn larm to x-axis <8.> speed <6.>;
			turn rarm to x-axis <-34.> speed <18.>;
		}
		sleep 280;
	}
}

stand()
{
	turn body to z-axis <0.> speed <10.>;
	turn rthigh to x-axis <0.> speed <30.>;
	turn lthigh to x-axis <0.> speed <30.>;
	turn lleg to x-axis <0.> speed <30.>;
	turn lfoot to x-axis <0.> speed <30.>;
	turn rleg to x-axis <0.> speed <30.>;
	turn rfoot to x-axis <0.> speed <30.>;
	move pelvis to y-axis [0.] speed [3.];
	if( !Static_Var_6 )
	{
		turn larm to x-axis <0.> speed <30.>;
		turn rarm to x-axis <0.> speed <30.>;
	}
}

MotionControl(Func_Var_1, Func_Var_2)
{
	Func_Var_2 = 1;
	while( TRUE )
	{
		Func_Var_1 = Static_Var_1;
		if( Func_Var_1 )
		{
			call-script walk();
			Func_Var_2 = 1;
		}
		if( !Func_Var_1 )
		{
			if( Func_Var_2 )
			{
				Func_Var_2 = 0;
				call-script stand();
			}
			sleep 100;
		}
	}
}

RestoreAfterDelay()
{
	signal 2;
	set-signal-mask 2;
	sleep Static_Var_3;
	turn mlauncher to x-axis <0.> speed <70.>;
	turn mlbase to y-axis <0.> speed <70.>;
	move lbarrel to y-axis [0.] speed [5.];
	move rbarrel to y-axis [0.] speed [5.];
	turn body to y-axis <0.> speed <45.>;
	turn mbase to y-axis <0.> speed <45.>;
	turn larm to x-axis <0.> speed <30.>;
	turn rarm to x-axis <0.> speed <30.>;
	turn cover to x-axis <0.> speed <90.>;
	turn cbase to x-axis <0.> speed <90.>;
	turn lcover1 to z-axis <0.> speed <90.>;
	turn lcover2 to x-axis <0.> speed <90.>;
	turn lcover3 to x-axis <0.> speed <90.>;
	turn rcover1 to z-axis <0.> speed <90.>;
	turn rcover2 to x-axis <0.> speed <90.>;
	turn rcover3 to x-axis <0.> speed <90.>;
	wait-for-turn rroller around x-axis;
	Static_Var_6 = 0;
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_3 = Func_Var_1 * 2;
}

Create()
{
	Static_Var_2 = 1;
	Static_Var_4 = 1;
	Static_Var_5 = 1;
	Static_Var_1 = 0;
	Static_Var_6 = 0;
	hide ml1;
	hide ml2;
	hide ml3;
	hide ml4;
	hide ml5;
	hide ml6;
	cache ml1;
	cache ml2;
	cache ml3;
	cache ml4;
	cache ml5;
	cache ml6;
	hide lflare;
	hide rflare;
	cache lflare;
	cache rflare;
	hide rl1;
	hide rl2;
	hide rl3;
	hide rl4;
	hide rr1;
	hide rr2;
	hide rr3;
	hide rr4;
	cache rl1;
	cache rl2;
	cache rl3;
	cache rl4;
	cache rr1;
	cache rr2;
	cache rr3;
	cache rr4;
	cache lfoot;
	cache rfoot;
	Static_Var_3 = 5000;
	start-script MotionControl();
	start-script SmokeUnit();
}

Activate()
{
	turn radar to y-axis <0.> now;
	signal 32;
	dont-cache radar;
	spin radar around y-axis speed <60.> accelerate <2.>;
}

Deactivate()
{
	set-signal-mask 32;
	cache radar;
	spin radar around y-axis speed <0.> accelerate <-2.>;
	sleep 10000;
	turn radar to y-axis <0.> speed <10.>;
}

StartMoving()
{
	Static_Var_1 = 1;
}

StopMoving()
{
	Static_Var_1 = 0;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal 4;
	signal 2;
	set-signal-mask 4;
	Static_Var_6 = 1;
	move lbarrel to y-axis [-8.] speed [8.];
	move rbarrel to y-axis [-8.] speed [8.];
	turn lcover1 to z-axis <175.> speed <45.>;
	turn rcover1 to z-axis <185.> speed <45.>;
	turn lcover2 to x-axis <185.> speed <45.>;
	turn rcover2 to x-axis <185.> speed <45.>;
	turn lcover3 to x-axis <175.> speed <45.>;
	turn rcover3 to x-axis <175.> speed <45.>;
	turn body to y-axis heading speed <45.>;
	turn mbase to y-axis <0.> - heading speed <45.>;
	turn larm to x-axis <270.> - pitch speed <30.>;
	turn rarm to x-axis <270.> - pitch speed <30.>;
	wait-for-turn body around y-axis;
	wait-for-turn larm around x-axis;
	wait-for-turn rarm around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_2 == 1 )
	{
		show lflare;
		move lbarrel to y-axis [-5.] speed [500.];
		Static_Var_2 = 2;
		sleep 200;
		hide lflare;
		wait-for-move lbarrel along y-axis;
		move lbarrel to y-axis [-8.] speed [5.];
		return (0);
	}
	if( Static_Var_2 == 2 )
	{
		show rflare;
		move rbarrel to y-axis [-5.] speed [500.];
		Static_Var_2 = 1;
		sleep 200;
		hide rflare;
		wait-for-move rbarrel along y-axis;
		move rbarrel to y-axis [-8.] speed [5.];
	}
}

AimFromPrimary(piecenum)
{
	piecenum = lflare;
	if( Static_Var_2 == 2 )
	{
		piecenum = rflare;
	}
}

QueryPrimary(piecenum)
{
	piecenum = lflare;
	if( Static_Var_2 == 2 )
	{
		piecenum = rflare;
	}
}

AimSecondary(heading, pitch)
{
	signal 8;
	signal 2;
	set-signal-mask 8;
	wait-for-turn cover around x-axis;
	turn cover to x-axis <120.> speed <60.>;
	turn cbase to x-axis <110.> speed <60.>;
	wait-for-turn cover around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( Static_Var_4 == 1 )
	{
		show rl1;
		Static_Var_4 = 2;
		sleep 100;
		hide rl1;
		return (0);
	}
	if( Static_Var_4 == 2 )
	{
		show rr1;
		Static_Var_4 = 3;
		sleep 100;
		hide rr1;
		return (0);
	}
	if( Static_Var_4 == 3 )
	{
		show rl2;
		Static_Var_4 = 4;
		sleep 100;
		hide rl2;
		return (0);
	}
	if( Static_Var_4 == 4 )
	{
		show rr2;
		Static_Var_4 = 5;
		sleep 100;
		hide rr2;
		return (0);
	}
	if( Static_Var_4 == 5 )
	{
		show rl3;
		Static_Var_4 = 6;
		sleep 100;
		hide rl3;
		return (0);
	}
	if( Static_Var_4 == 6 )
	{
		show rr3;
		Static_Var_4 = 7;
		sleep 100;
		hide rr3;
		return (0);
	}
	if( Static_Var_4 == 7 )
	{
		show rl4;
		Static_Var_4 = 8;
		sleep 100;
		hide rl4;
		return (0);
	}
	if( Static_Var_4 == 8 )
	{
		show rr4;
		Static_Var_4 = 1;
		sleep 100;
		hide rr4;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = body;
}

QuerySecondary(piecenum)
{
	if( Static_Var_4 == 1 )
	{
		piecenum = rl1;
	}
	if( Static_Var_4 == 2 )
	{
		piecenum = rr1;
	}
	if( Static_Var_4 == 3 )
	{
		piecenum = rl2;
	}
	if( Static_Var_4 == 4 )
	{
		piecenum = rr2;
	}
	if( Static_Var_4 == 5 )
	{
		piecenum = rl3;
	}
	if( Static_Var_4 == 6 )
	{
		piecenum = rr3;
	}
	if( Static_Var_4 == 7 )
	{
		piecenum = rl4;
	}
	if( Static_Var_4 == 8 )
	{
		piecenum = rr4;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = mlauncher;
}

QueryTertiary(piecenum)
{
	if( Static_Var_5 == 1 )
	{
		piecenum = ml1;
	}
	if( Static_Var_5 == 2 )
	{
		piecenum = ml2;
	}
	if( Static_Var_5 == 3 )
	{
		piecenum = ml3;
	}
	if( Static_Var_5 == 4 )
	{
		piecenum = ml4;
	}
	if( Static_Var_5 == 5 )
	{
		piecenum = ml5;
	}
	if( Static_Var_5 == 6 )
	{
		piecenum = ml6;
	}
}

AimTertiary(heading, pitch)
{
	signal 16;
	signal 2;
	set-signal-mask 16;
	turn mlbase to y-axis heading speed <70.>;
	turn mlauncher to x-axis <0.> - pitch speed <70.>;
	wait-for-turn mlbase around y-axis;
	wait-for-turn mlauncher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( Static_Var_5 == 1 )
	{
		show ml1;
		Static_Var_5 = 2;
		sleep 50;
		hide ml1;
		return (0);
	}
	if( Static_Var_5 == 2 )
	{
		show ml2;
		Static_Var_5 = 3;
		sleep 50;
		hide ml2;
		return (0);
	}
	if( Static_Var_5 == 3 )
	{
		show ml3;
		Static_Var_5 = 4;
		sleep 50;
		hide ml3;
		return (0);
	}
	if( Static_Var_5 == 4 )
	{
		show ml4;
		Static_Var_5 = 5;
		sleep 50;
		hide ml4;
		return (0);
	}
	if( Static_Var_5 == 5 )
	{
		show ml5;
		Static_Var_5 = 6;
		sleep 50;
		hide ml5;
		return (0);
	}
	if( Static_Var_5 == 6 )
	{
		show ml6;
		Static_Var_5 = 1;
		sleep 50;
		hide ml6;
		return (0);
	}
}

Killed(severity, corpsetype)
{
	hide ml1;
	hide ml2;
	hide ml3;
	hide ml4;
	hide ml5;
	hide ml6;
	hide lflare;
	hide rflare;
	hide rl1;
	hide rl2;
	hide rl3;
	hide rl4;
	hide rr1;
	hide rr2;
	hide rr3;
	hide rr4;
	explode lbarrel type FALL | BITMAP2;
	explode rbarrel type FALL | BITMAP2;
	explode mlauncher type FALL | SMOKE | BITMAP2;
	explode radar type FALL | BITMAP2;
	explode larm type FALL | BITMAP2;
	explode rarm type FALL | BITMAP2;
	explode rhand type FALL | BITMAP2;
	explode lhand type FALL | BITMAP2;
	explode lcover3 type FALL | BITMAP2;
	explode rcover1 type FALL | BITMAP2;
	explode rcover2 type FALL | BITMAP2;
	explode rcover3 type FALL | BITMAP2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode rthigh type FALL | SMOKE | BITMAP2;
		explode pelvis type FALL | SMOKE | BITMAP2;
		return (0);
	}
	corpsetype = 4;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode rthigh type FALL | SMOKE | BITMAP2;
	explode lthigh type FALL | SMOKE | BITMAP2;
	explode pelvis type FALL | SMOKE | BITMAP2;
}
