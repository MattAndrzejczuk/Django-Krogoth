#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, housing, pipes, mmakercore, glowingthing, wake1, wake2, wake3,
       door1, door2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


EmitSFX()
{
	while( TRUE )
	{
		if( Static_Var_1 )
		{
			emit-sfx 259 from wake1;
			sleep 200;
			emit-sfx 259 from wake2;
			sleep 200;
			emit-sfx 259 from wake3;
		}
		sleep 200;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Go()
{
	set ARMORED to 0;
	turn door1 to x-axis <90.> speed <50.>;
	turn door2 to x-axis <270.> speed <50.>;
	wait-for-turn door1 around x-axis;
	wait-for-turn door2 around x-axis;
	move mmakercore to y-axis [10.] speed [10.];
	wait-for-move mmakercore along y-axis;
	dont-cache glowingthing;
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	cache glowingthing;
	move mmakercore to y-axis [0.] speed [10.];
	wait-for-move mmakercore along y-axis;
	turn door1 to x-axis <0.> speed <50.>;
	turn door2 to x-axis <0.> speed <50.>;
	wait-for-turn door1 around x-axis;
	wait-for-turn door2 around x-axis;
	set ARMORED to 1;
}

InitState()
{
	Static_Var_2 = 1;
	Static_Var_3 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( Static_Var_2 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_2 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_3 = 0;
}

Create()
{
	dont-shade glowingthing;
	dont-shade mmakercore;
	dont-shade door1;
	dont-shade door2;
	Static_Var_1 = 0;
	call-script InitState();
	call-script EmitSFX();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( get ACTIVATION )
	{
		signal 2;
		set-signal-mask 2;
		set ACTIVATION to 0;
		sleep 8000;
		set ACTIVATION to 100;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP1;
		explode glowingthing type BITMAPONLY | BITMAP2;
		explode mmakercore type BITMAPONLY | BITMAP2;
		explode pipes type BITMAPONLY | BITMAP2;
		explode housing type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP1;
		explode glowingthing type SHATTER | BITMAP2;
		explode mmakercore type SHATTER | BITMAP2;
		explode pipes type BITMAPONLY | BITMAP2;
		explode housing type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type SHATTER | BITMAP1;
		explode door2 type SHATTER | BITMAP1;
		explode glowingthing type SHATTER | BITMAP2;
		explode mmakercore type BITMAPONLY | BITMAP2;
		explode pipes type BITMAPONLY | BITMAP2;
		explode housing type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode door1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode door2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode glowingthing type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode mmakercore type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode pipes type BITMAPONLY | BITMAP2;
	explode housing type BITMAPONLY | BITMAP2;
}
