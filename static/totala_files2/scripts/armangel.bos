#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  chest, pelvis, leftleg, rightleg, rightfoot, leftfoot, leftshoulder, rightshoulder,
       rightarm, biggun, leftarm, arm, smallgun, head, righttopwing, rightwing,
       lefttopwing, leftwing, bigflare, smallflare;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from chest;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl()
{
	while( TRUE )
	{
		if( Static_Var_4 == 2 AND Static_Var_5 )
		{
			signal 8;
			Static_Var_3 = 1;
			Static_Var_5 = 0;
			turn chest to y-axis <0.> speed <120.>;
			turn leftwing to y-axis <90.> speed <90.>;
			turn rightwing to y-axis <-90.> speed <90.>;
			sleep 250;
			set ARMORED to 0;
			move pelvis to y-axis [15.] speed [10.];
			turn pelvis to x-axis <30.> speed <20.>;
			sleep 300;
			turn leftleg to x-axis <0.> speed <200.>;
			turn leftfoot to x-axis <0.> speed <200.>;
			turn rightleg to x-axis <0.> speed <200.>;
			turn rightfoot to x-axis <0.> speed <200.>;
			sleep 300;
			turn leftshoulder to x-axis <-30.> speed <20.>;
			turn rightshoulder to x-axis <-30.> speed <20.>;
			sleep 250;
			turn leftwing to y-axis <120.> speed <180.>;
			turn rightwing to y-axis <-120.> speed <180.>;
			turn chest to x-axis <-15.> speed <30.>;
			sleep 400;
			turn leftfoot to x-axis <15.> speed <20.>;
			turn rightfoot to x-axis <15.> speed <20.>;
			sleep 250;
			Static_Var_3 = 0;
		}
		if( Static_Var_4 == 1 OR Static_Var_4 == 4 AND ( !Static_Var_5 ) )
		{
			signal 8;
			Static_Var_3 = 1;
			move pelvis to y-axis [0.] speed [15.];
			turn pelvis to x-axis <0.> speed <30.>;
			turn pelvis to y-axis <0.> speed <180.>;
			turn leftleg to x-axis <-20.> speed <60.>;
			turn rightleg to x-axis <-20.> speed <60.>;
			sleep 400;
			turn leftshoulder to x-axis <0.> speed <20.>;
			turn rightshoulder to x-axis <0.> speed <20.>;
			turn leftleg to x-axis <0.> speed <40.>;
			turn rightleg to x-axis <0.> speed <40.>;
			turn leftfoot to x-axis <0.> speed <30.>;
			turn rightfoot to x-axis <0.> speed <30.>;
			sleep 300;
			turn chest to x-axis <0.> speed <30.>;
			wait-for-move pelvis along y-axis;
			move chest to y-axis [-1.] speed [10.];
			turn chest to x-axis <8.> speed <40.>;
			turn lefttopwing to y-axis <5.> speed <120.>;
			turn righttopwing to y-axis <5.> speed <120.>;
			Static_Var_3 = 0;
			Static_Var_5 = 1;
			set ARMORED to 1;
			sleep 300;
			move chest to y-axis [0.] speed [3.];
			turn chest to x-axis <0.> speed <20.>;
			turn lefttopwing to y-axis <0.> speed <45.>;
			turn righttopwing to y-axis <0.> speed <45.>;
			turn leftwing to y-axis <0.> speed <90.>;
			turn rightwing to y-axis <0.> speed <90.>;
			sleep 200;
		}
		if( Static_Var_1 )
		{
			if( !Static_Var_5 )
			{
				move pelvis to y-axis [15.] now;
				turn leftleg to x-axis <0.> now;
				turn rightleg to x-axis <0.> now;
				turn leftwing to y-axis <120.> now;
				turn rightwing to y-axis <-120.> now;
				turn chest to x-axis <-15.> now;
				turn leftfoot to x-axis <15.> now;
				turn rightfoot to x-axis <15.> now;
				turn pelvis to x-axis <30.> speed <20.>;
				if( !Static_Var_2 )
				{
					turn leftshoulder to x-axis <-30.> speed <30.>;
					turn rightshoulder to x-axis <-25.> speed <25.>;
				}
				emit-sfx 256 | 1 from righttopwing;
				emit-sfx 256 | 1 from lefttopwing;
				sleep 300;
				emit-sfx 256 | 1 from rightwing;
				emit-sfx 256 | 1 from leftwing;
				sleep 200;
			}
			if( Static_Var_5 )
			{
				if( Static_Var_2 )
				{
					Static_Var_3 = 0;
					move pelvis to y-axis [-0.] now;
					turn pelvis to x-axis <13.> now;
					turn leftleg to x-axis <17.> now;
					turn rightleg to x-axis <-49.> now;
					turn rightfoot to x-axis <32.> now;
					turn leftfoot to x-axis <17.> now;
					sleep 110;
					move pelvis to y-axis [-0.] now;
					turn pelvis to x-axis <9.> now;
					turn leftleg to x-axis <30.> now;
					turn rightleg to x-axis <-32.> now;
					turn rightfoot to x-axis <22.> now;
					turn leftfoot to x-axis <18.> now;
					sleep 110;
					move pelvis to y-axis [1.] now;
					turn pelvis to x-axis <6.> now;
					turn leftleg to x-axis <-0.> now;
					turn rightleg to x-axis <-23.> now;
					turn leftfoot to x-axis <64.> now;
					sleep 110;
					move pelvis to y-axis [0.] now;
					turn pelvis to x-axis <3.> now;
					turn leftleg to x-axis <-28.> now;
					turn rightleg to x-axis <-11.> now;
					turn leftfoot to x-axis <84.> now;
				}
				if( !Static_Var_2 )
				{
					Static_Var_3 = 1;
					move pelvis to y-axis [-0.] now;
					turn pelvis to x-axis <13.> now;
					turn leftleg to x-axis <17.> now;
					turn rightleg to x-axis <-49.> now;
					turn rightfoot to x-axis <32.> now;
					turn leftfoot to x-axis <17.> now;
					turn leftshoulder to x-axis <-18.> now;
					turn rightshoulder to x-axis <28.> now;
					turn rightarm to z-axis <-10.> now;
					turn arm to x-axis <-60.> now;
					turn leftarm to x-axis <-46.> now;
					sleep 110;
					move pelvis to y-axis [-0.] now;
					turn pelvis to x-axis <9.> now;
					turn leftleg to x-axis <30.> now;
					turn rightleg to x-axis <-32.> now;
					turn rightfoot to x-axis <22.> now;
					turn leftfoot to x-axis <18.> now;
					turn leftshoulder to x-axis <-21.> now;
					turn rightshoulder to x-axis <16.> now;
					turn rightarm to z-axis <-10.> now;
					turn arm to x-axis <-60.> now;
					turn leftarm to x-axis <-46.> now;
					sleep 110;
					move pelvis to y-axis [1.] now;
					turn pelvis to x-axis <6.> now;
					turn leftleg to x-axis <-0.> now;
					turn rightleg to x-axis <-23.> now;
					turn leftfoot to x-axis <64.> now;
					turn leftshoulder to x-axis <-12.> now;
					turn rightshoulder to x-axis <9.> now;
					turn rightarm to z-axis <-10.> now;
					turn arm to x-axis <-60.> now;
					turn leftarm to x-axis <-46.> now;
					sleep 110;
					move pelvis to y-axis [0.] now;
					turn pelvis to x-axis <3.> now;
					turn leftleg to x-axis <-28.> now;
					turn rightleg to x-axis <-11.> now;
					turn leftfoot to x-axis <84.> now;
					turn leftshoulder to x-axis <-3.> now;
					turn rightshoulder to x-axis <1.> now;
					turn rightarm to z-axis <-10.> now;
					turn arm to x-axis <-60.> now;
				}
			}
			sleep 110;
		}
		if( Static_Var_1 AND Static_Var_5 )
		{
			if( Static_Var_2 )
			{
				Static_Var_3 = 0;
				turn pelvis to x-axis <0.> now;
				turn leftleg to x-axis <-32.> now;
				turn rightleg to x-axis <1.> now;
				sleep 110;
				move pelvis to y-axis [0.] now;
				turn pelvis to x-axis <4.> now;
				turn leftleg to x-axis <-43.> now;
				turn rightleg to x-axis <11.> now;
				turn rightfoot to x-axis <30.> now;
				turn leftfoot to x-axis <79.> now;
				sleep 110;
				move pelvis to y-axis [-0.] now;
				turn pelvis to x-axis <13.> now;
				turn leftleg to x-axis <-49.> now;
				turn rightleg to x-axis <12.> now;
				turn rightfoot to x-axis <29.> now;
				turn leftfoot to x-axis <33.> now;
				sleep 110;
				move pelvis to y-axis [-0.] now;
				turn pelvis to x-axis <9.> now;
				turn leftleg to x-axis <-34.> now;
				turn rightleg to x-axis <3.> now;
				turn rightfoot to x-axis <48.> now;
			}
			if( !Static_Var_2 )
			{
				Static_Var_3 = 1;
				turn pelvis to x-axis <0.> now;
				turn leftleg to x-axis <-32.> now;
				turn rightleg to x-axis <1.> now;
				turn leftshoulder to x-axis <5.> now;
				turn rightshoulder to x-axis <2.> now;
				turn arm to x-axis <-60.> now;
				turn leftarm to x-axis <-46.> now;
				sleep 110;
				move pelvis to y-axis [0.] now;
				turn pelvis to x-axis <4.> now;
				turn leftleg to x-axis <-43.> now;
				turn rightleg to x-axis <11.> now;
				turn rightfoot to x-axis <30.> now;
				turn leftfoot to x-axis <79.> now;
				turn leftshoulder to x-axis <8.> now;
				turn rightshoulder to x-axis <-8.> now;
				turn rightarm to z-axis <-10.> now;
				turn arm to x-axis <-60.> now;
				turn leftarm to x-axis <-46.> now;
				sleep 110;
				move pelvis to y-axis [-0.] now;
				turn pelvis to x-axis <13.> now;
				turn leftleg to x-axis <-49.> now;
				turn rightleg to x-axis <12.> now;
				turn rightfoot to x-axis <29.> now;
				turn leftfoot to x-axis <33.> now;
				turn leftshoulder to x-axis <15.> now;
				turn rightshoulder to x-axis <-18.> now;
				turn rightarm to z-axis <-10.> now;
				turn arm to x-axis <-60.> now;
				turn leftarm to x-axis <-46.> now;
				sleep 110;
				move pelvis to y-axis [-0.] now;
				turn pelvis to x-axis <9.> now;
				turn leftleg to x-axis <-34.> now;
				turn rightleg to x-axis <3.> now;
				turn rightfoot to x-axis <48.> now;
				turn leftshoulder to x-axis <21.> now;
				turn rightshoulder to x-axis <-7.> now;
				turn rightarm to z-axis <-10.> now;
				turn arm to x-axis <-60.> now;
				turn leftarm to x-axis <-46.> now;
			}
			sleep 110;
		}
		if( Static_Var_1 AND Static_Var_5 )
		{
			if( Static_Var_2 )
			{
				Static_Var_3 = 0;
				move pelvis to y-axis [0.] now;
				turn pelvis to x-axis <6.> now;
				turn leftleg to x-axis <-26.> now;
				turn rightleg to x-axis <-12.> now;
				turn rightfoot to x-axis <66.> now;
				sleep 110;
				move pelvis to y-axis [0.] now;
				turn pelvis to x-axis <3.> now;
				turn leftleg to x-axis <-15.> now;
				turn rightleg to x-axis <-27.> now;
				sleep 110;
				turn pelvis to x-axis <0.> now;
				turn leftleg to x-axis <2.> now;
				turn rightleg to x-axis <-34.> now;
				turn rightfoot to x-axis <69.> now;
				sleep 110;
				move pelvis to y-axis [0.] now;
				turn pelvis to x-axis <4.> now;
				turn leftleg to x-axis <11.> now;
				turn rightleg to x-axis <-44.> now;
				turn rightfoot to x-axis <76.> now;
			}
			if( !Static_Var_2 )
			{
				Static_Var_3 = 1;
				move pelvis to y-axis [0.] - [0.] now;
				turn pelvis to x-axis <6.> now;
				turn leftleg to x-axis <-26.> now;
				turn rightleg to x-axis <-12.> now;
				turn rightfoot to x-axis <66.> now;
				turn leftshoulder to x-axis <11.> now;
				turn rightshoulder to x-axis <5.> now;
				turn rightarm to z-axis <-10.> now;
				turn arm to x-axis <-60.> now;
				turn leftarm to x-axis <-46.> now;
				sleep 110;
				move pelvis to y-axis [0.] now;
				turn pelvis to x-axis <3.> now;
				turn leftleg to x-axis <-15.> now;
				turn rightleg to x-axis <-27.> now;
				turn leftshoulder to x-axis <2.> now;
				turn rightshoulder to x-axis <15.> now;
				turn rightarm to z-axis <-10.> now;
				turn arm to x-axis <-60.> now;
				turn leftarm to x-axis <-46.> now;
				sleep 110;
				turn pelvis to x-axis <0.> now;
				turn leftleg to x-axis <2.> now;
				turn rightleg to x-axis <-34.> now;
				turn rightfoot to x-axis <69.> now;
				turn leftshoulder to x-axis <-0.> now;
				turn rightshoulder to x-axis <24.> now;
				turn rightarm to z-axis <-10.> now;
				turn arm to x-axis <-60.> now;
				turn leftarm to x-axis <-46.> now;
				sleep 110;
				move pelvis to y-axis [0.] - [0.] now;
				turn pelvis to x-axis <4.> now;
				turn leftleg to x-axis <11.> now;
				turn rightleg to x-axis <-44.> now;
				turn rightfoot to x-axis <76.> now;
				turn leftshoulder to x-axis <-8.> now;
				turn rightshoulder to x-axis <26.> now;
				turn rightarm to z-axis <-10.> now;
				turn leftarm to x-axis <-46.> now;
			}
			sleep 110;
		}
		if( !Static_Var_1 )
		{
			Static_Var_3 = 0;
			if( Static_Var_5 )
			{
				set ARMORED to 1;
				move pelvis to y-axis [0.] speed [1.];
				turn leftleg to x-axis <0.> speed <200.>;
				turn leftfoot to x-axis <0.> speed <200.>;
				turn rightleg to x-axis <0.> speed <200.>;
				turn rightfoot to x-axis <0.> speed <200.>;
				if( !Static_Var_2 )
				{
					turn chest to y-axis <0.> speed <90.>;
					turn leftshoulder to x-axis <0.> speed <30.>;
					turn rightshoulder to x-axis <0.> speed <30.>;
					turn rightarm to x-axis <0.> speed <30.>;
					turn arm to x-axis <0.> speed <30.>;
					turn leftarm to x-axis <0.> speed <30.>;
					turn biggun to x-axis <0.> speed <30.>;
				}
			}
			if( !Static_Var_5 )
			{
				set ARMORED to 0;
				move pelvis to y-axis [15.] now;
				turn chest to x-axis <-15.> now;
				turn leftwing to y-axis <120.> now;
				turn rightwing to y-axis <-120.> now;
				turn pelvis to x-axis <10.> speed <10.>;
				turn leftleg to x-axis <-15.> speed <30.>;
				turn rightleg to x-axis <-15.> speed <30.>;
				if( !Static_Var_2 )
				{
					turn leftshoulder to x-axis <-10.> speed <30.>;
					turn rightshoulder to x-axis <-10.> speed <30.>;
					turn rightarm to x-axis <0.> speed <30.>;
					turn arm to x-axis <0.> speed <30.>;
					turn leftarm to x-axis <0.> speed <30.>;
					turn biggun to x-axis <0.> speed <30.>;
				}
				sleep 500;
				turn leftleg to x-axis <0.> speed <20.>;
				turn rightleg to x-axis <0.> speed <20.>;
				turn pelvis to x-axis <20.> speed <10.>;
				sleep 800;
			}
			sleep 100;
		}
	}
}

Create()
{
	hide bigflare;
	hide smallflare;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	Static_Var_5 = 1;
	Static_Var_3 = 0;
	Static_Var_6 = 0;
	set ARMORED to 1;
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	Static_Var_1 = 1;
}

StopMoving()
{
	signal 8;
	Static_Var_1 = 0;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_4 = Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = chest;
}

RestoreAfterDelay()
{
	sleep 5000;
	set-signal-mask 0;
	Static_Var_2 = 0;
	Static_Var_6 = 0;
	turn chest to y-axis <0.> speed <120.>;
	turn pelvis to y-axis <0.> speed <100.>;
	turn biggun to x-axis <0.> speed <90.>;
	turn rightarm to x-axis <0.> speed <90.>;
	turn arm to z-axis <0.> speed <250.>;
	turn arm to x-axis <0.> speed <90.>;
	turn leftshoulder to x-axis <0.> speed <70.>;
	turn rightshoulder to x-axis <0.> speed <70.>;
	if( !Static_Var_5 )
	{
		if( Static_Var_1 )
		{
			turn leftshoulder to x-axis <-30.> speed <70.>;
			turn rightshoulder to x-axis <-30.> speed <70.>;
		}
		if( !Static_Var_1 )
		{
			turn leftshoulder to x-axis <-10.> speed <70.>;
			turn rightshoulder to x-axis <-10.> speed <70.>;
		}
	}
	Static_Var_3 = 1;
	wait-for-turn chest around y-axis;
	wait-for-turn pelvis around y-axis;
	wait-for-turn leftshoulder around x-axis;
	wait-for-turn rightshoulder around x-axis;
	Static_Var_3 = 0;
}

AimPrimary(heading, pitch)
{
	Static_Var_2 = 1;
	turn leftshoulder to x-axis <-30.> speed <90.>;
	wait-for-turn leftshoulder around x-axis;
	while( Static_Var_3 )
	{
		sleep 500;
	}
	signal 2;
	set-signal-mask 2;
	if( Static_Var_5 )
	{
		turn chest to y-axis heading speed <250.>;
	}
	if( !Static_Var_5 )
	{
		turn pelvis to y-axis heading speed <180.>;
	}
	turn biggun to x-axis <-60.> - pitch speed <120.>;
	Static_Var_6 = heading;
	wait-for-turn chest around y-axis;
	wait-for-turn pelvis around y-axis;
	wait-for-turn biggun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = chest;
}

QueryPrimary(piecenum)
{
	piecenum = bigflare;
}

FirePrimary()
{
	show bigflare;
	sleep 150;
	hide bigflare;
}

AimFromSecondary(piecenum)
{
	piecenum = chest;
}

QuerySecondary(piecenum)
{
	piecenum = smallflare;
}

FireSecondary()
{
	show smallflare;
	move smallgun to y-axis [1.] speed [250.];
	sleep 150;
	hide smallflare;
	move smallgun to y-axis [0.] speed [1.];
	turn arm to z-axis <0.> speed <120.>;
}

AimSecondary(heading, pitch)
{
	Static_Var_2 = 1;
	turn rightshoulder to x-axis <-30.> speed <90.>;
	sleep 250;
	turn rightarm to x-axis <-30.> speed <120.>;
	turn arm to x-axis <-30.> speed <120.>;
	wait-for-turn leftshoulder around x-axis;
	while( Static_Var_3 )
	{
		sleep 500;
	}
	signal 4;
	set-signal-mask 4;
	if( heading >= Static_Var_6 - 8190 OR heading <= Static_Var_6 + 13650 )
	{
		turn arm to z-axis heading - Static_Var_6 speed <250.>;
	}
	if( heading < Static_Var_6 - 8190 )
	{
		turn arm to z-axis <-45.> speed <250.>;
		if( Static_Var_5 )
		{
			turn chest to y-axis heading - <45.> speed <250.>;
		}
		if( !Static_Var_5 )
		{
			turn pelvis to y-axis heading - <45.> speed <180.>;
		}
	}
	if( heading > Static_Var_6 + 13650 )
	{
		turn arm to z-axis <75.> speed <250.>;
		if( Static_Var_5 )
		{
			turn chest to y-axis heading + <75.> speed <250.>;
		}
		if( !Static_Var_5 )
		{
			turn pelvis to y-axis heading + <75.> speed <180.>;
		}
	}
	turn arm to x-axis <-30.> - pitch speed <120.>;
	wait-for-turn chest around y-axis;
	wait-for-turn pelvis around y-axis;
	wait-for-turn arm around x-axis;
	wait-for-turn arm around z-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Killed(severity, corpsetype)
{
	hide bigflare;
	hide smallflare;
	if( !Static_Var_5 )
	{
		if( severity <= 50 )
		{
			explode chest type SHATTER | BITMAP1;
			explode pelvis type BITMAPONLY | BITMAP2;
			explode leftleg type BITMAPONLY | BITMAP3;
			explode rightleg type BITMAPONLY | BITMAP4;
			explode rightfoot type FALL | BITMAP5;
			explode leftfoot type FALL | BITMAP1;
			explode leftshoulder type BITMAPONLY | BITMAP2;
			explode rightshoulder type BITMAPONLY | BITMAP3;
			explode rightarm type FALL | BITMAP4;
			explode arm type FALL | BITMAP5;
			explode smallgun type FALL | BITMAP1;
			explode leftarm type FALL | BITMAP2;
			explode biggun type FALL | BITMAP4;
			explode head type FALL | BITMAP5;
			explode lefttopwing type FALL | BITMAP5;
			explode leftwing type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
			explode righttopwing type FALL | BITMAP5;
			explode rightwing type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
			return (0);
		}
		explode chest type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leftleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rightleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rightfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leftfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leftshoulder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rightshoulder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rightarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode smallgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leftarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode biggun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lefttopwing type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leftwing type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode righttopwing type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rightwing type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode chest type BITMAPONLY | BITMAP1;
		explode pelvis type BITMAPONLY | BITMAP2;
		explode leftleg type BITMAPONLY | BITMAP3;
		explode rightleg type BITMAPONLY | BITMAP4;
		explode rightfoot type BITMAPONLY | BITMAP5;
		explode leftfoot type BITMAPONLY | BITMAP1;
		explode leftshoulder type BITMAPONLY | BITMAP2;
		explode rightshoulder type BITMAPONLY | BITMAP3;
		explode rightarm type BITMAPONLY | BITMAP4;
		explode arm type BITMAPONLY | BITMAP5;
		explode smallgun type BITMAPONLY | BITMAP1;
		explode leftarm type BITMAPONLY | BITMAP2;
		explode biggun type BITMAPONLY | BITMAP4;
		explode head type BITMAPONLY | BITMAP5;
		explode lefttopwing type BITMAPONLY | BITMAP5;
		explode leftwing type FALL | BITMAP5;
		explode righttopwing type BITMAPONLY | BITMAP5;
		explode rightwing type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode chest type SHATTER | BITMAP1;
		explode pelvis type BITMAPONLY | BITMAP2;
		explode leftleg type BITMAPONLY | BITMAP3;
		explode rightleg type BITMAPONLY | BITMAP4;
		explode rightfoot type FALL | BITMAP5;
		explode leftfoot type FALL | BITMAP1;
		explode leftshoulder type BITMAPONLY | BITMAP2;
		explode rightshoulder type BITMAPONLY | BITMAP3;
		explode rightarm type FALL | BITMAP4;
		explode arm type FALL | BITMAP5;
		explode smallgun type FALL | BITMAP1;
		explode leftarm type FALL | BITMAP2;
		explode biggun type FALL | BITMAP4;
		explode head type FALL | BITMAP5;
		explode lefttopwing type FALL | BITMAP5;
		explode leftwing type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode righttopwing type FALL | BITMAP5;
		explode rightwing type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode chest type SHATTER | BITMAP1;
		explode pelvis type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode leftleg type BITMAPONLY | BITMAP3;
		explode rightleg type BITMAPONLY | BITMAP4;
		explode rightfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leftfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leftshoulder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rightshoulder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rightarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode smallgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leftarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode biggun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lefttopwing type FALL | BITMAP5;
		explode leftwing type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode righttopwing type FALL | BITMAP5;
		explode rightwing type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	explode chest type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leftleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rightleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rightfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leftfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leftshoulder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rightshoulder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rightarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode smallgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leftarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode biggun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lefttopwing type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leftwing type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode righttopwing type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rightwing type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
