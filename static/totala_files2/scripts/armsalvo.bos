/*******************************************************************************/
/*Total Annihilation Design Corps - http://www.planetannihilation.com/tadc/    */
/*"Salvo" - Arm Guided MLRS Silo                                               */
/*Script v1.3 - 17/05/2003 - Zxythe                                            */
/*******************************************************************************/

piece  base, missile1, missile2, missile3, missile4, stack, arm1, arm2, arm3, arm4, firepoint, GP;

static-var  ready, restore_delay, DesiredState, StateChanging;

#include "sfxtype.h"
#include "exptype.h"

#define SIG_AIM				2
#define SMOKEPIECE1	base

#include "smokeunit.h"

#include "StateChg.h"
activatescr()
{
	move arm1 to x-axis [3] speed [2.6];
	move arm3 to x-axis [-3] speed [2.6];
	
	wait-for-move arm1 along x-axis;
	wait-for-move arm3 along z-axis;
	
	move arm2 to z-axis [-3] speed [2.6];
	move arm4 to z-axis [3] speed [2.6];
	
	wait-for-move arm2 along x-axis;
	wait-for-move arm4 along z-axis;
	
	move stack to y-axis [12] speed [3.9];
	
	wait-for-move stack along y-axis;
	
	sleep 1000;
}

deactivatescr()
{	
	sleep 1000;

	move stack to y-axis [0] speed [3.9];
	
	wait-for-move stack along y-axis;
	
	move arm1 to x-axis [0] speed [2.6];
	move arm3 to x-axis [0] speed [2.6];

	wait-for-move arm1 along x-axis;
	wait-for-move arm3 along x-axis;
	
	
	move arm2 to z-axis [0] speed [2.6];
	move arm4 to z-axis [0] speed [2.6];
	
	wait-for-move arm2 along z-axis;
	wait-for-move arm4 along z-axis;
}

Go()
{
	dont-cache arm1;
	dont-cache arm2;
	dont-cache arm3;
	dont-cache arm4;
	
	dont-cache missile1;
	dont-cache missile2;
	dont-cache missile3;
	dont-cache missile4;
	
	dont-cache stack;

	show missile1;
	show missile2;
	show missile3;
	show missile4;
	move firepoint to x-axis [0] now;
	move firepoint to z-axis [0] now;
	
	call-script activatescr();
	ready = 1;
}

Stop()
{
	ready = 0;
	sleep 4000;
	
	call-script deactivatescr();
	cache arm1;
	cache arm2;
	cache arm3;
	cache arm4;
	
	cache missile1;
	cache missile2;
	cache missile3;
	cache missile4;
	
	cache stack;
}

#define ACTIVATECMD call-script Go();
#define DEACTIVATECMD call-script Stop();
#include "StateChg.h"

readyall()
{
	sleep 1450;

	move firepoint to z-axis [-1.5] now;
	move firepoint to x-axis [1.5] now;
	hide missile1;
	
	sleep 1450;

	move firepoint to z-axis [-1.5] now;
	move firepoint to x-axis [-1.5] now;
	hide missile2;
	
	sleep 1450;
	
	move firepoint to z-axis [1.5] now;
	move firepoint to x-axis [-1.5] now;
	hide missile3;
	
	sleep 1450;

	move firepoint to z-axis [1.5] now;
	move firepoint to x-axis [1.5] now;
	hide missile4;
}

Create()
{
	dont-shade arm1;
	dont-shade arm2;
	dont-shade arm3;
	dont-shade arm4;
	
	dont-shade missile1;
	dont-shade missile2;
	dont-shade missile3;
	dont-shade missile4;
	
	dont-shade stack;
	dont-shade base;
	
	ready = 0;

	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(ACTIVE);
}

Deactivate()
{
	start-script RequestState(INACTIVE);
}

SetMaxReloadTime(time)
{
	restore_delay = time * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask SIG_AIM;
	start-script RequestState(INACTIVE);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(ACTIVE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while(!ready)
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (TRUE);
}

FirePrimary()
{

	start-script readyall();
	
	ready = FALSE;

	start-script RequestState(INACTIVE);
}

QueryPrimary(piecenum)
{
	piecenum = firepoint;
}

SweetSpot(piecenum)
{
	piecenum = GP;
}

Killed(severity, corpsetype)
{
	hide missile1;
	hide missile2;
	hide missile3;
	hide missile4;

	if(severity <= 25)
	{
		corpsetype = 1;
		explode stack type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode arm1 type BITMAPONLY | BITMAP3;
		explode arm2 type BITMAPONLY | BITMAP4;
		explode arm3 type BITMAPONLY | BITMAP5;
		explode arm4 type BITMAPONLY | BITMAP1;
		return (FALSE);
	}
	if(severity <= 50) 
	{
		corpsetype = 2;
		explode stack type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode arm1 type BITMAPONLY | BITMAP3;
		explode arm2 type FALL | BITMAP4;
		explode arm3 type FALL | BITMAP5;
		explode arm4 type BITMAPONLY | BITMAP1;
		return (FALSE);
	}
	if(severity <= 99)
	{
		corpsetype = 3;
		explode stack type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode arm1 type BITMAPONLY | BITMAP3;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode arm3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode arm4 type BITMAPONLY | BITMAP1;
		return (FALSE);
	}
	corpsetype = 3;
	explode stack type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode arm1 type BITMAPONLY | BITMAP3;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode arm3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode arm4 type BITMAPONLY | BITMAP1;
}
