#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  TurretBase, howitzer, fire1, fire2, fire3, fire4, lfire1, lfire2,
       lfire3, lfire4, waist, rleg, rfoot, lleg, lfoot, lupleg,
       rupleg, base, l1, l2, l3, l4, HowitzerBack;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8, Static_Var_9, Static_Var_10;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 4 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from howitzer;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from fire2;
			}
			if( Func_Var_4 == 4 )
			{
				emit-sfx smoketype from lfire4;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl()
{
	while( TRUE )
	{
		if( !Static_Var_2 )
		{
			Static_Var_3 = 0;
			if( !Static_Var_10 )
			{
				turn rupleg to x-axis <-35.> speed <140.>;
				turn lupleg to x-axis <28.> speed <76.>;
			}
			if( Static_Var_10 )
			{
				turn rupleg to x-axis <-35.> speed <70.>;
				turn lupleg to x-axis <28.> speed <56.>;
			}
			turn lleg to x-axis <-15.> speed <30.>;
			turn lfoot to x-axis <-13.> speed <36.>;
			turn waist to z-axis <10.> speed <8.>;
			sleep 500;
			turn waist to x-axis <0.> speed <28.>;
			move l1 to y-axis [0.] speed [2.];
			move l2 to y-axis [0.] speed [2.];
			move l3 to y-axis [0.] speed [2.];
			move l4 to y-axis [0.] speed [2.];
			turn rupleg to x-axis <10.> speed <83.>;
			turn rleg to x-axis <5.> speed <17.>;
			turn lupleg to x-axis <35.> speed <23.>;
			turn lleg to x-axis <10.> speed <83.>;
			turn lfoot to x-axis <5.> speed <60.>;
			sleep 300;
			turn waist to x-axis <-11.> speed <22.>;
			turn waist to y-axis <2.> speed <3.>;
			move l1 to y-axis [1.] speed [2.];
			move l2 to y-axis [1.] speed [2.];
			move l3 to y-axis [1.] speed [2.];
			move l4 to y-axis [1.] speed [2.];
			turn lupleg to x-axis <-35.> speed <140.>;
			turn rupleg to x-axis <28.> speed <76.>;
			turn rleg to x-axis <-15.> speed <30.>;
			turn rfoot to x-axis <-13.> speed <36.>;
			turn waist to z-axis <-10.> speed <8.>;
			sleep 500;
			turn waist to x-axis <0.> speed <28.>;
			move l1 to y-axis [0.] speed [2.];
			move l2 to y-axis [0.] speed [2.];
			move l3 to y-axis [0.] speed [2.];
			move l4 to y-axis [0.] speed [2.];
			turn lupleg to x-axis <10.> speed <83.>;
			turn lleg to x-axis <5.> speed <17.>;
			turn rupleg to x-axis <35.> speed <23.>;
			turn rleg to x-axis <10.> speed <83.>;
			turn rfoot to x-axis <5.> speed <60.>;
			if( Static_Var_10 )
			{
				Static_Var_10 = 0;
			}
			sleep 300;
			turn waist to x-axis <-11.> speed <22.>;
			turn waist to y-axis <-2.> speed <3.>;
			move l1 to y-axis [1.] speed [2.];
			move l2 to y-axis [1.] speed [2.];
			move l3 to y-axis [1.] speed [2.];
			move l4 to y-axis [1.] speed [2.];
		}
		if( Static_Var_2 )
		{
			Static_Var_3 = 1;
			if( !Static_Var_10 )
			{
				turn rupleg to x-axis <-35.> speed <140.>;
				turn lupleg to x-axis <28.> speed <76.>;
			}
			if( Static_Var_10 )
			{
				turn rupleg to x-axis <-35.> speed <70.>;
				turn lupleg to x-axis <28.> speed <56.>;
			}
			turn lleg to x-axis <-15.> speed <30.>;
			turn lfoot to x-axis <-13.> speed <36.>;
			sleep 500;
			turn rupleg to x-axis <10.> speed <83.>;
			turn rleg to x-axis <5.> speed <17.>;
			turn lupleg to x-axis <35.> speed <23.>;
			turn lleg to x-axis <10.> speed <83.>;
			turn lfoot to x-axis <5.> speed <60.>;
			sleep 300;
			turn lupleg to x-axis <-35.> speed <140.>;
			turn rupleg to x-axis <28.> speed <76.>;
			turn rleg to x-axis <-15.> speed <30.>;
			turn rfoot to x-axis <-13.> speed <36.>;
			sleep 500;
			turn lupleg to x-axis <10.> speed <83.>;
			turn lleg to x-axis <5.> speed <17.>;
			turn rupleg to x-axis <35.> speed <23.>;
			turn rleg to x-axis <10.> speed <83.>;
			turn rfoot to x-axis <5.> speed <60.>;
			if( Static_Var_10 )
			{
				Static_Var_10 = 0;
			}
			sleep 300;
		}
	}
}

Create()
{
	hide fire1;
	hide fire2;
	hide fire3;
	hide fire4;
	hide lfire1;
	hide lfire2;
	hide lfire3;
	hide lfire4;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	Static_Var_10 = 1;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	Static_Var_7 = 0;
	Static_Var_6 = 0;
	Static_Var_8 = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 5000;
	turn TurretBase to y-axis <0.> speed <35.>;
	turn TurretBase to x-axis <0.> speed <40.>;
	wait-for-turn TurretBase around x-axis;
	Static_Var_2 = 0;
	if( !Static_Var_7 )
	{
		Static_Var_4 = 0;
	}
}

Restore2()
{
	sleep 4000;
	turn l1 to x-axis <0.> speed <60.>;
	turn l2 to x-axis <0.> speed <60.>;
	turn l3 to x-axis <0.> speed <60.>;
	turn l4 to x-axis <0.> speed <60.>;
	while( Static_Var_6 )
	{
		sleep 1000;
	}
	turn TurretBase to y-axis <0.> speed <35.>;
	turn TurretBase to x-axis <0.> speed <40.>;
	Static_Var_2 = 0;
	if( !Static_Var_8 )
	{
		Static_Var_5 = 0;
	}
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	start-script MotionControl();
	Static_Var_1 = 1;
}

StopMoving()
{
	signal 8;
	Static_Var_1 = 0;
	Static_Var_3 = 1;
	Static_Var_10 = 1;
	turn rupleg to x-axis <0.> speed <100.>;
	turn rleg to x-axis <0.> speed <70.>;
	turn rfoot to x-axis <0.> speed <60.>;
	turn lupleg to x-axis <0.> speed <100.>;
	turn lleg to x-axis <0.> speed <70.>;
	turn lfoot to x-axis <0.> speed <60.>;
	turn waist to z-axis <0.> speed <12.>;
	move l1 to y-axis [0.] speed [1.];
	move l2 to y-axis [0.] speed [1.];
	move l3 to y-axis [0.] speed [1.];
	move l4 to y-axis [0.] speed [1.];
	if( !Static_Var_2 )
	{
		turn howitzer to x-axis <0.> speed <6.>;
		turn waist to y-axis <0.> speed <1.>;
	}
	sleep 100;
}

SweetSpot(piecenum)
{
	piecenum = TurretBase;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	Static_Var_2 = 1;
	Static_Var_6 = 1;
	if( !Static_Var_3 )
	{
		turn waist to x-axis <0.> speed <20.>;
		Static_Var_3 = 1;
	}
	turn TurretBase to y-axis heading speed <60.>;
	turn TurretBase to x-axis <0.> - pitch speed <45.>;
	wait-for-turn TurretBase around y-axis;
	wait-for-turn TurretBase around x-axis;
	Static_Var_6 = 0;
	if( Static_Var_7 )
	{
		sleep 12000;
		Static_Var_4 = 0;
		Static_Var_7 = 0;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_4 == 0 )
	{
		show fire1;
		move HowitzerBack to z-axis [-1.] now;
		move howitzer to z-axis [-2.] speed [200.];
		sleep 140;
		hide fire1;
		Static_Var_4 = 1;
		wait-for-move howitzer along z-axis;
		move howitzer to z-axis [0.] speed [2.];
		move HowitzerBack to z-axis [0.] speed [1.];
		return (0);
	}
	if( Static_Var_4 == 1 )
	{
		show fire2;
		move HowitzerBack to z-axis [-1.] now;
		move howitzer to z-axis [-2.] speed [200.];
		sleep 140;
		hide fire2;
		Static_Var_4 = 2;
		wait-for-move howitzer along z-axis;
		move howitzer to z-axis [0.] speed [2.];
		move HowitzerBack to z-axis [0.] speed [1.];
		return (0);
	}
	if( Static_Var_4 == 2 )
	{
		show fire3;
		move HowitzerBack to z-axis [-1.] now;
		move howitzer to z-axis [-2.] speed [200.];
		sleep 140;
		hide fire3;
		Static_Var_4 = 3;
		wait-for-move howitzer along z-axis;
		move howitzer to z-axis [0.] speed [2.];
		move HowitzerBack to z-axis [0.] speed [1.];
		return (0);
	}
	if( Static_Var_4 == 3 )
	{
		Static_Var_7 = 1;
		show fire4;
		move HowitzerBack to z-axis [-1.] now;
		move howitzer to z-axis [-2.] speed [200.];
		sleep 140;
		hide fire4;
		wait-for-move howitzer along z-axis;
		move howitzer to z-axis [0.] speed [2.];
		move HowitzerBack to z-axis [0.] speed [1.];
		return (0);
	}
}

QueryPrimary(piecenum)
{
	if( Static_Var_4 == 0 )
	{
		piecenum = fire1;
	}
	if( Static_Var_4 == 1 )
	{
		piecenum = fire2;
	}
	if( Static_Var_4 == 2 )
	{
		piecenum = fire3;
	}
	if( Static_Var_4 == 3 )
	{
		piecenum = fire4;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = howitzer;
}

AimFromTertiary(piecenum)
{
	piecenum = howitzer;
}

QueryTertiary(piecenum)
{
	if( Static_Var_5 == 0 )
	{
		piecenum = lfire1;
	}
	if( Static_Var_5 == 1 )
	{
		piecenum = lfire2;
	}
	if( Static_Var_5 == 2 )
	{
		piecenum = lfire3;
	}
	if( Static_Var_5 == 3 )
	{
		piecenum = lfire4;
	}
}

FireTertiary()
{
	if( Static_Var_5 == 0 )
	{
		move l1 to z-axis [-1.] speed [80.];
		show lfire1;
		sleep 140;
		hide lfire1;
		wait-for-move l1 along z-axis;
		Static_Var_5 = 1;
		move l1 to z-axis [0.] speed [1.];
		return (0);
	}
	if( Static_Var_5 == 1 )
	{
		move l2 to z-axis [-1.] speed [80.];
		show lfire2;
		sleep 140;
		hide lfire2;
		wait-for-move l2 along z-axis;
		Static_Var_5 = 2;
		move l2 to z-axis [0.] speed [1.];
		return (0);
	}
	if( Static_Var_5 == 2 )
	{
		move l3 to z-axis [-1.] speed [80.];
		show lfire3;
		sleep 140;
		hide lfire3;
		wait-for-move l3 along z-axis;
		Static_Var_5 = 3;
		move l3 to z-axis [0.] speed [1.];
		return (0);
	}
	if( Static_Var_5 == 3 )
	{
		Static_Var_8 = 1;
		move l4 to z-axis [-1.] speed [80.];
		show lfire4;
		sleep 140;
		hide lfire4;
		wait-for-move l4 along z-axis;
		move l4 to z-axis [0.] speed [1.];
		return (0);
	}
}

AimTertiary(heading, pitch)
{
	while( Static_Var_6 )
	{
		sleep 300;
	}
	signal 4;
	set-signal-mask 4;
	Static_Var_2 = 1;
	if( !Static_Var_3 )
	{
		turn waist to x-axis <0.> speed <20.>;
		Static_Var_3 = 1;
	}
	turn TurretBase to y-axis heading speed <60.>;
	turn l1 to x-axis <0.> - pitch speed <85.>;
	turn l2 to x-axis <0.> - pitch speed <85.>;
	turn l3 to x-axis <0.> - pitch speed <85.>;
	turn l4 to x-axis <0.> - pitch speed <85.>;
	wait-for-turn TurretBase around y-axis;
	wait-for-turn l1 around x-axis;
	if( Static_Var_8 )
	{
		sleep 2500;
		Static_Var_5 = 0;
		Static_Var_8 = 0;
	}
	start-script Restore2();
	return (1);
}

Killed(severity, corpsetype)
{
	hide fire1;
	hide fire2;
	hide fire3;
	hide fire4;
	hide lfire1;
	hide lfire2;
	hide lfire3;
	hide lfire4;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode howitzer type BITMAPONLY | BITMAP2;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode l1 type BITMAPONLY | BITMAP5;
		explode l2 type BITMAPONLY | BITMAP5;
		explode l3 type FALL | BITMAP5;
		explode l4 type FALL | BITMAP5;
		explode lleg type BITMAPONLY | BITMAP1;
		explode lupleg type BITMAPONLY | BITMAP2;
		explode waist type BITMAPONLY | BITMAP3;
		explode rfoot type BITMAPONLY | BITMAP4;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rupleg type BITMAPONLY | BITMAP2;
		explode TurretBase type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | BITMAP1;
		explode howitzer type SHATTER | BITMAP2;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode l1 type FALL | BITMAP5;
		explode l2 type FALL | BITMAP5;
		explode l3 type FALL | BITMAP5;
		explode l4 type FALL | BITMAP5;
		explode lleg type BITMAPONLY | BITMAP1;
		explode lupleg type BITMAPONLY | BITMAP2;
		explode waist type BITMAPONLY | BITMAP3;
		explode rfoot type BITMAPONLY | BITMAP4;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rupleg type BITMAPONLY | BITMAP2;
		explode TurretBase type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode howitzer type SHATTER | BITMAP2;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode l1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode l2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode l3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode l4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lleg type BITMAPONLY | BITMAP1;
		explode lupleg type BITMAPONLY | BITMAP2;
		explode waist type BITMAPONLY | BITMAP3;
		explode rfoot type BITMAPONLY | BITMAP4;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rupleg type BITMAPONLY | BITMAP2;
		explode TurretBase type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode howitzer type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode lfoot type BITMAPONLY | BITMAP4;
	explode l1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode l2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode l3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode l4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lleg type BITMAPONLY | BITMAP1;
	explode lupleg type BITMAPONLY | BITMAP2;
	explode waist type BITMAPONLY | BITMAP3;
	explode rfoot type BITMAPONLY | BITMAP4;
	explode rleg type BITMAPONLY | BITMAP1;
	explode rupleg type BITMAPONLY | BITMAP2;
	explode TurretBase type SHATTER | BITMAP5;
}
