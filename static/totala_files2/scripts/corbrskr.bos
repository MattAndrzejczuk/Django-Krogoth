#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, lthigh, lleg, lfoot, ltoes, lthumb, rthigh, rleg,
       rfoot, rtoes, rthumb, torso, lshoulder, larm, lgun, lbarrel1,
       lflare1, lbarrel2, lflare2, rshoulder, rarm, rgun, rbarrel1, rflare1,
       rbarrel2, rflare2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Arms(Func_Var_1)
{
	Func_Var_1 = 1;
	signal 8;
	set-signal-mask 8;
	while( Static_Var_6 )
	{
		if( Func_Var_1 == 1 )
		{
			move torso to y-axis [1.] speed [1.];
			turn torso to y-axis <15.> speed <30.>;
			turn rshoulder to x-axis <20.> speed <40.>;
			turn lshoulder to x-axis <-10.> speed <20.>;
			turn larm to x-axis <5.> speed <10.>;
			turn rarm to x-axis <-10.> speed <20.>;
			turn lgun to x-axis <-30.> speed <60.>;
			turn rgun to x-axis <30.> speed <60.>;
			Func_Var_1 = 0;
			sleep 420;
		}
		Static_Var_4 = 2;
		move torso to y-axis [1.] speed [1.];
		turn torso to y-axis <15.> speed <60.>;
		turn rshoulder to x-axis <-10.> speed <60.>;
		turn lshoulder to x-axis <20.> speed <60.>;
		turn larm to x-axis <-10.> speed <30.>;
		turn rarm to x-axis <5.> speed <20.>;
		turn lgun to x-axis <30.> speed <120.>;
		turn rgun to x-axis <-30.> speed <120.>;
		sleep 420;
		move torso to y-axis [1.] speed [1.];
		turn torso to y-axis <-15.> speed <60.>;
		turn rshoulder to x-axis <20.> speed <60.>;
		turn lshoulder to x-axis <-10.> speed <60.>;
		turn larm to x-axis <5.> speed <30.>;
		turn rarm to x-axis <-10.> speed <30.>;
		turn lgun to x-axis <-30.> speed <120.>;
		turn rgun to x-axis <30.> speed <120.>;
		sleep 420;
	}
}

WalkAiming(Func_Var_1)
{
	Func_Var_1 = 1;
	signal 4;
	set-signal-mask 4;
	while( Static_Var_5 )
	{
		if( Static_Var_4 == 0 )
		{
			Static_Var_6 = 1;
			start-script Arms();
		}
		if( Func_Var_1 == 1 )
		{
			turn rleg to x-axis <10.> speed <60.>;
			turn rfoot to x-axis <10.> speed <60.>;
		}
		if( Func_Var_1 == 0 )
		{
			turn rleg to x-axis <10.> speed <0.>;
			turn rfoot to x-axis <10.> speed <0.>;
		}
		turn rthigh to x-axis <-85.> speed <510.>;
		turn lthigh to x-axis <60.> speed <360.>;
		turn lleg to x-axis <7.> speed <42.>;
		turn lfoot to x-axis <7.> speed <42.>;
		turn rtoes to x-axis <30.> speed <60.>;
		turn ltoes to x-axis <-10.> speed <60.>;
		turn lthumb to z-axis <-10.> speed <30.>;
		sleep 165;
		turn rthigh to x-axis <-35.> speed <240.>;
		turn rleg to x-axis <0.> speed <60.>;
		turn rfoot to x-axis <0.> speed <60.>;
		turn lthigh to x-axis <45.> speed <90.>;
		turn lleg to x-axis <15.> speed <48.>;
		turn lfoot to x-axis <15.> speed <48.>;
		turn rtoes to x-axis <20.> speed <60.>;
		turn ltoes to x-axis <20.> speed <180.>;
		turn lthumb to z-axis <-5.> speed <30.>;
		sleep 165;
		turn rthigh to x-axis <0.> speed <210.>;
		turn rleg to x-axis <0.> speed <60.>;
		turn rfoot to x-axis <0.> speed <60.>;
		turn lthigh to x-axis <0.> speed <270.>;
		turn lleg to x-axis <20.> speed <30.>;
		turn lfoot to x-axis <20.> speed <30.>;
		turn rtoes to x-axis <0.> speed <120.>;
		turn ltoes to x-axis <40.> speed <120.>;
		turn lthumb to x-axis <0.> speed <30.>;
		turn rthumb to x-axis <-15.> speed <90.>;
		sleep 165;
		turn rthigh to x-axis <60.> speed <360.>;
		turn rleg to x-axis <7.> speed <42.>;
		turn rfoot to x-axis <7.> speed <42.>;
		turn lthigh to x-axis <-85.> speed <510.>;
		turn lleg to x-axis <10.> speed <60.>;
		turn lfoot to x-axis <10.> speed <60.>;
		turn rtoes to x-axis <-10.> speed <60.>;
		turn ltoes to x-axis <30.> speed <60.>;
		turn rthumb to x-axis <-10.> speed <30.>;
		sleep 165;
		turn rthigh to x-axis <45.> speed <90.>;
		turn rleg to x-axis <15.> speed <48.>;
		turn rfoot to x-axis <15.> speed <48.>;
		turn lthigh to x-axis <-35.> speed <240.>;
		turn lleg to x-axis <0.> speed <60.>;
		turn lfoot to x-axis <0.> speed <60.>;
		turn rtoes to x-axis <20.> speed <120.>;
		turn ltoes to x-axis <20.> speed <60.>;
		turn rthumb to x-axis <-5.> speed <30.>;
		sleep 165;
		turn rthigh to x-axis <0.> speed <270.>;
		turn rleg to x-axis <20.> speed <30.>;
		turn rfoot to x-axis <20.> speed <30.>;
		turn lthigh to x-axis <0.> speed <210.>;
		turn lleg to x-axis <0.> speed <60.>;
		turn lfoot to x-axis <0.> speed <60.>;
		turn rtoes to x-axis <40.> speed <120.>;
		turn ltoes to x-axis <0.> speed <120.>;
		turn rthumb to x-axis <0.> speed <30.>;
		turn lthumb to x-axis <-15.> speed <90.>;
		sleep 165;
		Func_Var_1 = 0;
	}
}

Stopping()
{
	signal 4;
	signal 8;
	if( Static_Var_4 == 2 )
	{
		move torso to y-axis [0.] speed [3.];
		turn torso to y-axis <0.> speed <90.>;
		turn rshoulder to x-axis <0.> speed <30.>;
		turn lshoulder to x-axis <0.> speed <30.>;
		turn rarm to x-axis <0.> speed <30.>;
		turn larm to x-axis <0.> speed <30.>;
		turn rgun to x-axis <0.> speed <45.>;
		turn lgun to x-axis <0.> speed <45.>;
		Static_Var_4 = 0;
	}
	if( Static_Var_4 == 1 )
	{
	}
	if( Static_Var_4 == 0 )
	{
		move torso to y-axis [0.] speed [3.];
		turn torso to y-axis <0.> speed <90.>;
		turn rshoulder to x-axis <0.> speed <30.>;
		turn lshoulder to x-axis <0.> speed <30.>;
		turn rarm to x-axis <0.> speed <30.>;
		turn larm to x-axis <0.> speed <30.>;
		turn rgun to x-axis <0.> speed <45.>;
		turn lgun to x-axis <0.> speed <45.>;
		Static_Var_4 = 0;
	}
	turn lthigh to x-axis <0.> speed <280.>;
	turn rthigh to x-axis <0.> speed <280.>;
	turn lleg to x-axis <0.> speed <80.>;
	turn rleg to x-axis <0.> speed <80.>;
	turn rfoot to x-axis <0.> speed <80.>;
	turn lfoot to x-axis <0.> speed <80.>;
	turn ltoes to x-axis <0.> speed <60.>;
	turn rtoes to x-axis <0.> speed <60.>;
}

Create()
{
	Static_Var_2 = 0;
	Static_Var_1 = 2000;
	hide lflare1;
	hide lflare2;
	hide rflare1;
	hide rflare2;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	start-script SmokeUnit();
}

StartMoving()
{
	Static_Var_5 = 1;
	if( Static_Var_4 == 0 )
	{
		Static_Var_6 = 1;
	}
	if( Static_Var_4 == 1 )
	{
		Static_Var_6 = 0;
	}
	start-script Arms();
	start-script WalkAiming();
}

StopMoving()
{
	Static_Var_5 = 0;
	Static_Var_6 = 0;
	start-script Stopping();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	set ARMORED to 0;
	turn rgun to x-axis <0.> speed <60.>;
	turn lgun to x-axis <0.> speed <60.>;
	turn rshoulder to x-axis <0.> speed <60.>;
	turn lshoulder to x-axis <0.> speed <60.>;
	turn rarm to x-axis <0.> speed <60.>;
	turn larm to x-axis <0.> speed <60.>;
	turn rgun to y-axis <0.> speed <60.>;
	turn lgun to y-axis <0.> speed <60.>;
	wait-for-turn rgun around x-axis;
	turn torso to y-axis <0.> speed <80.>;
	wait-for-turn torso around y-axis;
	move torso to y-axis [0.] speed [3.];
	wait-for-move torso along y-axis;
	Static_Var_4 = 0;
	Static_Var_6 = 1;
}

Demo()
{
	Static_Var_2 = 1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	if( Static_Var_3 == 0 )
	{
		piecenum = lflare1;
	}
	if( Static_Var_3 == 1 )
	{
		piecenum = rflare1;
	}
	if( Static_Var_3 == 2 )
	{
		piecenum = lflare2;
	}
	if( Static_Var_3 == 3 )
	{
		piecenum = rflare2;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

AimPrimary(heading, pitch)
{
	var Func_Var_3, Func_Var_4;
	signal 8;
	turn rgun to x-axis <0.> speed <15.>;
	turn lgun to x-axis <0.> speed <15.>;
	turn rshoulder to x-axis <0.> speed <180.>;
	turn lshoulder to x-axis <0.> speed <180.>;
	turn larm to x-axis <0.> speed <15.>;
	turn rarm to x-axis <0.> speed <15.>;
	Static_Var_6 = 0;
	Static_Var_4 = 1;
	Func_Var_3 = 0 - pitch;
	signal 2;
	set-signal-mask 2;
	move torso to y-axis [1.] speed [3.];
	wait-for-move torso along y-axis;
	turn torso to y-axis heading speed <200.>;
	wait-for-turn torso around y-axis;
	turn rshoulder to x-axis Func_Var_3 speed <50.>;
	turn lshoulder to x-axis Func_Var_3 speed <50.>;
	wait-for-turn rshoulder around x-axis;
	turn lgun to y-axis <-8.> speed <30.>;
	turn rgun to y-axis <8.> speed <30.>;
	wait-for-turn rgun around x-axis;
	wait-for-turn lgun around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_3 == 0 )
	{
		set ARMORED to 1;
		show lflare1;
		move lbarrel1 to z-axis [-2.] speed [500.];
		sleep 100;
		hide lflare1;
		move lbarrel1 to z-axis [0.] speed [4.];
	}
	if( Static_Var_3 == 1 )
	{
		set ARMORED to 1;
		show rflare1;
		move rbarrel1 to z-axis [-2.] speed [500.];
		sleep 100;
		hide rflare1;
		move rbarrel1 to z-axis [0.] speed [4.];
	}
	if( Static_Var_3 == 2 )
	{
		set ARMORED to 1;
		show lflare2;
		move lbarrel2 to z-axis [-2.] speed [500.];
		sleep 100;
		hide lflare2;
		move lbarrel2 to z-axis [0.] speed [4.];
	}
	if( Static_Var_3 == 3 )
	{
		set ARMORED to 1;
		show rflare2;
		move rbarrel2 to z-axis [-2.] speed [500.];
		sleep 100;
		hide rflare2;
		move rbarrel2 to z-axis [0.] speed [4.];
	}
	++Static_Var_3;
	if( Static_Var_3 == 4 )
	{
		Static_Var_3 = 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode lthigh type BITMAPONLY | BITMAP1;
		explode lleg type BITMAPONLY | BITMAP1;
		explode lfoot type BITMAPONLY | BITMAP1;
		explode ltoes type BITMAPONLY | BITMAP1;
		explode lthumb type BITMAPONLY | BITMAP1;
		explode rthigh type BITMAPONLY | BITMAP1;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rfoot type BITMAPONLY | BITMAP1;
		explode rtoes type BITMAPONLY | BITMAP1;
		explode rthumb type BITMAPONLY | BITMAP1;
		explode torso type BITMAPONLY | BITMAP1;
		explode lshoulder type BITMAPONLY | BITMAP1;
		explode larm type BITMAPONLY | BITMAP1;
		explode lgun type BITMAPONLY | BITMAP1;
		explode lbarrel1 type BITMAPONLY | BITMAP1;
		explode lflare1 type BITMAPONLY | BITMAP1;
		explode lbarrel2 type BITMAPONLY | BITMAP1;
		explode lflare2 type BITMAPONLY | BITMAP1;
		explode rshoulder type BITMAPONLY | BITMAP1;
		explode rarm type BITMAPONLY | BITMAP1;
		explode rgun type BITMAPONLY | BITMAP1;
		explode rbarrel1 type BITMAPONLY | BITMAP1;
		explode rflare1 type BITMAPONLY | BITMAP1;
		explode rbarrel2 type BITMAPONLY | BITMAP1;
		explode rflare2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode lthigh type SHATTER | BITMAP4;
		explode lleg type SHATTER | BITMAP4;
		explode lfoot type SHATTER | BITMAP4;
		explode ltoes type SHATTER | BITMAP4;
		explode lthumb type SHATTER | BITMAP4;
		explode rthigh type SHATTER | BITMAP4;
		explode rleg type SHATTER | BITMAP4;
		explode rfoot type SHATTER | BITMAP4;
		explode rtoes type SHATTER | BITMAP4;
		explode rthumb type SHATTER | BITMAP4;
		explode larm type SHATTER | BITMAP4;
		explode rarm type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode ltoes type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lthumb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rtoes type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rthumb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode larm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode ltoes type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lthumb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rtoes type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rthumb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode larm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
