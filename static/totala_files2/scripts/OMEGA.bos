#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, ground, pivot, turret, canonA, canonB, barrelA, barrelB,
       point, shellA, shellB;

static-var  Static_Var_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	hide point;
	Static_Var_1 = 0;
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn pivot to y-axis heading speed <20.>;
	turn turret to x-axis <0.> - pitch speed <30.>;
	wait-for-turn pivot around y-axis;
	wait-for-turn turret around x-axis;
	return (1);
}

FirePrimary()
{
	if( Static_Var_1 == 0 )
	{
		move barrelA to z-axis [-3.] now;
		show point;
		sleep 150;
		hide point;
		explode shellA type FALL;
		move point to x-axis [-5.] now;
		wait-for-move barrelA along z-axis;
		move canonA to z-axis [-2.] speed [50.];
		wait-for-move canonA along z-axis;
		move barrelA to z-axis [0.] speed [10.];
		move canonA to z-axis [0.] speed [10.];
	}
	if( Static_Var_1 == 1 )
	{
		move barrelB to z-axis [-3.] now;
		show point;
		sleep 150;
		hide point;
		explode shellB type FALL;
		move point to x-axis [0.] now;
		wait-for-move barrelB along z-axis;
		move canonB to z-axis [-2.] speed [50.];
		wait-for-move canonB along z-axis;
		move barrelB to z-axis [0.] speed [10.];
		move canonB to z-axis [0.] speed [10.];
	}
	Static_Var_1 = !Static_Var_1;
}

QueryPrimary(piecenum)
{
	piecenum = point;
}

AimFromPrimary(piecenum)
{
	piecenum = pivot;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
}
