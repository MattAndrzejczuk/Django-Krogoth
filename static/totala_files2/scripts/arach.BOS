
piece  base, body, legs, leg1, leg2, leg3, leg4, leg5, leg6 ,turret ,barrel ,radar ,flare1 ,sleeves ,flare2 ,shell;

#define SMOKEPIECE1 body
#define SMOKEPIECE2 leg3
#define SMOKEPIECE3 radar


static-var bMoving ,restore_delay ;
	
#define SIG_NUM1	2
#include "smokeunit.h"
#include "StateChg.h"

Go()
	{
	spin radar around y-axis SPEED <60>;
	}

Stop()
	{
	spin radar around y-axis SPEED <0>;
	TURN radar to y-axis <0> SPEED <60>;
	}
walk()
	{
		WHILE (bMoving )
			{
			IF (bMoving )
				{
				TURN leg1 to y-axis <0> SPEED <20>;
				TURN leg1 to z-axis <0> SPEED <20>;
				TURN leg2 to z-axis <30> SPEED <20>;
				TURN leg3 to y-axis <33> SPEED <20>;
				TURN leg3 to z-axis <0> SPEED <20>;
				TURN leg4 to y-axis <-39> SPEED <20>;
				TURN leg4 to z-axis <0> SPEED <20>;
				TURN leg5 to y-axis <0> SPEED <20>;
				TURN leg5 to z-axis <0> SPEED <20>;
				TURN leg6 to y-axis <-29> SPEED <20>;
				TURN leg6 to z-axis <-45> SPEED <20>;
				MOVE body to y-axis <-2> SPEED <1>;
				TURN body to z-axis <-4> SPEED <8>;
				SLEEP <600>;
				}
			IF (bMoving )
				{
				TURN leg2 to y-axis <33> SPEED <20>;
				TURN leg2 to z-axis <30> SPEED <20>;
				TURN leg4 to y-axis <0> SPEED <20>;
				TURN leg5 to z-axis <-30> SPEED <20>;
				TURN leg6 to z-axis <2> SPEED <20>;
				TURN leg1 to z-axis <30> SPEED <20>;
				TURN leg3 to y-axis <0> SPEED <20>;
				TURN leg3 to z-axis <0> SPEED <20>;
				MOVE body to y-axis <0> SPEED <1>;
				TURN body to z-axis <4> SPEED <8>;
				SLEEP <600>;
				}
			IF (bMoving )
				{
				TURN leg5 to y-axis <-30> SPEED <20>;
				TURN leg5 to z-axis <-30> SPEED <20>;
				TURN leg6 to y-axis <3> SPEED <20>;
				TURN leg2 to y-axis <33> SPEED <20>;
				TURN leg2 to z-axis <0> SPEED <20>;
				TURN leg3 to z-axis <30> SPEED <20>;
				TURN leg1 to y-axis <54> SPEED <20>;
				TURN leg1 to z-axis <30> SPEED <20>;
				TURN leg4 to y-axis <0> SPEED <20>;
				TURN leg4 to z-axis <-30> SPEED <20>;
				MOVE body to y-axis <-2> SPEED <1>;
				TURN body to z-axis <-4> SPEED <8>;
				SLEEP <600>;
				}
			TURN leg5 to y-axis <-36> SPEED <20>;
			TURN leg5 to z-axis <0> SPEED <20>;
			TURN leg6 to y-axis <0> SPEED <20>;
			TURN leg6 to z-axis <-45> SPEED <20>;
			TURN leg2 to y-axis <0> SPEED <20>;
			TURN leg2 to z-axis <0> SPEED <20>;
			TURN leg3 to y-axis <33> SPEED <20>;
			TURN leg1 to y-axis <42> SPEED <20>;
			TURN leg1 to z-axis <0> SPEED <20>;
			TURN leg3 to z-axis <30> SPEED <20>;
			TURN leg4 to y-axis <-39> SPEED <20>;
			TURN leg4 to z-axis <-30> SPEED <20>;
			MOVE body to y-axis <0> SPEED <1>;
			TURN body to z-axis <4> SPEED <8>;
			SLEEP <600>;
			}
	}

walk2()
	{
		WHILE (bMoving )
			{
			IF (bMoving )
				{
				TURN leg1 to y-axis <13> SPEED <20>;
				TURN leg1 to z-axis <0> SPEED <20>;
				TURN leg2 to y-axis <13> SPEED <20>;
				TURN leg2 to z-axis <0> SPEED <20>;
				TURN leg3 to y-axis <13> SPEED <20>;
				TURN leg3 to z-axis <0> SPEED <20>;
				TURN leg4 to y-axis <-29> SPEED <20>;
				TURN leg4 to z-axis <-15> SPEED <20>;
				TURN leg5 to y-axis <-29> SPEED <20>;
				TURN leg5 to z-axis <-15> SPEED <20>;
				TURN leg6 to y-axis <-29> SPEED <20>;
				TURN leg6 to z-axis <-15> SPEED <20>;
				TURN body to z-axis <10> SPEED <5>;
				SLEEP <600>;
				}
			IF (bMoving )
				{
				TURN leg1 to y-axis <0> SPEED <20>;
				TURN leg1 to z-axis <0> SPEED <20>;
				TURN leg2 to y-axis <0> SPEED <20>;
				TURN leg2 to z-axis <0> SPEED <20>;
				TURN leg3 to y-axis <0> SPEED <20>;
				TURN leg3 to z-axis <0> SPEED <20>;
				TURN leg4 to z-axis <-2> SPEED <20>;
				TURN leg5 to z-axis <-2> SPEED <20>;
				TURN leg6 to z-axis <-2> SPEED <20>;
				TURN body to z-axis <3> SPEED <5>;
				SLEEP <600>;
				}
			IF (bMoving )
				{
				TURN leg1 to z-axis <10> SPEED <20>;		
				TURN leg2 to z-axis <10> SPEED <20>;
				TURN leg3 to z-axis <10> SPEED <20>;
				TURN leg1 to y-axis <10> SPEED <20>;		
				TURN leg2 to y-axis <10> SPEED <20>;
				TURN leg3 to y-axis <10> SPEED <20>;
				TURN leg4 to y-axis <3> SPEED <20>;
				TURN leg5 to y-axis <3> SPEED <20>;
				TURN leg6 to y-axis <3> SPEED <20>;
				TURN body to z-axis <-3> SPEED <5>;
				SLEEP <600>;
				}
			TURN leg1 to y-axis <33> SPEED <20>;
			TURN leg1 to z-axis <10> SPEED <20>;
			TURN leg2 to y-axis <33> SPEED <20>;
			TURN leg2 to z-axis <10> SPEED <20>;
			TURN leg3 to y-axis <33> SPEED <20>;
			TURN leg3 to z-axis <10> SPEED <20>;
			TURN leg4 to y-axis <0> SPEED <20>;
			TURN leg4 to z-axis <-15> SPEED <20>;
			TURN leg5 to y-axis <0> SPEED <20>;
			TURN leg5 to z-axis <-15> SPEED <20>;
			TURN leg6 to y-axis <0> SPEED <20>;
			TURN leg6 to z-axis <-15> SPEED <20>;
			TURN body to z-axis <-10> SPEED <5>;
			SLEEP <600>;
			}
	}


stand()
	{
		TURN leg1 to y-axis <0> SPEED <37>;
		TURN leg1 to z-axis <0> SPEED <37>;
		TURN leg2 to y-axis <0> SPEED <37>;
		TURN leg2 to z-axis <0> SPEED <37>;
		TURN leg3 to y-axis <0> SPEED <37>;
		TURN leg3 to z-axis <0> SPEED <37>;
		TURN leg4 to y-axis <0> SPEED <37>;
		TURN leg4 to z-axis <0> SPEED <37>;
		TURN leg5 to y-axis <0> SPEED <37>;
		TURN leg5 to z-axis <0> SPEED <37>;
		TURN leg6 to y-axis <0> SPEED <37>;
		TURN leg6 to z-axis <0> SPEED <37>;
		MOVE body to y-axis <0> SPEED <10>;
		TURN body to z-axis <0> SPEED <10>;
	}
MotionControl(moving)
	{
		WHILE ( TRUE )
			{
			moving = bMoving ;
			IF (moving )
				{
				CALL-SCRIPT walk();
				}
			IF (!moving )
				{
				CALL-SCRIPT stand();
				SLEEP <100>;
				}
			}
	}



#define ACTIVATECMD call-script Go();
#define DEACTIVATECMD call-script Stop();
#include "StateChg.h"
Create()
	{
		HIDE flare1;
		HIDE flare2;
		bMoving = FALSE;
		restore_delay = 3000;
		call-script InitState();
		START-SCRIPT MotionControl();
		START-SCRIPT SmokeUnit();
	}

Activate()
	{
	start-script RequestState( ACTIVE );
	}

Deactivate()
	{
	start-script RequestState( INACTIVE );
	}

StartMoving()
	{
		bMoving = TRUE;
	}
StopMoving()
	{
		bMoving = FALSE;
	}
SweetSpot(piecenum)
	{
		piecenum = base;
	}
SetMaxReloadTime(time)
	{
		restore_delay = time * 2 ;
	}
RestoreAfterDelay()
	{
		SLEEP restore_delay;
		TURN turret to y-axis <0> SPEED <55>;
		TURN sleeves to x-axis <0> SPEED <55>;
	}
AimPrimary(heading,pitch)
	{
		SIGNAL SIG_NUM1;
		SET-SIGNAL-MASK SIG_NUM1;
		TURN turret to y-axis heading SPEED <110>;
		TURN sleeves to x-axis (0 - pitch) SPEED <80>;
		WAIT-FOR-TURN turret around y-axis;
		WAIT-FOR-TURN sleeves around x-axis;
		START-SCRIPT RestoreAfterDelay();
		RETURN ( TRUE );
	}

FirePrimary()
	{
	MOVE barrel to z-axis <-2,5> SPEED <300>;
	SHOW flare1;
	SHOW flare2;
	SLEEP <150>;
	WAIT-FOR-MOVE barrel along y-axis;
	HIDE flare1;
	HIDE flare2;
	MOVE barrel to z-axis <0> SPEED <2>;
	SLEEP <300>;
	EXPLODE shell type  	FALL;
	RETURN ( 0 );
	}

AimFromPrimary(piecenum)
	{
		piecenum = turret;
	}
QueryPrimary(piecenum)
	{
	piecenum = flare1;
	RETURN ( 0 );
	}
	
Killed(severity,corpsetype)
	{
		IF (severity <= 25 )
			{
			corpsetype = 1 ;
			EXPLODE  base type  	BITMAPONLY | BITMAP3;
			EXPLODE  body type  	SHATTER | EXPLODE_ON_HIT | BITMAP3;
			EXPLODE  turret type  	FALL | EXPLODE_ON_HIT | BITMAP3;
			EXPLODE  barrel type  	SHATTER | BITMAP4;
			EXPLODE  radar type  	SHATTER | BITMAP5;
			EXPLODE  leg1 type  	BITMAPONLY | BITMAP4;
			EXPLODE  leg2 type  	BITMAPONLY | BITMAP3;
			EXPLODE  leg3 type  	BITMAPONLY | BITMAP5;
			EXPLODE  leg4 type  	BITMAPONLY | BITMAP3;
			EXPLODE  leg5 type  	FALL | EXPLODE_ON_HIT | BITMAP3;
			EXPLODE  leg6 type  	BITMAPONLY | BITMAP5;
			RETURN ( 0 );
			}
		IF (severity <= 50 )
			{
			corpsetype = 2 ;
			EXPLODE  base type  	BITMAPONLY | BITMAP3;
			EXPLODE  body type  	SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
			EXPLODE  turret type  	FALL | EXPLODE_ON_HIT | BITMAP3;
			EXPLODE  barrel type  	SHATTER | BITMAP4;
			EXPLODE  leg1 type  	SHATTER | BITMAP4;
			EXPLODE  leg2 type  	BITMAPONLY | BITMAP3;
			EXPLODE  leg3 type  	SHATTER | BITMAP5;
			EXPLODE  leg4 type  	BITMAPONLY | BITMAP3;
			EXPLODE  leg5 type  	FALL | EXPLODE_ON_HIT | BITMAP3;
			EXPLODE  leg6 type  	BITMAPONLY | BITMAP5;
			RETURN ( 0 );
			}
		IF (severity <= 99 )
			{
			corpsetype = 3 ;
			EXPLODE  base type  	BITMAPONLY | BITMAP3;
			EXPLODE  body type  	SHATTER | EXPLODE_ON_HIT | BITMAP3;
			EXPLODE  turret type  	FALL | EXPLODE_ON_HIT | BITMAP3;
			EXPLODE  barrel type  	SHATTER | BITMAP4;
			EXPLODE  leg1 type  	BITMAPONLY | BITMAP4;
			EXPLODE  leg2 type  	BITMAPONLY | BITMAP3;
			EXPLODE  leg3 type  	BITMAPONLY | BITMAP5;
			EXPLODE  leg4 type  	BITMAPONLY | BITMAP3;
			EXPLODE  leg5 type  	FALL | EXPLODE_ON_HIT | BITMAP3;
			EXPLODE  leg6 type  	BITMAPONLY | BITMAP5;
			RETURN ( 0 );
			}
		corpsetype = 3 ;
		EXPLODE  base type  	BITMAPONLY | BITMAP3;
		EXPLODE  body type  	SHATTER | EXPLODE_ON_HIT | BITMAP3;
		EXPLODE  turret type  	FALL | EXPLODE_ON_HIT | BITMAP3;
		EXPLODE  barrel type  	SHATTER | BITMAP4;
		EXPLODE  leg1 type  	BITMAPONLY | BITMAP4;
		EXPLODE  leg2 type  	BITMAPONLY | BITMAP3;
		EXPLODE  leg3 type  	BITMAPONLY | BITMAP5;
		EXPLODE  leg4 type  	BITMAPONLY | BITMAP3;
		EXPLODE  leg5 type  	FALL | EXPLODE_ON_HIT | BITMAP3;
		EXPLODE  leg6 type  	BITMAPONLY | BITMAP5;
	}
