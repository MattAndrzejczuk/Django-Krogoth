#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, slip, beam1, beam2, piling1, piling2, explode1, explode2,
       nano2, nano1;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		move nano2 to y-axis [0.] now;
		move nano2 to y-axis [8.] speed [15.];
		move nano1 to y-axis [0.] now;
		move nano1 to y-axis [8.] speed [14.];
		sleep 514;
	}
	if( TRUE )
	{
		turn nano2 to x-axis <-58.> speed <112.>;
		turn nano1 to x-axis <-58.> speed <112.>;
		sleep 518;
	}
	if( TRUE )
	{
		turn piling1 to y-axis <-52.> speed <101.>;
		turn piling2 to y-axis <47.> speed <91.>;
		sleep 519;
	}
	sleep 26;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move nano2 to y-axis [8.] now;
		move nano1 to y-axis [8.] now;
		turn piling1 to y-axis <-53.> now;
		turn piling1 to y-axis <0.> speed <102.>;
		turn piling2 to y-axis <48.> now;
		turn piling2 to y-axis <0.> speed <92.>;
		turn nano2 to x-axis <-58.> now;
		turn nano1 to x-axis <-58.> now;
		sleep 514;
	}
	if( TRUE )
	{
		turn nano2 to x-axis <0.> speed <112.>;
		turn nano1 to x-axis <0.> speed <112.>;
		sleep 518;
	}
	if( TRUE )
	{
		move nano2 to y-axis [0.] speed [15.];
		move nano1 to y-axis [0.] speed [14.];
		sleep 519;
	}
	sleep 26;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache nano1;
	dont-cache nano2;
	dont-cache piling1;
	dont-cache piling2;
	dont-cache slip;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache nano1;
	cache nano2;
	cache piling1;
	cache piling2;
	cache slip;
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	dont-shade beam1;
	dont-shade beam2;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade piling1;
	dont-shade piling2;
	dont-shade slip;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	call-script InitState();
	start-script SmokeUnit();
	turn slip to y-axis <180.> now;
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = beam1;
		Static_Var_1 = 1;
		return (0);
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = beam2;
		Static_Var_1 = 0;
	}
}

Demo()
{
	Static_Var_2 = 1;
}

Activate()
{
	signal 2;
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	if( !Static_Var_2 )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

QueryBuildInfo(piecenum)
{
	piecenum = slip;
}

SweetSpot(piecenum)
{
	piecenum = piling1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode explode1 type BITMAPONLY | BITMAP2;
		explode explode2 type BITMAPONLY | BITMAP3;
		explode nano1 type BITMAPONLY | BITMAP4;
		explode nano2 type BITMAPONLY | BITMAP5;
		explode piling1 type BITMAPONLY | BITMAP1;
		explode piling2 type BITMAPONLY | BITMAP2;
		explode slip type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode explode1 type BITMAPONLY | BITMAP2;
		explode explode2 type BITMAPONLY | BITMAP3;
		explode nano1 type BITMAPONLY | BITMAP4;
		explode nano2 type BITMAPONLY | BITMAP5;
		explode piling1 type BITMAPONLY | BITMAP1;
		explode piling2 type BITMAPONLY | BITMAP2;
		explode slip type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beam1 type BITMAPONLY | BITMAP2;
	explode beam2 type BITMAPONLY | BITMAP3;
	explode explode1 type BITMAPONLY | BITMAP2;
	explode explode2 type BITMAPONLY | BITMAP3;
	explode nano1 type BITMAPONLY | BITMAP4;
	explode nano2 type BITMAPONLY | BITMAP5;
	explode piling1 type BITMAPONLY | BITMAP1;
	explode piling2 type BITMAPONLY | BITMAP2;
	explode slip type BITMAPONLY | BITMAP3;
}
