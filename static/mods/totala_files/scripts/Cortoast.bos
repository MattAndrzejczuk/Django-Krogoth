#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  frame, flare, turret, pillartops, barrel2, turretback, barrel1, door2,
       door1, barrel3, hole, turretssides, ground;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		move pillartops to y-axis [-11.] now;
		move barrel2 to z-axis [-2.] now;
		move turretback to z-axis [1.] now;
		move barrel1 to z-axis [-13.] now;
		move door2 to y-axis [0.] now;
		move door2 to y-axis [0.] speed [0.];
		turn door1 to z-axis <0.> now;
		turn door1 to z-axis <-88.> speed <300.>;
		turn door2 to z-axis <0.> now;
		turn door2 to z-axis <89.> speed <302.>;
		sleep 295;
	}
	if( TRUE )
	{
		move pillartops to y-axis [0.] speed [17.];
		move door1 to y-axis [-8.] speed [12.];
		move door2 to y-axis [-8.] speed [12.];
		sleep 614;
	}
	if( TRUE )
	{
		move barrel2 to z-axis [0.] speed [7.];
		move turretback to z-axis [0.] speed [4.];
		move barrel1 to z-axis [0.] speed [39.];
		sleep 316;
	}
	sleep 10;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		stop-spin pillartops around y-axis;
		stop-spin turret around x-axis;
		turn pillartops to y-axis <0.> speed <100.>;
		turn turret to x-axis <0.> speed <50.>;
		wait-for-turn pillartops around y-axis;
		wait-for-turn turret around x-axis;
		move barrel2 to z-axis [0.] now;
		move barrel2 to z-axis [-2.] speed [8.];
		move turretback to z-axis [0.] now;
		move turretback to z-axis [1.] speed [4.];
		move barrel1 to z-axis [0.] now;
		move barrel1 to z-axis [-13.] speed [45.];
		move door1 to y-axis [-8.] now;
		move door2 to y-axis [-8.] now;
		turn door1 to z-axis <-89.> now;
		turn door2 to z-axis <89.> now;
		sleep 278;
	}
	if( TRUE )
	{
		move pillartops to y-axis [-11.] speed [18.];
		move door1 to y-axis [0.] speed [13.];
		move door2 to y-axis [0.] speed [13.];
		sleep 572;
	}
	if( TRUE )
	{
		move door2 to y-axis [0.] speed [0.];
		turn door1 to z-axis <0.> speed <236.>;
		turn door2 to z-axis <0.> speed <238.>;
		sleep 374;
	}
	sleep 13;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from frame;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script deactivatescr();
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade barrel3;
	dont-shade door1;
	dont-shade door2;
	dont-shade flare;
	dont-shade hole;
	dont-shade pillartops;
	dont-shade turret;
	dont-shade turretback;
	dont-shade turretssides;
	hide flare;
	Static_Var_1 = 1;
	Static_Var_2 = 3000;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 1;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn pillartops to y-axis heading speed <100.>;
	turn turret to x-axis <0.> - pitch speed <50.>;
	wait-for-turn pillartops around y-axis;
	wait-for-turn turret around x-axis;
	return (1);
}

FirePrimary()
{
	move barrel3 to z-axis [-5.] speed [500.];
	show flare;
	sleep 250;
	hide flare;
	move barrel3 to z-axis [0.] speed [3.];
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = frame;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 1;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 2;
		}
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode frame type BITMAPONLY | BITMAP5;
		explode ground type BITMAPONLY | BITMAP1;
		explode hole type BITMAPONLY | BITMAP2;
		explode pillartops type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode turretback type BITMAPONLY | BITMAP5;
		explode turretssides type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 2;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 3;
		}
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type FALL | BITMAP2;
		explode barrel3 type FALL | BITMAP3;
		explode door1 type FALL | BITMAP4;
		explode door2 type FALL | BITMAP5;
		explode flare type FALL | BITMAP1;
		explode frame type BITMAPONLY | BITMAP2;
		explode ground type BITMAPONLY | BITMAP3;
		explode hole type BITMAPONLY | BITMAP4;
		explode pillartops type SHATTER | BITMAP5;
		explode turret type FALL | BITMAP1;
		explode turretback type FALL | BITMAP2;
		explode turretssides type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 3;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 4;
		}
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode frame type BITMAPONLY | BITMAP2;
		explode ground type BITMAPONLY | BITMAP3;
		explode hole type BITMAPONLY | BITMAP4;
		explode pillartops type SHATTER | BITMAP5;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turretback type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turretssides type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 4;
	explode barrel1 type BITMAPONLY | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode frame type BITMAPONLY | BITMAP2;
	explode ground type BITMAPONLY | BITMAP3;
	explode hole type BITMAPONLY | BITMAP4;
	explode pillartops type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turretback type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turretssides type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
