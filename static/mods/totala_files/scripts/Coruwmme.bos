#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, doors1, doors2, drive, fan, emit1, emit2, emit3,
       emit4, patch;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;


Go()
{
	spin drive around y-axis speed Static_Var_1 accelerate Static_Var_2;
	move doors1 to y-axis [-2.] speed [2.];
	move doors2 to y-axis [-2.] speed [2.];
	wait-for-move doors1 along y-axis;
	wait-for-move doors2 along y-axis;
	turn doors1 to y-axis <30.> speed <60.>;
	turn doors2 to y-axis <-30.> speed <60.>;
	set ARMORED to 0;
	Static_Var_4 = 1;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Stop()
{
	stop-spin drive around y-axis decelerate Static_Var_3;
	wait-for-turn drive around y-axis;
	Static_Var_4 = 0;
	turn doors1 to y-axis <0.> speed <60.>;
	turn doors2 to y-axis <0.> speed <60.>;
	wait-for-turn doors1 around y-axis;
	wait-for-turn doors2 around y-axis;
	set ARMORED to 1;
	move doors1 to y-axis [0.] speed [4.];
	move doors2 to y-axis [0.] speed [4.];
}

InitState()
{
	Static_Var_5 = 1;
	Static_Var_6 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_6 )
	{
		Static_Var_5 = requestedstate;
		return (0);
	}
	Static_Var_6 = 1;
	currentstate = Static_Var_5;
	Static_Var_5 = requestedstate;
	while( Static_Var_5 != currentstate )
	{
		if( Static_Var_5 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_5 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_6 = 0;
}

Create()
{
	Static_Var_4 = 0;
	Static_Var_1 = 0;
	Static_Var_2 = 91;
	Static_Var_3 = 910;
	dont-cache drive;
	dont-cache doors1;
	dont-cache doors2;
	dont-cache fan;
	dont-shade drive;
	dont-shade doors1;
	dont-shade doors2;
	dont-shade fan;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	spin fan around y-axis speed <-400.>;
	set ARMORED to 1;
}

Activate()
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		if( Static_Var_4 )
		{
			emit-sfx 259 from emit1;
			emit-sfx 259 from emit2;
			emit-sfx 259 from emit3;
			emit-sfx 259 from emit4;
		}
		sleep 250;
	}
}

Deactivate()
{
	start-script RequestState(1);
	signal 2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 45;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode drive type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode doors1 type BITMAPONLY | BITMAP3;
		explode doors2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode drive type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode doors1 type BITMAPONLY | BITMAP3;
		explode doors2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode drive type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode doors1 type BITMAPONLY | BITMAP3;
		explode doors2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode drive type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode doors1 type BITMAPONLY | BITMAP3;
	explode doors2 type BITMAPONLY | BITMAP2;
}
