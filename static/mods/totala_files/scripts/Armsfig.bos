#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  weapon1, weapon2, base, wake1, wake2, LWing, RWing;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


activatescr()
{
	if( TRUE )
	{
		turn LWing to y-axis <0.> now;
		turn LWing to y-axis <41.> speed <60.>;
		turn RWing to y-axis <0.> now;
		turn RWing to y-axis <-41.> speed <60.>;
		sleep 690;
	}
	sleep 10;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		turn LWing to y-axis <41.> now;
		turn LWing to y-axis <0.> speed <41.>;
		turn RWing to y-axis <-41.> now;
		turn RWing to y-axis <0.> speed <41.>;
		sleep 990;
	}
	sleep 10;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	Static_Var_4 = 1;
	Static_Var_5 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_5 )
	{
		Static_Var_4 = requestedstate;
		return (0);
	}
	Static_Var_5 = 1;
	currentstate = Static_Var_4;
	Static_Var_4 = requestedstate;
	while( Static_Var_4 != currentstate )
	{
		if( Static_Var_4 == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( Static_Var_4 == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	Static_Var_5 = 0;
}

MoveRate2()
{
	if( Rand( 1, 10 ) == 1 )
	{
		if( !Static_Var_3 )
		{
			Static_Var_3 = 1;
			turn base to z-axis <-120.> speed <120.>;
			wait-for-turn base around z-axis;
			turn base to z-axis <120.> speed <180.>;
			wait-for-turn base around z-axis;
			turn base to z-axis <0.> speed <120.>;
			Static_Var_3 = 0;
		}
	}
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		if( Static_Var_2 == 3 )
		{
			emit-sfx 259 from wake1;
			emit-sfx 259 from wake2;
			emit-sfx 259 from weapon1;
			emit-sfx 259 from weapon2;
			emit-sfx 259 from LWing;
			emit-sfx 259 from RWing;
			emit-sfx 259 from base;
		}
		sleep 150;
	}
}

StopMoving()
{
	signal 2;
}

QueryPrimary(piecenum)
{
	piecenum = weapon1;
}

QuerySecondary(piecenum)
{
	piecenum = weapon2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode weapon1 type BITMAPONLY | BITMAP3;
		explode weapon2 type BITMAPONLY | BITMAP4;
		explode LWing type BITMAPONLY | BITMAP5;
		explode RWing type BITMAPONLY | BITMAP1;
		explode wake1 type BITMAPONLY | BITMAP2;
		explode wake2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode weapon1 type FALL | BITMAP3;
		explode weapon2 type FALL | BITMAP4;
		explode LWing type BITMAPONLY | BITMAP5;
		explode RWing type BITMAPONLY | BITMAP1;
		explode wake1 type FALL | BITMAP2;
		explode wake2 type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode weapon1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode weapon2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode LWing type BITMAPONLY | BITMAP5;
		explode RWing type BITMAPONLY | BITMAP1;
		explode wake1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode wake2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode weapon1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode weapon2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode LWing type BITMAPONLY | BITMAP5;
	explode RWing type BITMAPONLY | BITMAP1;
	explode wake1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode wake2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
}
