#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  body, turret, flare, barrel, lfupleg, lrupleg, rrupleg, head,
       rfupleg, rrleg, rfleg, lrleg, lfleg;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


walk()
{
	if( TRUE )
	{
		move lfupleg to y-axis [0.] now;
		move lfupleg to y-axis [0.] speed [2.];
		move lrupleg to y-axis [0.] now;
		move lrupleg to y-axis [1.] speed [8.];
		move rrupleg to y-axis [0.] now;
		move rrupleg to y-axis [1.] speed [7.];
		turn body to x-axis <12.> now;
		turn body to x-axis <22.> speed <94.>;
		turn head to x-axis <9.> now;
		turn head to x-axis <20.> speed <107.>;
		turn lfupleg to x-axis <-50.> now;
		turn lfupleg to x-axis <-22.> speed <254.>;
		turn lrupleg to x-axis <23.> now;
		turn lrupleg to x-axis <-28.> speed <473.>;
		turn rfupleg to x-axis <-49.> now;
		turn rfupleg to x-axis <-32.> speed <150.>;
		turn rrupleg to x-axis <27.> now;
		turn rrupleg to x-axis <-20.> speed <439.>;
		turn rrleg to x-axis <45.> now;
		turn rrleg to x-axis <-24.> speed <633.>;
		turn rfleg to x-axis <0.> now;
		turn rfleg to x-axis <12.> speed <111.>;
		turn lrleg to x-axis <45.> now;
		turn lrleg to x-axis <-9.> speed <495.>;
		sleep 110;
	}
	if( TRUE )
	{
		move lfupleg to y-axis [1.] speed [4.];
		move lrupleg to y-axis [2.] speed [6.];
		move rfupleg to y-axis [1.] speed [7.];
		move rrupleg to y-axis [1.] speed [5.];
		turn body to x-axis <0.> speed <188.>;
		turn lfupleg to x-axis <53.> speed <670.>;
		turn lrupleg to x-axis <-39.> speed <96.>;
		turn rfupleg to x-axis <51.> speed <742.>;
		turn rrupleg to x-axis <-32.> speed <100.>;
		turn rrleg to x-axis <14.> speed <348.>;
		turn rfleg to x-axis <-52.> speed <570.>;
		turn lrleg to x-axis <25.> speed <314.>;
		turn lfleg to x-axis <-52.> speed <465.>;
		sleep 113;
	}
	if( TRUE )
	{
		move lrupleg to y-axis [2.] speed [4.];
		move rrupleg to y-axis [2.] speed [4.];
		turn body to x-axis <-12.> speed <241.>;
		turn lfupleg to x-axis <87.> speed <604.>;
		turn lrupleg to x-axis <-61.> speed <380.>;
		turn rfupleg to x-axis <82.> speed <562.>;
		turn rrupleg to x-axis <-61.> speed <528.>;
		turn rrleg to x-axis <72.> speed <1036.>;
		turn rfleg to x-axis <-58.> speed <105.>;
		turn lrleg to x-axis <71.> speed <820.>;
		sleep 56;
	}
	if( TRUE )
	{
		move lrupleg to y-axis [2.] speed [3.];
		move rrupleg to y-axis [2.] speed [0.];
		turn body to x-axis <-26.> speed <232.>;
		turn lfupleg to x-axis <121.> speed <584.>;
		turn lrupleg to x-axis <-32.> speed <498.>;
		turn rfupleg to x-axis <114.> speed <543.>;
		turn rrupleg to x-axis <-31.> speed <526.>;
		turn rrleg to x-axis <54.> speed <306.>;
		turn rfleg to x-axis <-63.> speed <102.>;
		turn lrleg to x-axis <57.> speed <245.>;
		sleep 58;
	}
	if( TRUE )
	{
		move lrupleg to y-axis [1.] speed [6.];
		move rrupleg to y-axis [1.] speed [5.];
		turn body to x-axis <0.> speed <232.>;
		turn head to x-axis <0.> speed <181.>;
		turn lfupleg to x-axis <60.> speed <545.>;
		turn lrupleg to x-axis <3.> speed <321.>;
		turn rfupleg to x-axis <53.> speed <545.>;
		turn rrupleg to x-axis <-3.> speed <249.>;
		turn rrleg to x-axis <30.> speed <219.>;
		turn rfleg to x-axis <26.> speed <807.>;
		turn lrleg to x-axis <22.> speed <308.>;
		turn lfleg to x-axis <13.> speed <588.>;
		sleep 112;
	}
	sleep 113;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

walklegs()
{
	if( TRUE )
	{
		move lrupleg to y-axis [1.] now;
		move lrupleg to y-axis [1.] speed [2.];
		move rfupleg to y-axis [1.] now;
		move rfupleg to y-axis [1.] speed [4.];
		move rrupleg to y-axis [1.] now;
		move rrupleg to y-axis [1.] speed [2.];
		turn head to x-axis <1.> now;
		turn head to x-axis <8.> speed <52.>;
		turn lfupleg to x-axis <-12.> now;
		turn lfupleg to x-axis <0.> speed <91.>;
		turn lrupleg to x-axis <-56.> now;
		turn lrupleg to x-axis <-44.> speed <87.>;
		turn rfupleg to x-axis <56.> now;
		turn rfupleg to x-axis <87.> speed <231.>;
		turn rrupleg to x-axis <-47.> now;
		turn rrupleg to x-axis <-66.> speed <140.>;
		turn rrleg to x-axis <13.> now;
		turn rrleg to x-axis <39.> speed <200.>;
		turn rfleg to x-axis <-39.> now;
		turn lrleg to x-axis <76.> now;
		turn lrleg to x-axis <70.> speed <42.>;
		turn lfleg to x-axis <0.> now;
		sleep 135;
	}
	if( TRUE )
	{
		move lfupleg to y-axis [1.] speed [5.];
		move lrupleg to y-axis [0.] speed [1.];
		turn head to x-axis <-6.> speed <111.>;
		turn lfupleg to x-axis <49.> speed <365.>;
		turn lrupleg to x-axis <-8.> speed <261.>;
		turn rfupleg to x-axis <29.> speed <428.>;
		turn rrupleg to x-axis <-49.> speed <121.>;
		turn rrleg to x-axis <48.> speed <62.>;
		turn rfleg to x-axis <22.> speed <449.>;
		turn lrleg to x-axis <70.> speed <3.>;
		turn lfleg to x-axis <-46.> speed <348.>;
		sleep 136;
	}
	if( TRUE )
	{
		move lrupleg to y-axis [1.] speed [6.];
		move rfupleg to y-axis [0.] speed [6.];
		move rrupleg to y-axis [1.] speed [2.];
		turn head to x-axis <1.> speed <58.>;
		turn lfupleg to x-axis <56.> speed <51.>;
		turn lrupleg to x-axis <-45.> speed <264.>;
		turn rfupleg to x-axis <-21.> speed <370.>;
		turn rrupleg to x-axis <-40.> speed <68.>;
		turn rrleg to x-axis <45.> speed <17.>;
		turn rfleg to x-axis <4.> speed <127.>;
		turn lrleg to x-axis <51.> speed <140.>;
		turn lfleg to x-axis <-49.> speed <20.>;
		sleep 138;
	}
	if( TRUE )
	{
		move lfupleg to y-axis [1.] speed [1.];
		move rrupleg to y-axis [1.] speed [0.];
		turn head to x-axis <4.> speed <20.>;
		turn lfupleg to x-axis <81.> speed <181.>;
		turn lrupleg to x-axis <-61.> speed <114.>;
		turn rfupleg to x-axis <15.> speed <271.>;
		turn rrupleg to x-axis <-38.> speed <13.>;
		turn rrleg to x-axis <49.> speed <24.>;
		turn rfleg to x-axis <-33.> speed <278.>;
		turn lrleg to x-axis <26.> speed <184.>;
		turn lfleg to x-axis <-80.> speed <222.>;
		sleep 136;
	}
	if( TRUE )
	{
		move lrupleg to y-axis [2.] speed [1.];
		move rrupleg to y-axis [1.] speed [1.];
		turn head to x-axis <7.> speed <24.>;
		turn lfupleg to x-axis <87.> speed <41.>;
		turn lrupleg to x-axis <-78.> speed <125.>;
		turn rfupleg to x-axis <31.> speed <121.>;
		turn rrupleg to x-axis <-31.> speed <48.>;
		turn rrleg to x-axis <55.> speed <48.>;
		turn lrleg to x-axis <78.> speed <383.>;
		turn lfleg to x-axis <-28.> speed <376.>;
		sleep 136;
	}
	if( TRUE )
	{
		move lfupleg to y-axis [1.] speed [1.];
		move lrupleg to y-axis [1.] speed [2.];
		move rfupleg to y-axis [1.] speed [2.];
		move rrupleg to y-axis [1.] speed [2.];
		turn head to x-axis <5.> speed <17.>;
		turn lfupleg to x-axis <43.> speed <318.>;
		turn lrupleg to x-axis <-70.> speed <55.>;
		turn rfupleg to x-axis <51.> speed <145.>;
		turn rrupleg to x-axis <-23.> speed <58.>;
		turn rrleg to x-axis <59.> speed <24.>;
		turn rfleg to x-axis <-51.> speed <134.>;
		turn lfleg to x-axis <1.> speed <221.>;
		sleep 137;
	}
	if( TRUE )
	{
		move lfupleg to y-axis [1.] speed [4.];
		move lrupleg to y-axis [1.] speed [1.];
		turn head to x-axis <0.> speed <38.>;
		turn lfupleg to x-axis <16.> speed <202.>;
		turn lrupleg to x-axis <-65.> speed <34.>;
		turn rfupleg to x-axis <78.> speed <195.>;
		turn rrupleg to x-axis <-4.> speed <142.>;
		turn rrleg to x-axis <-20.> speed <585.>;
		turn rfleg to x-axis <-73.> speed <163.>;
		turn lrleg to x-axis <75.> speed <20.>;
		turn lfleg to x-axis <-41.> speed <317.>;
		sleep 136;
	}
	sleep 136;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = Static_Var_1;
		aiming = Static_Var_2;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_3 = 1;
				call-script walklegs();
			}
			if( !aiming )
			{
				Static_Var_3 = 0;
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_3 = 1;
			if( justmoved )
			{
				move lrupleg to y-axis [0.] speed [5.];
				move rfupleg to y-axis [0.] speed [5.];
				move rrupleg to y-axis [0.] speed [5.];
				turn head to x-axis <0.> speed <200.>;
				turn lfupleg to x-axis <0.> speed <200.>;
				turn lrupleg to x-axis <0.> speed <200.>;
				turn rfupleg to x-axis <0.> speed <200.>;
				turn rrupleg to x-axis <0.> speed <200.>;
				turn rrleg to x-axis <0.> speed <200.>;
				turn lrleg to x-axis <0.> speed <200.>;
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	hide flare;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	Static_Var_3 = 1;
	Static_Var_4 = 3000;
	start-script MotionControl();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_4 = Func_Var_1 * 2;
}

StartMoving()
{
	Static_Var_1 = 1;
}

StopMoving()
{
	Static_Var_1 = 0;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

RestoreAfterDelay()
{
	sleep Static_Var_4;
	turn turret to y-axis <0.> speed <300.>;
	wait-for-turn turret around y-axis;
	Static_Var_2 = 0;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	Static_Var_2 = 1;
	while( !Static_Var_3 )
	{
		sleep 100;
	}
	turn turret to y-axis heading speed <450.>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 100;
	hide flare;
}

Killed(severity, corpsetype)
{
	var Func_Var_3;
	hide flare;
	Func_Var_3 = Rand( 1, 10 );
	if( Func_Var_3 == 1 )
	{
		corpsetype = 3;
		explode body type SHATTER;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	}
	if( Func_Var_3 == 2 )
	{
		corpsetype = 3;
		explode body type SHATTER;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	}
	if( Func_Var_3 == 3 )
	{
		corpsetype = 3;
		explode body type SHATTER;
	}
	if( Func_Var_3 == 4 )
	{
		corpsetype = 3;
		explode head type SHATTER;
		explode turret type SHATTER;
		explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	}
	if( Func_Var_3 == 5 )
	{
		corpsetype = 3;
		explode lfleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rfleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lrleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rrleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	}
	if( Func_Var_3 == 6 )
	{
		corpsetype = 3;
		explode body type SHATTER;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lfleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	}
	if( Func_Var_3 == 7 )
	{
		corpsetype = 3;
		explode body type SHATTER;
		explode head type SHATTER;
		explode turret type SHATTER;
	}
	if( Func_Var_3 == 8 )
	{
		corpsetype = 3;
		explode body type SHATTER;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	}
	if( Func_Var_3 == 9 )
	{
		corpsetype = 3;
		explode body type SHATTER;
	}
	if( Func_Var_3 == 10 )
	{
		corpsetype = 3;
		explode body type SHATTER;
		explode turret type SHATTER;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lfleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rfleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lrleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rrleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	}
}
