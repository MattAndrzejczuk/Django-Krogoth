#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1b, flare2b, base, wing1, wing2, tail1, tail2, weapon1,
       weapon2, flare1a, flare2a;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


activatescr()
{
	if( TRUE )
	{
		move wing1 to x-axis [0.] now;
		move wing1 to x-axis [3.] speed [2.];
		move wing2 to x-axis [0.] now;
		move wing2 to x-axis [-3.] speed [2.];
		turn tail1 to z-axis <0.> now;
		turn tail1 to z-axis <56.> speed <56.>;
		turn tail2 to z-axis <0.> now;
		turn tail2 to z-axis <-65.> speed <66.>;
		sleep 998;
	}
	if( TRUE )
	{
		move weapon1 to x-axis [-3.] speed [2.];
		move weapon2 to x-axis [3.] speed [2.];
		sleep 1008;
	}
	sleep 102;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move weapon1 to x-axis [-3.] now;
		move weapon1 to x-axis [0.] speed [2.];
		move weapon2 to x-axis [3.] now;
		move weapon2 to x-axis [0.] speed [2.];
		move wing1 to x-axis [3.] now;
		move wing2 to x-axis [-3.] now;
		turn tail1 to z-axis <56.> now;
		turn tail2 to z-axis <-66.> now;
		sleep 998;
	}
	if( TRUE )
	{
		move wing1 to x-axis [0.] speed [2.];
		move wing2 to x-axis [0.] speed [2.];
		turn tail1 to z-axis <0.> speed <55.>;
		turn tail2 to z-axis <0.> speed <65.>;
		sleep 1008;
	}
	sleep 71;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	Static_Var_2 = 1;
	Static_Var_3 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( Static_Var_2 == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( Static_Var_2 == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	Static_Var_3 = 0;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

FirePrimary()
{
	if( Static_Var_1 == 0 )
	{
		Static_Var_1 = 1;
		return (0);
	}
	if( Static_Var_1 == 1 )
	{
		Static_Var_1 = 2;
		return (0);
	}
	if( Static_Var_1 == 2 )
	{
		Static_Var_1 = 3;
		return (0);
	}
	if( Static_Var_1 == 3 )
	{
		Static_Var_1 = 0;
		return (0);
	}
}

QueryPrimary(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = flare1a;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = flare1b;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = flare2a;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = flare2b;
	}
}

AimFromPrimary(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = flare1a;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = flare1b;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = flare2a;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = flare2b;
	}
}

Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare2a;
	hide flare1b;
	hide flare2b;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type BITMAPONLY | BITMAP2;
		explode flare2a type BITMAPONLY | BITMAP3;
		explode flare1b type BITMAPONLY | BITMAP4;
		explode flare2b type BITMAPONLY | BITMAP5;
		explode tail1 type BITMAPONLY | BITMAP1;
		explode tail2 type BITMAPONLY | BITMAP2;
		explode weapon1 type BITMAPONLY | BITMAP3;
		explode weapon2 type BITMAPONLY | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type FALL | BITMAP2;
		explode flare2a type FALL | BITMAP3;
		explode flare1b type FALL | BITMAP4;
		explode flare2b type FALL | BITMAP5;
		explode tail1 type FALL | BITMAP1;
		explode tail2 type FALL | BITMAP2;
		explode weapon1 type BITMAPONLY | BITMAP3;
		explode weapon2 type SHATTER | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode tail1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode tail2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode weapon1 type BITMAPONLY | BITMAP3;
		explode weapon2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode tail1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode tail2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode weapon1 type BITMAPONLY | BITMAP3;
	explode weapon2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode wing1 type BITMAPONLY | BITMAP5;
	explode wing2 type BITMAPONLY | BITMAP1;
}
