#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, tower, arm1, arm2, arm3, arm4, glow, turret,
       sleeve, cap, barrels, flare, light, firept;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

OpenArms()
{
	set ARMORED to 0;
	move arm1 to x-axis [2.] speed [4.];
	move arm2 to z-axis [2.] speed [4.];
	move arm3 to x-axis [-2.] speed [4.];
	move arm4 to z-axis [-2.] speed [4.];
	wait-for-move arm1 along x-axis;
	wait-for-move arm2 along z-axis;
	wait-for-move arm3 along x-axis;
	wait-for-move arm4 along z-axis;
	spin arm1 around y-axis speed Static_Var_2 accelerate Static_Var_3;
	spin arm2 around y-axis speed Static_Var_2 accelerate Static_Var_3;
	spin arm3 around y-axis speed Static_Var_2 accelerate Static_Var_3;
	spin arm4 around y-axis speed Static_Var_2 accelerate Static_Var_3;
}

CloseArms()
{
	stop-spin arm1 around y-axis decelerate Static_Var_4;
	stop-spin arm2 around y-axis decelerate Static_Var_4;
	stop-spin arm3 around y-axis decelerate Static_Var_4;
	stop-spin arm4 around y-axis decelerate Static_Var_4;
	wait-for-turn arm1 around y-axis;
	wait-for-turn arm2 around y-axis;
	wait-for-turn arm3 around y-axis;
	wait-for-turn arm4 around y-axis;
	turn arm1 to y-axis <0.> speed <135.>;
	turn arm2 to y-axis <0.> speed <135.>;
	turn arm3 to y-axis <0.> speed <135.>;
	turn arm4 to y-axis <0.> speed <135.>;
	wait-for-turn arm1 around y-axis;
	wait-for-turn arm2 around y-axis;
	wait-for-turn arm3 around y-axis;
	wait-for-turn arm4 around y-axis;
	move arm1 to x-axis [0.] speed [8.];
	move arm2 to z-axis [0.] speed [8.];
	move arm3 to x-axis [0.] speed [8.];
	move arm4 to z-axis [0.] speed [8.];
	set ARMORED to 1;
}

LoadSlugs()
{
	set-signal-mask 4;
	while( TRUE )
	{
		while( Static_Var_6 )
		{
			sleep 150;
		}
		move glow to y-axis [0.] now;
		show glow;
		move glow to y-axis [12.] speed Static_Var_5;
		wait-for-move glow along y-axis;
		hide glow;
		Static_Var_6 = 1;
		sleep 150;
	}
}

Go()
{
	dont-cache light;
	call-script OpenArms();
	start-script LoadSlugs();
}

Stop()
{
	signal 4;
	call-script CloseArms();
	cache light;
}

InitState()
{
	Static_Var_7 = 1;
	Static_Var_8 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_8 )
	{
		Static_Var_7 = requestedstate;
		return (0);
	}
	Static_Var_8 = 1;
	currentstate = Static_Var_7;
	Static_Var_7 = requestedstate;
	while( Static_Var_7 != currentstate )
	{
		if( Static_Var_7 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_7 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_8 = 0;
}

Create()
{
	hide flare;
	hide glow;
	dont-cache arm1;
	dont-cache arm2;
	dont-cache arm3;
	dont-cache arm4;
	dont-cache glow;
	dont-cache turret;
	dont-cache sleeve;
	dont-cache cap;
	dont-cache barrels;
	dont-cache flare;
	dont-shade arm1;
	dont-shade arm2;
	dont-shade arm3;
	dont-shade arm4;
	dont-shade glow;
	dont-shade turret;
	dont-shade sleeve;
	dont-shade cap;
	dont-shade barrels;
	dont-shade flare;
	Static_Var_2 = 0;
	Static_Var_3 = 91;
	Static_Var_4 = 910;
	Static_Var_5 = 0;
	cache light;
	Static_Var_1 = 1;
	Static_Var_6 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	call-script InitState();
	start-script SmokeUnit();
	start-script RequestState(0);
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_6 )
	{
		sleep 150;
	}
	if( Static_Var_1 == 1 )
	{
		turn barrels to z-axis <0.> speed <200.>;
		turn cap to z-axis <0.> speed <200.>;
	}
	if( Static_Var_1 == 2 )
	{
		turn barrels to z-axis <90.> speed <200.>;
		turn cap to z-axis <90.> speed <200.>;
	}
	if( Static_Var_1 == 3 )
	{
		turn barrels to z-axis <180.> speed <200.>;
		turn cap to z-axis <180.> speed <200.>;
	}
	if( Static_Var_1 == 4 )
	{
		turn barrels to z-axis <-90.> speed <200.>;
		turn cap to z-axis <-90.> speed <200.>;
	}
	turn turret to y-axis heading speed <150.>;
	turn sleeve to x-axis <0.> - pitch speed <150.>;
	wait-for-turn barrels around z-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	return (1);
}

FirePrimary()
{
	Static_Var_6 = 0;
	show flare;
	sleep 150;
	hide flare;
	++Static_Var_1;
	if( Static_Var_1 == 5 )
	{
		Static_Var_1 = 1;
	}
}

SetSpeed(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 15;
	Static_Var_5 = Func_Var_1 * 1500;
}

TargetCleared(Func_Var_1)
{
	stop-spin turret around y-axis;
	stop-spin sleeve around x-axis;
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

QueryPrimary(piecenum)
{
	piecenum = firept;
}

SweetSpot(piecenum)
{
	piecenum = tower;
}

Killed(severity, corpsetype)
{
	hide flare;
	hide glow;
	hide light;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode tower type BITMAPONLY | BITMAP2;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP2;
		explode arm3 type BITMAPONLY | BITMAP1;
		explode arm4 type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP2;
		explode cap type BITMAPONLY | BITMAP1;
		explode barrels type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode tower type SHATTER | BITMAP3;
		explode arm1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode arm2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode arm3 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode arm4 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		explode sleeve type BITMAPONLY | BITMAP2;
		explode cap type BITMAPONLY | BITMAP4;
		explode barrels type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP4;
		explode tower type SHATTER | BITMAP3;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode arm3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode arm4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turret type SHATTER | BITMAP3;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode cap type FALL | BITMAP4;
		explode barrels type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP4;
	explode tower type SHATTER | BITMAP3;
	explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode arm3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode arm4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret type SHATTER | BITMAP3;
	explode sleeve type BITMAPONLY | BITMAP1;
	explode cap type FALL | BITMAP4;
	explode barrels type BITMAPONLY | BITMAP2;
}
