#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flarea, flareb, flarec1, flarec2, turreta, hatch, shell1a,
       shell4b, shell3b, shell2b, shell1b, shell2a, shell3a, shell4a, turretb,
       turretc, hatchc, sleevec, hatchb, barrelc1, barrelc2, collarb, barrelb,
       barrela, sleevea, sleeveb;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


activatescr()
{
	if( TRUE )
	{
		turn hatch to z-axis <0.> now;
		turn hatch to z-axis <-31.> speed <94.>;
		sleep 337;
	}
	if( TRUE )
	{
		move hatch to x-axis [3.] speed [8.];
		move hatch to y-axis [-4.] speed [10.];
		turn hatch to z-axis <-49.> speed <52.>;
		sleep 337;
	}
	if( TRUE )
	{
		move shell1a to z-axis [0.] speed [0.];
		move shell4b to x-axis [-4.] speed [12.];
		move shell3b to z-axis [-4.] speed [12.];
		move shell2b to x-axis [4.] speed [10.];
		move shell1b to z-axis [4.] speed [10.];
		sleep 337;
	}
	if( TRUE )
	{
		move shell1a to x-axis [3.] speed [8.];
		move shell1a to z-axis [0.] speed [0.];
		move shell2a to z-axis [-3.] speed [8.];
		move shell3a to x-axis [-3.] speed [8.];
		move shell4a to z-axis [3.] speed [8.];
		sleep 332;
	}
	if( TRUE )
	{
		move shell1a to y-axis [-11.] speed [34.];
		move shell2a to y-axis [-11.] speed [34.];
		move shell3a to y-axis [-11.] speed [32.];
		move shell4a to y-axis [-11.] speed [32.];
		sleep 337;
	}
	if( TRUE )
	{
		sleep 112;
	}
	if( TRUE )
	{
		move turreta to y-axis [4.] speed [12.];
		sleep 317;
	}
	if( TRUE )
	{
		move turreta to y-axis [9.] speed [12.];
		move turretb to y-axis [4.] speed [12.];
		sleep 337;
	}
	if( TRUE )
	{
		move turreta to y-axis [12.] speed [8.];
		move turretb to y-axis [7.] speed [6.];
		move turretc to y-axis [3.] speed [6.];
		sleep 337;
	}
	if( TRUE )
	{
		move hatchc to y-axis [2.] speed [4.];
		move hatchc to z-axis [-1.] speed [2.];
		sleep 337;
	}
	if( TRUE )
	{
		move sleevec to z-axis [4.] speed [12.];
		move hatchb to x-axis [3.] speed [8.];
		move hatchb to z-axis [-3.] speed [8.];
		turn hatchb to y-axis <-46.> speed <137.>;
		sleep 342;
	}
	if( TRUE )
	{
		move barrelc1 to z-axis [3.] speed [16.];
		move barrelc2 to z-axis [3.] speed [16.];
		move collarb to z-axis [3.] speed [16.];
		move barrelb to z-axis [4.] speed [20.];
		move barrela to z-axis [4.] speed [20.];
		sleep 171;
	}
	sleep 22;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		stop-spin turreta around y-axis;
		stop-spin turretb around y-axis;
		stop-spin turretc around y-axis;
		stop-spin sleevea around x-axis;
		stop-spin sleeveb around x-axis;
		stop-spin sleevec around x-axis;
		move turreta to y-axis [12.] now;
		move turretb to y-axis [7.] now;
		move turretc to y-axis [3.] now;
		move shell1a to x-axis [3.] now;
		move shell1a to y-axis [-11.] now;
		move shell1a to z-axis [0.] now;
		move shell2a to y-axis [-11.] now;
		move shell2a to z-axis [-3.] now;
		move shell3a to x-axis [-3.] now;
		move shell3a to y-axis [-11.] now;
		move shell4a to y-axis [-11.] now;
		move shell4a to z-axis [3.] now;
		move shell4b to x-axis [-4.] now;
		move shell3b to z-axis [-4.] now;
		move shell2b to x-axis [4.] now;
		move shell1b to z-axis [4.] now;
		move hatch to x-axis [3.] now;
		move hatch to y-axis [-4.] now;
		move hatchc to y-axis [2.] now;
		move hatchc to z-axis [-1.] now;
		move sleevec to z-axis [4.] now;
		move barrelc1 to z-axis [3.] now;
		move barrelc2 to z-axis [3.] now;
		move collarb to z-axis [3.] now;
		move hatchb to x-axis [3.] now;
		move hatchb to z-axis [-3.] now;
		move barrelb to z-axis [4.] now;
		move barrela to z-axis [4.] now;
		move barrela to z-axis [0.] speed [10.];
		turn hatch to z-axis <-49.> now;
		turn hatchb to y-axis <-47.> now;
		move barrelb to z-axis [0.] speed [10.];
		move barrelc1 to z-axis [0.] speed [8.];
		move barrelc2 to z-axis [0.] speed [8.];
		move collarb to z-axis [0.] speed [8.];
		sleep 341;
	}
	if( TRUE )
	{
		move sleevec to z-axis [0.] speed [12.];
		move hatchb to x-axis [0.] speed [8.];
		move hatchb to z-axis [0.] speed [8.];
		turn hatchb to y-axis <0.> speed <137.>;
		sleep 341;
	}
	if( TRUE )
	{
		move hatchc to y-axis [0.] speed [4.];
		move hatchc to z-axis [0.] speed [2.];
		sleep 342;
	}
	if( TRUE )
	{
		move turreta to y-axis [9.] speed [8.];
		move turretb to y-axis [4.] speed [8.];
		move turretc to y-axis [0.] speed [8.];
		sleep 328;
	}
	if( TRUE )
	{
		move turreta to y-axis [4.] speed [12.];
		move turretb to y-axis [0.] speed [12.];
		sleep 330;
	}
	if( TRUE )
	{
		move turreta to y-axis [0.] speed [12.];
		sleep 331;
	}
	if( TRUE )
	{
		sleep 148;
	}
	if( TRUE )
	{
		move shell1a to y-axis [0.] speed [34.];
		move shell2a to y-axis [0.] speed [34.];
		move shell3a to y-axis [0.] speed [34.];
		move shell4a to y-axis [0.] speed [34.];
		sleep 328;
	}
	if( TRUE )
	{
		move shell1a to x-axis [0.] speed [10.];
		move shell1a to z-axis [0.] speed [0.];
		move shell2a to z-axis [0.] speed [10.];
		move shell3a to x-axis [0.] speed [10.];
		move shell4a to z-axis [0.] speed [10.];
		sleep 324;
	}
	if( TRUE )
	{
		move shell1a to z-axis [0.] speed [0.];
		move shell4b to x-axis [0.] speed [12.];
		move shell3b to z-axis [0.] speed [12.];
		move shell2b to x-axis [0.] speed [12.];
		move shell1b to z-axis [0.] speed [10.];
		sleep 331;
	}
	if( TRUE )
	{
		move hatch to x-axis [0.] speed [8.];
		move hatch to y-axis [0.] speed [10.];
		turn hatch to z-axis <-31.> speed <53.>;
		sleep 330;
	}
	if( TRUE )
	{
		turn hatch to z-axis <0.> speed <96.>;
		sleep 329;
	}
	sleep 27;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache barrela;
	dont-cache barrelb;
	dont-cache barrelc1;
	dont-cache barrelc2;
	dont-cache collarb;
	dont-cache flarea;
	dont-cache flareb;
	dont-cache flarec1;
	dont-cache flarec2;
	dont-cache hatch;
	dont-cache hatchb;
	dont-cache hatchc;
	dont-cache shell1a;
	dont-cache shell1b;
	dont-cache shell2a;
	dont-cache shell2b;
	dont-cache shell3a;
	dont-cache shell3b;
	dont-cache shell4a;
	dont-cache shell4b;
	dont-cache sleevea;
	dont-cache sleeveb;
	dont-cache sleevec;
	dont-cache turreta;
	dont-cache turretb;
	dont-cache turretc;
	call-script activatescr();
	set ARMORED to 0;
	Static_Var_3 = 1;
}

Stop()
{
	Static_Var_3 = 0;
	set ARMORED to 1;
	call-script deactivatescr();
	cache barrela;
	cache barrelb;
	cache barrelc1;
	cache barrelc2;
	cache collarb;
	cache flarea;
	cache flareb;
	cache flarec1;
	cache flarec2;
	cache hatch;
	cache hatchb;
	cache hatchc;
	cache shell1a;
	cache shell1b;
	cache shell2a;
	cache shell2b;
	cache shell3a;
	cache shell3b;
	cache shell4a;
	cache shell4b;
	cache sleevea;
	cache sleeveb;
	cache sleevec;
	cache turreta;
	cache turretb;
	cache turretc;
}

InitState()
{
	Static_Var_4 = 1;
	Static_Var_5 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_5 )
	{
		Static_Var_4 = requestedstate;
		return (0);
	}
	Static_Var_5 = 1;
	currentstate = Static_Var_4;
	Static_Var_4 = requestedstate;
	while( Static_Var_4 != currentstate )
	{
		if( Static_Var_4 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_4 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_5 = 0;
}

Create()
{
	hide flarea;
	hide flareb;
	hide flarec1;
	hide flarec2;
	dont-shade barrela;
	dont-shade barrelb;
	dont-shade barrelc1;
	dont-shade barrelc2;
	dont-shade collarb;
	dont-shade flarea;
	dont-shade flareb;
	dont-shade flarec1;
	dont-shade flarec2;
	dont-shade hatch;
	dont-shade hatchb;
	dont-shade hatchc;
	dont-shade shell1a;
	dont-shade shell1b;
	dont-shade shell2a;
	dont-shade shell2b;
	dont-shade shell3a;
	dont-shade shell3b;
	dont-shade shell4a;
	dont-shade shell4b;
	dont-shade sleevea;
	dont-shade sleeveb;
	dont-shade sleevec;
	dont-shade turreta;
	dont-shade turretb;
	dont-shade turretc;
	Static_Var_1 = 1;
	call-script InitState();
	Static_Var_3 = 0;
	Static_Var_2 = 2000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	set ARMORED to 1;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	signal 4;
	signal 8;
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 4;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_3 )
	{
		sleep 250;
	}
	turn turreta to y-axis heading speed <50.>;
	turn sleevea to x-axis <0.> - pitch speed <50.>;
	wait-for-turn turreta around y-axis;
	wait-for-turn sleevea around x-axis;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	while( !Static_Var_3 )
	{
		sleep 250;
	}
	turn turretb to y-axis heading speed <200.>;
	turn sleeveb to x-axis <0.> - pitch speed <200.>;
	wait-for-turn turretb around y-axis;
	wait-for-turn sleeveb around x-axis;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 8;
	set-signal-mask 8;
	while( !Static_Var_3 )
	{
		sleep 250;
	}
	turn turretc to y-axis heading speed <300.>;
	turn sleevec to x-axis <0.> - pitch speed <300.>;
	wait-for-turn turretc around y-axis;
	wait-for-turn sleevec around x-axis;
	return (1);
}

FirePrimary()
{
	show flarea;
	sleep 150;
	hide flarea;
}

FireSecondary()
{
	show flareb;
	sleep 150;
	hide flareb;
}

FireTertiary()
{
	if( Static_Var_1 == 1 )
	{
		show flarec1;
		sleep 150;
		hide flarec1;
		Static_Var_1 = 2;
		return (0);
	}
	if( Static_Var_1 == 2 )
	{
		show flarec2;
		sleep 150;
		hide flarec2;
		Static_Var_1 = 1;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turreta;
}

AimFromSecondary(piecenum)
{
	piecenum = turretb;
}

AimFromTertiary(piecenum)
{
	piecenum = turretc;
}

QueryPrimary(piecenum)
{
	piecenum = flarea;
}

QuerySecondary(piecenum)
{
	piecenum = flareb;
}

QueryTertiary(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = flarec1;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = flarec2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flarea;
	hide flareb;
	hide flarec1;
	hide flarec2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrela type BITMAPONLY | BITMAP1;
		explode barrelb type BITMAPONLY | BITMAP2;
		explode barrelc1 type BITMAPONLY | BITMAP3;
		explode barrelc2 type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode collarb type BITMAPONLY | BITMAP1;
		explode flarea type BITMAPONLY | BITMAP2;
		explode flareb type BITMAPONLY | BITMAP3;
		explode flarec1 type BITMAPONLY | BITMAP4;
		explode flarec2 type BITMAPONLY | BITMAP5;
		explode hatch type BITMAPONLY | BITMAP1;
		explode hatchb type BITMAPONLY | BITMAP2;
		explode hatchc type BITMAPONLY | BITMAP3;
		explode shell1a type BITMAPONLY | BITMAP4;
		explode shell1b type BITMAPONLY | BITMAP5;
		explode shell2a type BITMAPONLY | BITMAP1;
		explode shell2b type BITMAPONLY | BITMAP2;
		explode shell3a type BITMAPONLY | BITMAP3;
		explode shell3b type BITMAPONLY | BITMAP4;
		explode shell4a type BITMAPONLY | BITMAP5;
		explode shell4b type BITMAPONLY | BITMAP1;
		explode sleevea type BITMAPONLY | BITMAP2;
		explode sleeveb type BITMAPONLY | BITMAP3;
		explode sleevec type BITMAPONLY | BITMAP4;
		explode turreta type BITMAPONLY | BITMAP5;
		explode turretb type BITMAPONLY | BITMAP1;
		explode turretc type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrela type FALL | BITMAP1;
		explode barrelb type FALL | BITMAP2;
		explode barrelc1 type FALL | BITMAP3;
		explode barrelc2 type FALL | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode collarb type FALL | BITMAP1;
		explode flarea type FALL | BITMAP2;
		explode flareb type FALL | BITMAP3;
		explode flarec1 type FALL | BITMAP4;
		explode flarec2 type FALL | BITMAP5;
		explode hatch type FALL | BITMAP1;
		explode hatchb type FALL | BITMAP2;
		explode hatchc type FALL | BITMAP3;
		explode shell1a type BITMAPONLY | BITMAP4;
		explode shell1b type BITMAPONLY | BITMAP5;
		explode shell2a type BITMAPONLY | BITMAP1;
		explode shell2b type BITMAPONLY | BITMAP2;
		explode shell3a type BITMAPONLY | BITMAP3;
		explode shell3b type BITMAPONLY | BITMAP4;
		explode shell4a type BITMAPONLY | BITMAP5;
		explode shell4b type BITMAPONLY | BITMAP1;
		explode sleevea type FALL | BITMAP2;
		explode sleeveb type FALL | BITMAP3;
		explode sleevec type FALL | BITMAP4;
		explode turreta type BITMAPONLY | BITMAP5;
		explode turretb type BITMAPONLY | BITMAP1;
		explode turretc type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrelc1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrelc2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode collarb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flarea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flareb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flarec1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flarec2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode hatch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode hatchb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode hatchc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode shell1a type BITMAPONLY | BITMAP4;
		explode shell1b type BITMAPONLY | BITMAP5;
		explode shell2a type BITMAPONLY | BITMAP1;
		explode shell2b type BITMAPONLY | BITMAP2;
		explode shell3a type BITMAPONLY | BITMAP3;
		explode shell3b type BITMAPONLY | BITMAP4;
		explode shell4a type BITMAPONLY | BITMAP5;
		explode shell4b type BITMAPONLY | BITMAP1;
		explode sleevea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeveb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleevec type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turreta type BITMAPONLY | BITMAP5;
		explode turretb type BITMAPONLY | BITMAP1;
		explode turretc type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode barrela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrelc1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrelc2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode base type BITMAPONLY | BITMAP5;
	explode collarb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flarea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flareb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flarec1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flarec2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode hatch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode hatchb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode hatchc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode shell1a type BITMAPONLY | BITMAP4;
	explode shell1b type BITMAPONLY | BITMAP5;
	explode shell2a type BITMAPONLY | BITMAP1;
	explode shell2b type BITMAPONLY | BITMAP2;
	explode shell3a type BITMAPONLY | BITMAP3;
	explode shell3b type BITMAPONLY | BITMAP4;
	explode shell4a type BITMAPONLY | BITMAP5;
	explode shell4b type BITMAPONLY | BITMAP1;
	explode sleevea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sleeveb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleevec type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turreta type BITMAPONLY | BITMAP5;
	explode turretb type BITMAPONLY | BITMAP1;
	explode turretc type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}
