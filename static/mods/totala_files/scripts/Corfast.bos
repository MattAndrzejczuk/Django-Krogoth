#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, flare, Hip, RLLeg, LLLeg, LULeg, RULeg, LUArm,
       RUArm, RLArm, LLArm, Head, Thrust;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7;


walk()
{
	if( TRUE )
	{
		move Hip to y-axis [-0.] now;
		move Hip to z-axis [-1.] now;
		move RLLeg to y-axis [0.] now;
		move LLLeg to y-axis [1.] now;
		turn Hip to x-axis <11.> now;
		turn torso to x-axis <5.> now;
		turn LULeg to x-axis <-44.> now;
		turn RULeg to x-axis <4.> now;
		turn RLLeg to x-axis <19.> now;
		turn LLLeg to x-axis <44.> now;
		turn LUArm to x-axis <-17.> now;
		turn RUArm to x-axis <-10.> now;
		turn RLArm to x-axis <-9.> now;
		turn LLArm to x-axis <-37.> now;
		sleep 82;
	}
	if( TRUE )
	{
		move Hip to y-axis [-0.] now;
		move Hip to z-axis [-1.] now;
		turn torso to x-axis <3.> now;
		turn LULeg to x-axis <-57.> now;
		turn RULeg to x-axis <11.> now;
		turn RLLeg to x-axis <21.> now;
		turn LLLeg to x-axis <44.> now;
		turn LUArm to x-axis <-9.> now;
		turn RUArm to x-axis <-12.> now;
		turn RLArm to x-axis <-14.> now;
		turn LLArm to x-axis <-25.> now;
		sleep 56;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [-0.] now;
		turn torso to x-axis <0.> now;
		turn LULeg to x-axis <-71.> now;
		turn RULeg to x-axis <17.> now;
		turn RLLeg to x-axis <23.> now;
		turn LLLeg to x-axis <44.> now;
		turn LUArm to x-axis <0.> now;
		turn RUArm to x-axis <-14.> now;
		turn RLArm to x-axis <-19.> now;
		turn LLArm to x-axis <-13.> now;
		sleep 56;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [-0.] now;
		move LLLeg to y-axis [1.] now;
		turn torso to x-axis <-3.> now;
		turn LULeg to x-axis <-76.> now;
		turn RULeg to x-axis <19.> now;
		turn RLLeg to x-axis <25.> now;
		turn LLLeg to x-axis <37.> now;
		turn Head to x-axis <-4.> now;
		turn LUArm to x-axis <11.> now;
		turn RUArm to x-axis <-15.> now;
		turn RLArm to x-axis <-29.> now;
		turn LLArm to x-axis <-13.> now;
		sleep 55;
	}
	if( TRUE )
	{
		move Hip to y-axis [1.] now;
		move Hip to z-axis [0.] now;
		move LLLeg to y-axis [-1.] now;
		turn torso to x-axis <-5.> now;
		turn LULeg to x-axis <-82.> now;
		turn RULeg to x-axis <21.> now;
		turn RLLeg to x-axis <28.> now;
		turn LLLeg to x-axis <31.> now;
		turn Head to x-axis <-8.> now;
		turn LUArm to x-axis <22.> now;
		turn RUArm to x-axis <-16.> now;
		turn RLArm to x-axis <-39.> now;
		turn LLArm to x-axis <-13.> now;
		sleep 59;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [1.] now;
		move LLLeg to y-axis [-1.] now;
		turn torso to x-axis <-3.> now;
		turn LULeg to x-axis <-68.> now;
		turn RULeg to x-axis <29.> now;
		turn RLLeg to x-axis <25.> now;
		turn LLLeg to x-axis <26.> now;
		turn Head to x-axis <-8.> now;
		turn LUArm to x-axis <34.> now;
		turn RUArm to x-axis <-23.> now;
		turn RLArm to x-axis <-54.> now;
		turn LLArm to x-axis <-21.> now;
		sleep 57;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [2.] now;
		move LLLeg to y-axis [-1.] now;
		turn torso to x-axis <0.> now;
		turn LULeg to x-axis <-55.> now;
		turn RULeg to x-axis <38.> now;
		turn RLLeg to x-axis <23.> now;
		turn LLLeg to x-axis <21.> now;
		turn Head to x-axis <-8.> now;
		turn LUArm to x-axis <47.> now;
		turn RUArm to x-axis <-30.> now;
		turn RLArm to x-axis <-70.> now;
		turn LLArm to x-axis <-29.> now;
		sleep 26;
	}
	if( TRUE )
	{
		move Hip to y-axis [-0.] now;
		move Hip to z-axis [2.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [0.] - [0.] now;
		turn Hip to x-axis <11.> now;
		turn torso to x-axis <3.> now;
		turn LULeg to x-axis <-44.> now;
		turn RULeg to x-axis <18.> now;
		turn RLLeg to x-axis <48.> now;
		turn LLLeg to x-axis <21.> now;
		turn Head to x-axis <-4.> now;
		turn LUArm to x-axis <49.> now;
		turn RLArm to x-axis <-74.> now;
		turn LLArm to x-axis <-24.> now;
		sleep 27;
	}
	if( TRUE )
	{
		move Hip to y-axis [-1.] now;
		move Hip to z-axis [2.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [1.] now;
		turn torso to x-axis <5.> now;
		turn LULeg to x-axis <-32.> now;
		turn RULeg to x-axis <-2.> now;
		turn RLLeg to x-axis <73.> now;
		turn LLLeg to x-axis <21.> now;
		turn Head to x-axis <0.> now;
		turn LUArm to x-axis <51.> now;
		turn RLArm to x-axis <-78.> now;
		turn LLArm to x-axis <-18.> now;
		sleep 56;
	}
	if( TRUE )
	{
		move Hip to y-axis [-1.] now;
		move Hip to z-axis [2.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [1.] now;
		turn torso to x-axis <8.> now;
		turn LULeg to x-axis <-22.> now;
		turn RULeg to x-axis <-5.> now;
		turn RLLeg to x-axis <58.> now;
		turn LLLeg to x-axis <11.> now;
		turn Head to x-axis <5.> now;
		turn LUArm to x-axis <30.> now;
		turn RUArm to x-axis <-27.> now;
		turn RLArm to x-axis <-62.> now;
		turn LLArm to x-axis <-15.> now;
		sleep 55;
	}
	if( TRUE )
	{
		move Hip to y-axis [-1.] now;
		move Hip to z-axis [1.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [1.] now;
		turn torso to x-axis <10.> now;
		turn LULeg to x-axis <-12.> now;
		turn RULeg to x-axis <-8.> now;
		turn RLLeg to x-axis <44.> now;
		turn LLLeg to x-axis <1.> now;
		turn Head to x-axis <9.> now;
		turn LUArm to x-axis <10.> now;
		turn RUArm to x-axis <-24.> now;
		turn RLArm to x-axis <-45.> now;
		turn LLArm to x-axis <-12.> now;
		sleep 58;
	}
	if( TRUE )
	{
		move Hip to y-axis [-0.] now;
		move Hip to z-axis [0.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [0.] now;
		turn torso to x-axis <8.> now;
		turn LULeg to x-axis <-4.> now;
		turn RULeg to x-axis <-26.> now;
		turn LLLeg to x-axis <10.> now;
		turn Head to x-axis <5.> now;
		turn LUArm to x-axis <4.> now;
		turn RUArm to x-axis <-16.> now;
		turn RLArm to x-axis <-40.> now;
		turn LLArm to x-axis <-11.> now;
		sleep 57;
	}
	if( TRUE )
	{
		move Hip to y-axis [-0.] now;
		move Hip to z-axis [-1.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [0.] now;
		turn Hip to x-axis <11.> now;
		turn torso to x-axis <5.> now;
		turn LULeg to x-axis <4.> now;
		turn RULeg to x-axis <-44.> now;
		turn LLLeg to x-axis <19.> now;
		turn Head to x-axis <0.> now;
		turn LUArm to x-axis <-1.> now;
		turn RUArm to x-axis <-9.> now;
		turn RLArm to x-axis <-34.> now;
		turn LLArm to x-axis <-11.> now;
		sleep 87;
	}
	if( TRUE )
	{
		move Hip to y-axis [-0.] now;
		move Hip to z-axis [-1.] now;
		move RLLeg to y-axis [1.] now;
		turn torso to x-axis <3.> now;
		turn LULeg to x-axis <12.> now;
		turn RULeg to x-axis <-57.> now;
		turn LLLeg to x-axis <21.> now;
		turn LUArm to x-axis <-4.> now;
		turn RUArm to x-axis <-4.> now;
		turn RLArm to x-axis <-23.> now;
		turn LLArm to x-axis <-17.> now;
		sleep 55;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [-0.] now;
		move RLLeg to y-axis [1.] now;
		turn torso to x-axis <0.> now;
		turn LULeg to x-axis <20.> now;
		turn RULeg to x-axis <-71.> now;
		turn LLLeg to x-axis <23.> now;
		turn LUArm to x-axis <-7.> now;
		turn RUArm to x-axis <0.> now;
		turn RLArm to x-axis <-13.> now;
		turn LLArm to x-axis <-23.> now;
		sleep 56;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [-0.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [0.] now;
		turn torso to x-axis <-3.> now;
		turn LULeg to x-axis <20.> now;
		turn RULeg to x-axis <-76.> now;
		turn RLLeg to x-axis <37.> now;
		turn LLLeg to x-axis <25.> now;
		turn Head to x-axis <-4.> now;
		turn LUArm to x-axis <-12.> now;
		turn RUArm to x-axis <8.> now;
		turn RLArm to x-axis <-12.> now;
		turn LLArm to x-axis <-24.> now;
		sleep 57;
	}
	if( TRUE )
	{
		move Hip to y-axis [1.] now;
		move Hip to z-axis [0.] now;
		move RLLeg to y-axis [-1.] now;
		move LLLeg to y-axis [0.] now;
		turn torso to x-axis <-5.> now;
		turn LULeg to x-axis <20.> now;
		turn RULeg to x-axis <-82.> now;
		turn RLLeg to x-axis <31.> now;
		turn LLLeg to x-axis <28.> now;
		turn Head to x-axis <-8.> now;
		turn LUArm to x-axis <-17.> now;
		turn RUArm to x-axis <16.> now;
		turn RLArm to x-axis <-12.> now;
		turn LLArm to x-axis <-25.> now;
		sleep 59;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [1.] now;
		move RLLeg to y-axis [-1.] now;
		move LLLeg to y-axis [0.] now;
		turn Hip to x-axis <11.> now;
		turn torso to x-axis <-3.> now;
		turn LULeg to x-axis <24.> now;
		turn RULeg to x-axis <-68.> now;
		turn RLLeg to x-axis <26.> now;
		turn LLLeg to x-axis <25.> now;
		turn Head to x-axis <-8.> now;
		turn LUArm to x-axis <-23.> now;
		turn RUArm to x-axis <32.> now;
		turn RLArm to x-axis <-21.> now;
		turn LLArm to x-axis <-46.> now;
		sleep 55;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [2.] now;
		move RLLeg to y-axis [-1.] now;
		move LLLeg to y-axis [0.] now;
		turn torso to x-axis <0.> now;
		turn LULeg to x-axis <28.> now;
		turn RULeg to x-axis <-55.> now;
		turn RLLeg to x-axis <21.> now;
		turn LLLeg to x-axis <23.> now;
		turn Head to x-axis <-8.> now;
		turn LUArm to x-axis <-28.> now;
		turn RUArm to x-axis <47.> now;
		turn RLArm to x-axis <-29.> now;
		turn LLArm to x-axis <-66.> now;
		sleep 28;
	}
	if( TRUE )
	{
		move Hip to y-axis [-0.] now;
		move Hip to z-axis [2.] now;
		move RLLeg to y-axis [0.] - [0.] now;
		move LLLeg to y-axis [1.] now;
		turn torso to x-axis <3.> now;
		turn LULeg to x-axis <13.> now;
		turn RULeg to x-axis <-44.> now;
		turn RLLeg to x-axis <21.> now;
		turn LLLeg to x-axis <48.> now;
		turn Head to x-axis <-4.> now;
		turn LUArm to x-axis <-28.> now;
		turn RUArm to x-axis <48.> now;
		turn RLArm to x-axis <-24.> now;
		turn LLArm to x-axis <-73.> now;
		sleep 27;
	}
	if( TRUE )
	{
		move Hip to y-axis [-1.] now;
		move Hip to z-axis [2.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [1.] now;
		turn torso to x-axis <5.> now;
		turn LULeg to x-axis <-2.> now;
		turn RULeg to x-axis <-32.> now;
		turn RLLeg to x-axis <21.> now;
		turn LLLeg to x-axis <73.> now;
		turn Head to x-axis <0.> now;
		turn LUArm to x-axis <-27.> now;
		turn RUArm to x-axis <48.> now;
		turn RLArm to x-axis <-19.> now;
		turn LLArm to x-axis <-80.> now;
		sleep 56;
	}
	if( TRUE )
	{
		move Hip to y-axis [-1.] now;
		move Hip to z-axis [2.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [1.] now;
		turn torso to x-axis <8.> now;
		turn LULeg to x-axis <-5.> now;
		turn RULeg to x-axis <-22.> now;
		turn RLLeg to x-axis <11.> now;
		turn LLLeg to x-axis <58.> now;
		turn Head to x-axis <5.> now;
		turn LUArm to x-axis <-25.> now;
		turn RUArm to x-axis <34.> now;
		turn RLArm to x-axis <-16.> now;
		turn LLArm to x-axis <-72.> now;
		sleep 55;
	}
	if( TRUE )
	{
		move Hip to y-axis [-1.] now;
		move Hip to z-axis [1.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [2.] now;
		turn torso to x-axis <10.> now;
		turn LULeg to x-axis <-8.> now;
		turn RULeg to x-axis <-12.> now;
		turn RLLeg to x-axis <1.> now;
		turn LLLeg to x-axis <44.> now;
		turn Head to x-axis <9.> now;
		turn LUArm to x-axis <-23.> now;
		turn RUArm to x-axis <20.> now;
		turn RLArm to x-axis <-14.> now;
		turn LLArm to x-axis <-64.> now;
		sleep 58;
	}
	move Hip to y-axis [-0.] now;
	move Hip to z-axis [0.] now;
	move RLLeg to y-axis [0.] now;
	move LLLeg to y-axis [1.] now;
	turn torso to x-axis <8.> now;
	turn LULeg to x-axis <-26.> now;
	turn RULeg to x-axis <-4.> now;
	turn RLLeg to x-axis <10.> now;
	turn Head to x-axis <5.> now;
	turn LUArm to x-axis <-20.> now;
	turn RUArm to x-axis <5.> now;
	turn RLArm to x-axis <-11.> now;
	turn LLArm to x-axis <-50.> now;
	sleep 55;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

walklegs()
{
	if( TRUE )
	{
		move Hip to y-axis [-0.] now;
		move Hip to z-axis [-1.] now;
		move RLLeg to y-axis [0.] now;
		move LLLeg to y-axis [1.] now;
		turn Hip to x-axis <11.> now;
		turn LULeg to x-axis <-44.> now;
		turn RULeg to x-axis <4.> now;
		turn RLLeg to x-axis <19.> now;
		turn LLLeg to x-axis <44.> now;
		sleep 82;
	}
	if( TRUE )
	{
		move Hip to y-axis [-0.] now;
		move Hip to z-axis [-1.] now;
		turn LULeg to x-axis <-57.> now;
		turn RULeg to x-axis <11.> now;
		turn RLLeg to x-axis <21.> now;
		turn LLLeg to x-axis <44.> now;
		sleep 56;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [-0.] now;
		turn LULeg to x-axis <-71.> now;
		turn RULeg to x-axis <17.> now;
		turn RLLeg to x-axis <23.> now;
		turn LLLeg to x-axis <44.> now;
		sleep 56;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [-0.] now;
		move LLLeg to y-axis [1.] now;
		turn LULeg to x-axis <-76.> now;
		turn RULeg to x-axis <19.> now;
		turn RLLeg to x-axis <25.> now;
		turn LLLeg to x-axis <37.> now;
		sleep 55;
	}
	if( TRUE )
	{
		move Hip to y-axis [1.] now;
		move Hip to z-axis [0.] now;
		move LLLeg to y-axis [-1.] now;
		turn LULeg to x-axis <-82.> now;
		turn RULeg to x-axis <21.> now;
		turn RLLeg to x-axis <28.> now;
		turn LLLeg to x-axis <31.> now;
		sleep 59;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [1.] now;
		move LLLeg to y-axis [-1.] now;
		turn LULeg to x-axis <-68.> now;
		turn RULeg to x-axis <29.> now;
		turn RLLeg to x-axis <25.> now;
		turn LLLeg to x-axis <26.> now;
		sleep 57;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [2.] now;
		move LLLeg to y-axis [-1.] now;
		turn LULeg to x-axis <-55.> now;
		turn RULeg to x-axis <38.> now;
		turn RLLeg to x-axis <23.> now;
		turn LLLeg to x-axis <21.> now;
		sleep 26;
	}
	if( TRUE )
	{
		move Hip to y-axis [-0.] now;
		move Hip to z-axis [2.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [0.] - [0.] now;
		turn Hip to x-axis <11.> now;
		turn LULeg to x-axis <-44.> now;
		turn RULeg to x-axis <18.> now;
		turn RLLeg to x-axis <48.> now;
		turn LLLeg to x-axis <21.> now;
		sleep 27;
	}
	if( TRUE )
	{
		move Hip to y-axis [-1.] now;
		move Hip to z-axis [2.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [1.] now;
		turn LULeg to x-axis <-32.> now;
		turn RULeg to x-axis <-2.> now;
		turn RLLeg to x-axis <73.> now;
		turn LLLeg to x-axis <21.> now;
		sleep 56;
	}
	if( TRUE )
	{
		move Hip to y-axis [-1.] now;
		move Hip to z-axis [2.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [1.] now;
		turn LULeg to x-axis <-22.> now;
		turn RULeg to x-axis <-5.> now;
		turn RLLeg to x-axis <58.> now;
		turn LLLeg to x-axis <11.> now;
		sleep 55;
	}
	if( TRUE )
	{
		move Hip to y-axis [-1.] now;
		move Hip to z-axis [1.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [1.] now;
		turn LULeg to x-axis <-12.> now;
		turn RULeg to x-axis <-8.> now;
		turn RLLeg to x-axis <44.> now;
		turn LLLeg to x-axis <1.> now;
		sleep 58;
	}
	if( TRUE )
	{
		move Hip to y-axis [-0.] now;
		move Hip to z-axis [0.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [0.] now;
		turn LULeg to x-axis <-4.> now;
		turn RULeg to x-axis <-26.> now;
		turn LLLeg to x-axis <10.> now;
		sleep 57;
	}
	if( TRUE )
	{
		move Hip to y-axis [-0.] now;
		move Hip to z-axis [-1.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [0.] now;
		turn Hip to x-axis <11.> now;
		turn LULeg to x-axis <4.> now;
		turn RULeg to x-axis <-44.> now;
		turn LLLeg to x-axis <19.> now;
		sleep 87;
	}
	if( TRUE )
	{
		move Hip to y-axis [-0.] now;
		move Hip to z-axis [-1.] now;
		move RLLeg to y-axis [1.] now;
		turn LULeg to x-axis <12.> now;
		turn RULeg to x-axis <-57.> now;
		turn LLLeg to x-axis <21.> now;
		sleep 55;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [-0.] now;
		move RLLeg to y-axis [1.] now;
		turn LULeg to x-axis <20.> now;
		turn RULeg to x-axis <-71.> now;
		turn LLLeg to x-axis <23.> now;
		sleep 56;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [-0.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [0.] now;
		turn LULeg to x-axis <20.> now;
		turn RULeg to x-axis <-76.> now;
		turn RLLeg to x-axis <37.> now;
		turn LLLeg to x-axis <25.> now;
		sleep 57;
	}
	if( TRUE )
	{
		move Hip to y-axis [1.] now;
		move Hip to z-axis [0.] now;
		move RLLeg to y-axis [-1.] now;
		move LLLeg to y-axis [0.] now;
		turn LULeg to x-axis <20.> now;
		turn RULeg to x-axis <-82.> now;
		turn RLLeg to x-axis <31.> now;
		turn LLLeg to x-axis <28.> now;
		sleep 59;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [1.] now;
		move RLLeg to y-axis [-1.] now;
		move LLLeg to y-axis [0.] now;
		turn Hip to x-axis <11.> now;
		turn LULeg to x-axis <24.> now;
		turn RULeg to x-axis <-68.> now;
		turn RLLeg to x-axis <26.> now;
		turn LLLeg to x-axis <25.> now;
		sleep 55;
	}
	if( TRUE )
	{
		move Hip to y-axis [0.] now;
		move Hip to z-axis [2.] now;
		move RLLeg to y-axis [-1.] now;
		move LLLeg to y-axis [0.] now;
		turn LULeg to x-axis <28.> now;
		turn RULeg to x-axis <-55.> now;
		turn RLLeg to x-axis <21.> now;
		turn LLLeg to x-axis <23.> now;
		sleep 28;
	}
	if( TRUE )
	{
		move Hip to y-axis [-0.] now;
		move Hip to z-axis [2.] now;
		move RLLeg to y-axis [0.] - [0.] now;
		move LLLeg to y-axis [1.] now;
		turn LULeg to x-axis <13.> now;
		turn RULeg to x-axis <-44.> now;
		turn RLLeg to x-axis <21.> now;
		turn LLLeg to x-axis <48.> now;
		sleep 27;
	}
	if( TRUE )
	{
		move Hip to y-axis [-1.] now;
		move Hip to z-axis [2.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [1.] now;
		turn LULeg to x-axis <-2.> now;
		turn RULeg to x-axis <-32.> now;
		turn RLLeg to x-axis <21.> now;
		turn LLLeg to x-axis <73.> now;
		sleep 56;
	}
	if( TRUE )
	{
		move Hip to y-axis [-1.] now;
		move Hip to z-axis [2.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [1.] now;
		turn LULeg to x-axis <-5.> now;
		turn RULeg to x-axis <-22.> now;
		turn RLLeg to x-axis <11.> now;
		turn LLLeg to x-axis <58.> now;
		sleep 55;
	}
	if( TRUE )
	{
		move Hip to y-axis [-1.] now;
		move Hip to z-axis [1.] now;
		move RLLeg to y-axis [1.] now;
		move LLLeg to y-axis [2.] now;
		turn LULeg to x-axis <-8.> now;
		turn RULeg to x-axis <-12.> now;
		turn RLLeg to x-axis <1.> now;
		turn LLLeg to x-axis <44.> now;
		sleep 58;
	}
	move Hip to y-axis [-0.] now;
	move Hip to z-axis [0.] now;
	move RLLeg to y-axis [0.] now;
	move LLLeg to y-axis [1.] now;
	turn LULeg to x-axis <-26.> now;
	turn RULeg to x-axis <-4.> now;
	turn RLLeg to x-axis <10.> now;
	sleep 55;
}

Go()
{
	Static_Var_2 = 1;
	turn torso to y-axis Static_Var_5 speed <250.>;
	turn LLArm to x-axis <-90.> speed <150.>;
	wait-for-turn torso around y-axis;
	wait-for-turn LLArm around x-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn torso to y-axis <0.> speed <250.>;
	turn LLArm to x-axis <0.> speed <150.>;
	wait-for-turn torso around y-axis;
	wait-for-turn LLArm around x-axis;
	Static_Var_2 = 0;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	Static_Var_6 = 1;
	Static_Var_7 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_7 )
	{
		Static_Var_6 = requestedstate;
		return (0);
	}
	Static_Var_7 = 1;
	currentstate = Static_Var_6;
	Static_Var_6 = requestedstate;
	while( Static_Var_6 != currentstate )
	{
		if( Static_Var_6 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_6 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_7 = 0;
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = Static_Var_1;
		aiming = Static_Var_2;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_3 = 1;
				call-script walklegs();
			}
			if( !aiming )
			{
				Static_Var_3 = 0;
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_3 = 1;
			if( justmoved )
			{
				move Hip to y-axis [0.] speed [1.];
				turn Hip to x-axis <0.> speed <200.>;
				turn RULeg to x-axis <0.> speed <200.>;
				turn RLLeg to x-axis <0.> speed <200.>;
				turn LULeg to x-axis <0.> speed <200.>;
				turn LLLeg to x-axis <0.> speed <200.>;
				if( !aiming )
				{
					turn torso to y-axis <0.> speed <90.>;
					turn RLArm to x-axis <0.> speed <200.>;
					turn RUArm to x-axis <0.> speed <200.>;
					turn LLArm to x-axis <0.> speed <200.>;
					turn LUArm to x-axis <0.> speed <200.>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	hide flare;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	Static_Var_3 = 1;
	Static_Var_5 = 0;
	Static_Var_4 = 3000;
	call-script InitState();
	start-script MotionControl();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_5 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

StartMoving()
{
	Static_Var_1 = 1;
}

StopMoving()
{
	Static_Var_1 = 0;
}

QueryNanoPiece(piecenum)
{
	piecenum = flare;
}

TargetHeading(Func_Var_1)
{
	Static_Var_5 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode Head type BITMAPONLY | BITMAP1;
		explode Hip type BITMAPONLY | BITMAP2;
		explode LLArm type BITMAPONLY | BITMAP3;
		explode LLLeg type BITMAPONLY | BITMAP4;
		explode LUArm type BITMAPONLY | BITMAP5;
		explode LULeg type BITMAPONLY | BITMAP1;
		explode RLArm type BITMAPONLY | BITMAP2;
		explode RLLeg type BITMAPONLY | BITMAP3;
		explode RUArm type BITMAPONLY | BITMAP4;
		explode RULeg type BITMAPONLY | BITMAP5;
		explode Thrust type BITMAPONLY | BITMAP1;
		explode torso type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode Head type FALL | BITMAP1;
		explode Hip type FALL | BITMAP2;
		explode LLArm type FALL | BITMAP3;
		explode LLLeg type FALL | BITMAP4;
		explode LUArm type FALL | BITMAP5;
		explode LULeg type FALL | BITMAP1;
		explode RLArm type FALL | BITMAP2;
		explode RLLeg type FALL | BITMAP3;
		explode RUArm type FALL | BITMAP4;
		explode RULeg type FALL | BITMAP5;
		explode Thrust type FALL | BITMAP1;
		explode torso type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode Head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Hip type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode LLArm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode LLLeg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode LUArm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode LULeg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode RLArm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode RLLeg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode RUArm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode RULeg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode Thrust type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode torso type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode Head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode Hip type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode LLArm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode LLLeg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode LUArm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode LULeg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode RLArm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode RLLeg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode RUArm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode RULeg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode Thrust type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}
