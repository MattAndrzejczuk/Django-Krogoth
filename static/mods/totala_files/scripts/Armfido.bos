#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  gauss, turret, flash, torso, ruparm, luparm, pelvis, lthigh,
       rthigh, rleg, rfoot, lleg, lfoot, lloarm, lhand, rloarm,
       rhand, ground;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


walk()
{
	while( TRUE )
	{
		if( TRUE )
		{
			move torso to y-axis [0.] now;
			move ruparm to y-axis [0.] now;
			move ruparm to z-axis [0.] now;
			move luparm to y-axis [-0.] now;
			move luparm to z-axis [0.] now;
			turn pelvis to z-axis <-4.> now;
			turn torso to z-axis <5.> now;
			turn lthigh to x-axis <34.> now;
			turn rthigh to x-axis <0.> now;
			turn rleg to x-axis <43.> now;
			turn rfoot to x-axis <-32.> now;
			turn lleg to x-axis <7.> now;
			turn lfoot to x-axis <-12.> now;
			turn ruparm to x-axis <23.> now;
			turn luparm to x-axis <-51.> now;
			turn lloarm to x-axis <21.> now;
			turn lhand to x-axis <36.> now;
			turn rloarm to x-axis <0.> now;
			turn rhand to x-axis <-6.> now;
			sleep 130;
		}
		if( TRUE )
		{
			move torso to y-axis [0.] now;
			move ruparm to y-axis [1.] now;
			move ruparm to z-axis [-0.] now;
			move luparm to y-axis [0.] now;
			move luparm to z-axis [0.] now;
			turn pelvis to z-axis <-2.> now;
			turn torso to z-axis <2.> now;
			turn lthigh to x-axis <47.> now;
			turn rthigh to x-axis <7.> now;
			turn rleg to x-axis <-29.> now;
			turn rfoot to x-axis <17.> now;
			turn lleg to x-axis <-6.> now;
			turn lfoot to x-axis <0.> now;
			turn ruparm to x-axis <7.> now;
			turn luparm to x-axis <-29.> now;
			turn lloarm to x-axis <13.> now;
			turn lhand to x-axis <16.> now;
			turn rloarm to x-axis <4.> now;
			turn rhand to x-axis <106.> now;
			sleep 130;
		}
		if( TRUE )
		{
			move torso to y-axis [0.] now;
			move ruparm to z-axis [-0.] now;
			move luparm to z-axis [0.] now;
			turn pelvis to z-axis <-1.> now;
			turn torso to z-axis <-1.> now;
			turn lthigh to x-axis <51.> now;
			turn rthigh to x-axis <9.> now;
			turn rleg to x-axis <11.> now;
			turn rfoot to x-axis <-10.> now;
			turn lleg to x-axis <0.> now;
			turn lfoot to x-axis <21.> now;
			turn luparm to x-axis <0.> now;
			turn lloarm to x-axis <0.> now;
			turn lhand to x-axis <0.> now;
			turn rloarm to x-axis <-41.> now;
			turn rhand to x-axis <143.> now;
			sleep 130;
		}
		if( TRUE )
		{
			move torso to y-axis [0.] now;
			move ruparm to z-axis [0.] now;
			turn pelvis to z-axis <2.> now;
			turn torso to z-axis <-5.> now;
			turn lthigh to x-axis <1.> now;
			turn rthigh to x-axis <21.> now;
			turn rleg to x-axis <4.> now;
			turn rfoot to x-axis <-15.> now;
			turn lleg to x-axis <56.> now;
			turn lfoot to x-axis <1.> now;
			turn ruparm to x-axis <-18.> now;
			turn luparm to x-axis <18.> now;
			turn lloarm to x-axis <-3.> now;
			turn lhand to x-axis <-5.> now;
			sleep 130;
		}
		if( TRUE )
		{
			move torso to y-axis [0.] now;
			move ruparm to y-axis [-0.] now;
			move ruparm to z-axis [0.] now;
			turn pelvis to z-axis <4.> now;
			turn torso to z-axis <-4.> now;
			turn lthigh to x-axis <-16.> now;
			turn rthigh to x-axis <36.> now;
			turn rfoot to x-axis <-9.> now;
			turn lleg to x-axis <55.> now;
			turn lfoot to x-axis <-22.> now;
			turn ruparm to x-axis <-49.> now;
			turn luparm to x-axis <20.> now;
			turn lloarm to x-axis <9.> now;
			turn lhand to x-axis <-17.> now;
			turn rloarm to x-axis <14.> now;
			turn rhand to x-axis <46.> now;
			sleep 130;
		}
		if( TRUE )
		{
			move torso to y-axis [0.] now;
			move ruparm to z-axis [0.] now;
			move luparm to y-axis [1.] now;
			turn pelvis to z-axis <2.> now;
			turn torso to z-axis <-2.> now;
			turn lthigh to x-axis <0.> now;
			turn rthigh to x-axis <46.> now;
			turn rfoot to x-axis <6.> now;
			turn lleg to x-axis <0.> now;
			turn lfoot to x-axis <0.> now;
			turn ruparm to x-axis <-34.> now;
			turn luparm to x-axis <11.> now;
			turn lloarm to x-axis <0.> now;
			turn lhand to x-axis <117.> now;
			turn rhand to x-axis <20.> now;
			sleep 130;
		}
		if( TRUE )
		{
			move torso to y-axis [0.] now;
			move ruparm to z-axis [0.] now;
			move luparm to y-axis [1.] now;
			turn pelvis to z-axis <1.> now;
			turn torso to z-axis <1.> now;
			turn lthigh to x-axis <11.> now;
			turn rthigh to x-axis <60.> now;
			turn rfoot to x-axis <11.> now;
			turn lleg to x-axis <13.> now;
			turn lfoot to x-axis <-15.> now;
			turn ruparm to x-axis <5.> now;
			turn luparm to x-axis <-9.> now;
			turn lloarm to x-axis <-29.> now;
			turn lhand to x-axis <149.> now;
			turn rloarm to x-axis <-6.> now;
			turn rhand to x-axis <7.> now;
			sleep 130;
		}
		move torso to y-axis [0.] now;
		move ruparm to z-axis [0.] now;
		move luparm to y-axis [0.] now;
		turn pelvis to z-axis <-2.> now;
		turn torso to z-axis <5.> now;
		turn lthigh to x-axis <37.> now;
		turn rthigh to x-axis <27.> now;
		turn rleg to x-axis <39.> now;
		turn lleg to x-axis <-0.> now;
		turn lfoot to x-axis <-17.> now;
		turn luparm to x-axis <-21.> now;
		turn lloarm to x-axis <-40.> now;
		turn lhand to x-axis <90.> now;
		turn rloarm to x-axis <4.> now;
		turn rhand to x-axis <-10.> now;
		sleep 130;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flash;
	dont-cache flash;
	Static_Var_1 = 3000;
	start-script SmokeUnit();
	Static_Var_2 = 0;
	Static_Var_3 = 0;
}

Reload()
{
	sleep 2450;
	Static_Var_3 = 0;
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	start-script walk();
}

StopMoving()
{
	signal 2;
}

SweetSpot(piecenum)
{
	piecenum = gauss;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	set-signal-mask 0;
	turn turret to y-axis <0.> speed <90.>;
	turn gauss to x-axis <0.> speed <50.>;
	wait-for-turn turret around y-axis;
	wait-for-turn gauss around x-axis;
	Static_Var_2 = 0;
}

AimPrimary(heading, pitch)
{
	if( Static_Var_2 )
	{
		return (0);
	}
	signal 4;
	set-signal-mask 4;
	while( Static_Var_3 )
	{
		sleep 100;
	}
	turn turret to y-axis heading speed <150.>;
	turn gauss to x-axis <0.> - pitch speed <50.>;
	wait-for-turn turret around y-axis;
	wait-for-turn gauss around x-axis;
	if( Static_Var_2 )
	{
		return (0);
	}
	start-script RestoreAfterDelay();
	if( Static_Var_2 )
	{
		return (0);
	}
	return (1);
}

AimTertiary(heading, pitch)
{
	Static_Var_2 = 1;
	signal 4;
	set-signal-mask 4;
	stop-spin turret around y-axis;
	stop-spin gauss around x-axis;
	while( Static_Var_3 )
	{
		sleep 100;
	}
	turn turret to y-axis heading speed <150.>;
	turn gauss to x-axis <0.> - pitch speed <50.>;
	wait-for-turn turret around y-axis;
	wait-for-turn gauss around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

FirePrimary()
{
	Static_Var_3 = 1;
	show flash;
	sleep 150;
	hide flash;
	start-script Reload();
}

FireTertiary()
{
	Static_Var_3 = 1;
	show flash;
	sleep 150;
	hide flash;
	start-script Reload();
	Static_Var_2 = 0;
}

TargetCleared(Func_Var_1)
{
	Static_Var_2 = 0;
}

QueryPrimary(piecenum)
{
	piecenum = flash;
}

QueryTertiary(piecenum)
{
	piecenum = flash;
}

Killed(severity, corpsetype)
{
	hide flash;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode flash type BITMAPONLY | BITMAP1;
		explode gauss type BITMAPONLY | BITMAP2;
		explode ground type BITMAPONLY | BITMAP3;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode lhand type BITMAPONLY | BITMAP5;
		explode lleg type BITMAPONLY | BITMAP1;
		explode lloarm type BITMAPONLY | BITMAP2;
		explode lthigh type BITMAPONLY | BITMAP3;
		explode luparm type BITMAPONLY | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type BITMAPONLY | BITMAP1;
		explode rhand type BITMAPONLY | BITMAP2;
		explode rleg type BITMAPONLY | BITMAP3;
		explode rloarm type BITMAPONLY | BITMAP4;
		explode rthigh type BITMAPONLY | BITMAP5;
		explode ruparm type BITMAPONLY | BITMAP1;
		explode torso type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode flash type FALL | BITMAP1;
		explode gauss type SHATTER | BITMAP2;
		explode ground type FALL | BITMAP3;
		explode lfoot type FALL | BITMAP4;
		explode lhand type FALL | BITMAP5;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lloarm type FALL | BITMAP2;
		explode lthigh type FALL | BITMAP3;
		explode luparm type FALL | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type FALL | BITMAP1;
		explode rhand type FALL | BITMAP2;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rloarm type FALL | BITMAP4;
		explode rthigh type FALL | BITMAP5;
		explode ruparm type FALL | BITMAP1;
		explode torso type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode flash type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gauss type SHATTER | BITMAP2;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode torso type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode flash type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gauss type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode pelvis type BITMAPONLY | BITMAP5;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode torso type BITMAPONLY | BITMAP2;
	explode turret type BITMAPONLY | BITMAP3;
}
