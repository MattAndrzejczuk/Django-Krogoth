#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad1, pad2, dish, wake1, wake2, silo, collar,
       wedge, anti;

static-var  Static_Var_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	Static_Var_1 = 0;
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
}

Activate()
{
	spin dish around y-axis speed <60.>;
}

Deactivate()
{
	stop-spin dish around y-axis;
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal 2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryLandingPad(Func_Var_1, Func_Var_2)
{
	Func_Var_1 = 1;
	Func_Var_2 = 2;
	Static_Var_1 = !Static_Var_1;
	if( Static_Var_1 )
	{
		Func_Var_1 = 2;
		Func_Var_2 = 1;
	}
}

AimPrimary(heading, pitch)
{
	return (1);
}

FirePrimary()
{
	sleep 150;
}

QueryPrimary(piecenum)
{
	piecenum = anti;
}

AimFromPrimary(piecenum)
{
	piecenum = anti;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode dish type BITMAPONLY | BITMAP2;
		explode pad1 type BITMAPONLY | BITMAP3;
		explode pad2 type BITMAPONLY | BITMAP4;
		explode wake1 type BITMAPONLY | BITMAP5;
		explode wake2 type BITMAPONLY | BITMAP1;
		explode silo type BITMAPONLY | BITMAP3;
		explode collar type BITMAPONLY | BITMAP4;
		explode wedge type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode dish type SHATTER | BITMAP2;
		explode pad1 type FALL | BITMAP3;
		explode pad2 type FALL | BITMAP4;
		explode wake1 type FALL | BITMAP5;
		explode wake2 type FALL | BITMAP1;
		explode silo type SHATTER | BITMAP3;
		explode collar type FALL | BITMAP4;
		explode wedge type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode dish type SHATTER | BITMAP2;
		explode pad1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pad2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode silo type SHATTER | BITMAP2;
		explode collar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wedge type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode dish type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode pad1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pad2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode silo type SHATTER | BITMAP2;
	explode collar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wedge type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
