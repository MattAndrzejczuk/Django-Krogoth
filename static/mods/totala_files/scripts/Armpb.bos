#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, dome, post, gun, barrel, flare;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Go()
{
	set ARMORED to 0;
	turn dome to x-axis <-135.> speed <550.>;
	wait-for-turn dome around x-axis;
	move post to y-axis [0.] speed [25.];
	move barrel to z-axis [0.] speed [15.];
	move gun to x-axis [2.] speed [5.];
	wait-for-move post along y-axis;
	wait-for-move barrel along z-axis;
	wait-for-move gun along x-axis;
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	turn gun to x-axis <0.> speed <90.>;
	move barrel to z-axis [-6.] speed [15.];
	move gun to x-axis [0.] speed [5.];
	wait-for-move gun along x-axis;
	wait-for-turn gun around x-axis;
	wait-for-move barrel along z-axis;
	move post to y-axis [-14.] speed [25.];
	wait-for-move post along y-axis;
	turn dome to x-axis <0.> speed <550.>;
	wait-for-turn dome around x-axis;
	set ARMORED to 1;
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	start-script RequestState(1);
}

Create()
{
	hide flare;
	dont-cache turret;
	dont-cache dome;
	dont-cache post;
	dont-cache gun;
	dont-cache barrel;
	dont-cache flare;
	dont-shade turret;
	dont-shade dome;
	dont-shade post;
	dont-shade gun;
	dont-shade barrel;
	dont-shade flare;
	Static_Var_2 = 2000;
	Static_Var_1 = 1;
	call-script InitState();
	start-script SmokeUnit();
	start-script RequestState(0);
	turn dome to x-axis <-135.> now;
	move gun to x-axis [2.] now;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RestoreAfterDelay();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <200.>;
	turn gun to x-axis <0.> - pitch speed <200.>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 150;
	hide flare;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode post type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP3;
		explode dome type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode post type BITMAPONLY | BITMAP3;
		explode gun type BITMAPONLY | BITMAP3;
		explode base type SHATTER | BITMAP1;
		explode dome type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode base type BITMAPONLY | BITMAP5;
		explode post type BITMAPONLY | BITMAP3;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode dome type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode base type BITMAPONLY | BITMAP5;
	explode post type BITMAPONLY | BITMAP3;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode dome type SHATTER | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
}
