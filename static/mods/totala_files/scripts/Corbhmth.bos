#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, fanbox, vent1, vent2, fan, turret, sleeve, barrel1,
       flare1, barrel2, flare2, barrel3, flare3;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

SmokeVents()
{
	signal 4;
	set-signal-mask 4;
	while( TRUE )
	{
		emit-sfx 257 from vent1;
		emit-sfx 257 from vent2;
		sleep 1000;
	}
}

Go()
{
	spin fan around y-axis speed <-250.>;
	start-script SmokeVents();
	set ACTIVATION to 100;
}

Stop()
{
	stop-spin fan around y-axis;
	signal 4;
	set ACTIVATION to 0;
}

InitState()
{
	Static_Var_4 = 1;
	Static_Var_5 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_5 )
	{
		Static_Var_4 = requestedstate;
		return (0);
	}
	Static_Var_5 = 1;
	currentstate = Static_Var_4;
	Static_Var_4 = requestedstate;
	while( Static_Var_4 != currentstate )
	{
		if( Static_Var_4 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_4 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_5 = 0;
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache barrel3;
	dont-shade flare1;
	dont-shade flare2;
	dont-shade flare3;
	dont-shade vent1;
	dont-shade vent2;
	dont-cache fan;
	dont-cache sleeve;
	Static_Var_1 = 0;
	Static_Var_3 = 0;
	Static_Var_2 = 12000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

ActivateAfterDelay()
{
	sleep 5000;
	set-signal-mask 0;
	start-script RequestState(0);
}

ResetFiretube()
{
	set-signal-mask 2;
	sleep Static_Var_2;
	Static_Var_1 = 0;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	start-script RequestState(1);
	wait-for-move barrel2 along z-axis;
	turn turret to y-axis heading speed <25.>;
	turn sleeve to x-axis <0.> - pitch speed <25.>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	while( Static_Var_3 )
	{
		wait-for-move barrel1 along z-axis;
		wait-for-move barrel2 along z-axis;
		wait-for-move barrel3 along z-axis;
		Static_Var_1 = 0;
		Static_Var_3 = 0;
	}
	start-script ResetFiretube();
	start-script ActivateAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_1 == 0 )
	{
		show flare1;
		move barrel1 to z-axis [-3.] now;
		sleep 150;
		hide flare1;
		move barrel1 to z-axis [0.] speed [1.];
	}
	if( Static_Var_1 == 1 )
	{
		show flare2;
		move barrel2 to z-axis [-3.] now;
		sleep 150;
		hide flare2;
		move barrel2 to z-axis [0.] speed [1.];
	}
	if( Static_Var_1 == 2 )
	{
		Static_Var_3 = 1;
		show flare3;
		move barrel3 to z-axis [-3.] now;
		sleep 150;
		hide flare3;
		move barrel3 to z-axis [0.] speed [1.];
	}
	++Static_Var_1;
}

QueryPrimary(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = flare1;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = flare2;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = flare3;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

TargetCleared(Func_Var_1)
{
	stop-spin turret around y-axis;
	stop-spin sleeve around x-axis;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide sleeve;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | BITMAP3;
		explode fanbox type BITMAPONLY | BITMAP1;
		explode vent1 type BITMAPONLY | BITMAP1;
		explode vent2 type BITMAPONLY | BITMAP1;
		explode fan type FALL | BITMAP1;
		explode turret type BITMAPONLY | BITMAP3;
		explode barrel1 type BITMAPONLY | BITMAP2;
		explode barrel2 type BITMAPONLY | BITMAP2;
		explode barrel3 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP3;
		explode fanbox type BITMAPONLY | BITMAP2;
		explode vent1 type BITMAPONLY | BITMAP2;
		explode vent2 type BITMAPONLY | BITMAP2;
		explode fan type FALL | BITMAP1;
		explode turret type FALL | SMOKE | BITMAP3;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP3;
		explode barrel3 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP3;
		explode fanbox type BITMAPONLY | BITMAP2;
		explode vent1 type BITMAPONLY | BITMAP2;
		explode vent2 type BITMAPONLY | BITMAP2;
		explode fan type FALL | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP3;
		explode barrel3 type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | BITMAP3;
	explode fanbox type BITMAPONLY | BITMAP2;
	explode vent1 type BITMAPONLY | BITMAP2;
	explode vent2 type BITMAPONLY | BITMAP2;
	explode fan type FALL | BITMAP2;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel1 type BITMAPONLY | BITMAP3;
	explode barrel2 type BITMAPONLY | BITMAP3;
	explode barrel3 type BITMAPONLY | BITMAP3;
}
