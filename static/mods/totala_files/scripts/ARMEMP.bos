#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, launch, Door1, Door2, Frame1, Frame2, Frame3, Frame4,
       Cover2, Cover1, dummy;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		move Door1 to x-axis [0.] now;
		move Door1 to x-axis [3.] speed [3.];
		move Door2 to x-axis [0.] now;
		move Door2 to x-axis [-3.] speed [3.];
		sleep 1033;
	}
	if( TRUE )
	{
		move Frame1 to x-axis [1.] speed [1.];
		move Frame2 to x-axis [1.] speed [1.];
		move Frame3 to x-axis [-1.] speed [1.];
		move Frame4 to x-axis [-1.] speed [1.];
		sleep 1036;
	}
	if( TRUE )
	{
		move Frame1 to x-axis [5.] speed [3.];
		move Frame2 to x-axis [5.] speed [3.];
		move Frame3 to x-axis [-5.] speed [3.];
		move Frame4 to x-axis [-5.] speed [3.];
		move Cover2 to x-axis [-2.] speed [1.];
		move Cover1 to x-axis [2.] speed [1.];
		turn Cover2 to z-axis <-75.> speed <73.>;
		turn Cover1 to z-axis <75.> speed <73.>;
		sleep 1034;
	}
	if( TRUE )
	{
		move Frame1 to x-axis [6.] speed [1.];
		move Frame2 to x-axis [6.] speed [1.];
		move Frame3 to x-axis [-6.] speed [1.];
		move Frame4 to x-axis [-6.] speed [1.];
		move Cover2 to x-axis [-3.] speed [1.];
		move Cover1 to x-axis [3.] speed [1.];
		turn Cover2 to z-axis <-90.> speed <14.>;
		turn Cover1 to z-axis <90.> speed <14.>;
		sleep 1036;
	}
	sleep 22;
}

deactivatescr()
{
	if( TRUE )
	{
		move Door1 to x-axis [3.] now;
		move Door2 to x-axis [-3.] now;
		move Frame1 to x-axis [6.] now;
		move Frame1 to x-axis [5.] speed [2.];
		move Frame2 to x-axis [6.] now;
		move Frame2 to x-axis [5.] speed [2.];
		move Frame3 to x-axis [-6.] now;
		move Frame3 to x-axis [-5.] speed [2.];
		move Frame4 to x-axis [-6.] now;
		move Frame4 to x-axis [-5.] speed [2.];
		move Cover2 to x-axis [-3.] now;
		move Cover2 to x-axis [-2.] speed [2.];
		move Cover1 to x-axis [3.] now;
		move Cover1 to x-axis [2.] speed [2.];
		turn Cover2 to z-axis <-90.> now;
		turn Cover2 to z-axis <-75.> speed <24.>;
		turn Cover1 to z-axis <90.> now;
		turn Cover1 to z-axis <75.> speed <24.>;
		sleep 607;
	}
	if( TRUE )
	{
		move Frame1 to x-axis [1.] speed [5.];
		move Frame2 to x-axis [1.] speed [5.];
		move Frame3 to x-axis [-1.] speed [5.];
		move Frame4 to x-axis [-1.] speed [5.];
		move Cover2 to x-axis [0.] speed [2.];
		move Cover1 to x-axis [0.] speed [2.];
		turn Cover2 to z-axis <0.> speed <123.>;
		turn Cover1 to z-axis <0.> speed <123.>;
		sleep 614;
	}
	if( TRUE )
	{
		move Frame1 to x-axis [0.] speed [2.];
		move Frame2 to x-axis [0.] speed [2.];
		move Frame3 to x-axis [0.] speed [2.];
		move Frame4 to x-axis [0.] speed [2.];
		sleep 610;
	}
	if( TRUE )
	{
		move Door1 to x-axis [0.] speed [5.];
		move Door2 to x-axis [0.] speed [5.];
		sleep 612;
	}
	sleep 17;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script activatescr();
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	sleep 4000;
	call-script deactivatescr();
	show dummy;
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	Static_Var_1 = 0;
	dont-shade base;
	dont-shade Door1;
	dont-shade Door2;
	dont-shade dummy;
	dont-shade Frame1;
	dont-shade Frame2;
	dont-shade Frame3;
	dont-shade Frame4;
	dont-shade Cover1;
	dont-shade Cover2;
	dont-cache Door1;
	dont-cache Door2;
	dont-cache dummy;
	dont-cache Frame1;
	dont-cache Frame2;
	dont-cache Frame3;
	dont-cache Frame4;
	dont-cache Cover1;
	dont-cache Cover2;
	Static_Var_2 = 3000;
	start-script SmokeUnit();
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	hide dummy;
	Static_Var_1 = 0;
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = launch;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode Door1 type BITMAPONLY | BITMAP2;
		explode Door2 type BITMAPONLY | BITMAP3;
		explode dummy type BITMAPONLY | BITMAP4;
		explode Frame1 type BITMAPONLY | BITMAP5;
		explode Frame2 type BITMAPONLY | BITMAP1;
		explode Frame3 type BITMAPONLY | BITMAP2;
		explode Frame4 type BITMAPONLY | BITMAP3;
		explode Cover1 type BITMAPONLY | BITMAP4;
		explode Cover2 type BITMAPONLY | BITMAP5;
		explode launch type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode Door1 type BITMAPONLY | BITMAP2;
		explode Door2 type BITMAPONLY | BITMAP3;
		explode dummy type BITMAPONLY | BITMAP4;
		explode Frame1 type BITMAPONLY | BITMAP5;
		explode Frame2 type BITMAPONLY | BITMAP1;
		explode Frame3 type BITMAPONLY | BITMAP2;
		explode Frame4 type SHATTER | BITMAP3;
		explode Cover1 type FALL | BITMAP4;
		explode Cover2 type FALL | BITMAP5;
		explode launch type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode Door1 type BITMAPONLY | BITMAP2;
		explode Door2 type BITMAPONLY | BITMAP3;
		explode dummy type BITMAPONLY | BITMAP4;
		explode Frame1 type BITMAPONLY | BITMAP5;
		explode Frame2 type BITMAPONLY | BITMAP1;
		explode Frame3 type BITMAPONLY | BITMAP2;
		explode Frame4 type SHATTER | BITMAP3;
		explode Cover1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode Cover2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode Door1 type BITMAPONLY | BITMAP2;
	explode Door2 type BITMAPONLY | BITMAP3;
	explode dummy type BITMAPONLY | BITMAP4;
	explode Frame1 type BITMAPONLY | BITMAP5;
	explode Frame2 type BITMAPONLY | BITMAP1;
	explode Frame3 type BITMAPONLY | BITMAP2;
	explode Frame4 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode Cover1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Cover2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode launch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
