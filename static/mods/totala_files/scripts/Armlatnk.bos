#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, lflare, lturret, rflare1, lgun, rturret, rgun;

static-var  Static_Var_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.>;
	turn base to z-axis anglez speed <50.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <20.>;
	turn base to x-axis <0.> speed <20.>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.>;
	turn base to x-axis Func_Var_1 speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

Create()
{
	hide lflare;
	Static_Var_1 = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	set-signal-mask 0;
	turn lturret to y-axis <0.> speed <150.>;
	turn lgun to x-axis <0.> speed <150.>;
	turn rturret to y-axis <0.> speed <150.>;
	turn rgun to x-axis <0.> speed <150.>;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn lturret to y-axis heading speed <150.>;
	turn lgun to x-axis <0.> - pitch speed <150.>;
	wait-for-turn lturret around y-axis;
	wait-for-turn lgun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn rturret to y-axis heading speed <300.>;
	turn rgun to x-axis <0.> - pitch speed <300.>;
	wait-for-turn rturret around y-axis;
	wait-for-turn rgun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 100;
}

FireTertiary()
{
	sleep 100;
}

AimFromPrimary(piecenum)
{
	piecenum = lturret;
}

AimFromTertiary(piecenum)
{
	piecenum = rturret;
}

QueryPrimary(piecenum)
{
	piecenum = lflare;
}

QueryTertiary(piecenum)
{
	piecenum = rflare1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide lflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode lgun type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode lflare type BITMAPONLY | BITMAP3;
		explode lturret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lgun type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode lflare type FALL | BITMAP3;
		explode lturret type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode lflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lturret type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode lflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lturret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
}
