#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  beam1, beam2, pad, base, layer3a, layer3b, layer3c, layer2a,
       layer2b, layer2c, layer1a, layer1b, layer1c, gun2, gun1, arm1,
       arm2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		turn layer3a to y-axis <0.> now;
		turn layer3a to y-axis <-89.> speed <240.>;
		turn layer3b to y-axis <0.> now;
		turn layer3b to y-axis <-89.> speed <241.>;
		turn layer3c to y-axis <0.> now;
		turn layer3c to y-axis <-89.> speed <241.>;
		sleep 372;
	}
	if( TRUE )
	{
		turn layer2a to y-axis <90.> speed <228.>;
		turn layer2b to y-axis <90.> speed <228.>;
		turn layer2c to y-axis <90.> speed <228.>;
		sleep 395;
	}
	if( TRUE )
	{
		turn layer1a to y-axis <-89.> speed <228.>;
		turn layer1b to y-axis <-89.> speed <228.>;
		turn layer1c to y-axis <-89.> speed <228.>;
		sleep 394;
	}
	if( TRUE )
	{
		turn layer1a to y-axis <-179.> speed <221.>;
		turn layer1b to y-axis <-179.> speed <220.>;
		turn layer1c to y-axis <-179.> speed <221.>;
		sleep 406;
	}
	if( TRUE )
	{
		move layer1b to z-axis [11.] speed [27.];
		move layer2b to z-axis [11.] speed [27.];
		move layer3b to z-axis [12.] speed [27.];
		sleep 421;
	}
	if( TRUE )
	{
		move layer1a to x-axis [-5.] speed [16.];
		move layer1c to x-axis [5.] speed [17.];
		move layer2a to x-axis [-5.] speed [16.];
		move layer2c to x-axis [6.] speed [17.];
		move layer3a to x-axis [-5.] speed [16.];
		move layer3c to x-axis [6.] speed [17.];
		move pad to z-axis [-2.] speed [7.];
		sleep 323;
	}
	if( TRUE )
	{
		move gun2 to x-axis [1.] speed [1.];
		move gun1 to x-axis [1.] speed [1.];
		turn arm1 to y-axis <-90.> speed <187.>;
		turn arm2 to y-axis <88.> speed <184.>;
		turn gun2 to x-axis <11.> speed <22.>;
		turn gun2 to y-axis <66.> speed <138.>;
		turn gun2 to z-axis <-2.> speed <4.>;
		turn gun1 to x-axis <-10.> speed <20.>;
		turn gun1 to y-axis <-66.> speed <138.>;
		turn gun1 to z-axis <-2.> speed <4.>;
		sleep 483;
	}
	sleep 21;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move layer1a to x-axis [-5.] now;
		move layer1b to z-axis [11.] now;
		move layer1c to x-axis [5.] now;
		move layer2a to x-axis [-5.] now;
		move layer2b to z-axis [11.] now;
		move layer2c to x-axis [6.] now;
		move layer3a to x-axis [-5.] now;
		move layer3b to z-axis [12.] now;
		move layer3c to x-axis [6.] now;
		move pad to z-axis [-2.] now;
		move gun2 to x-axis [1.] now;
		move gun2 to x-axis [0.] speed [1.];
		move gun1 to x-axis [1.] now;
		move gun1 to x-axis [0.] speed [2.];
		turn layer1a to y-axis <-180.> now;
		turn layer1b to y-axis <-179.> now;
		turn layer1c to y-axis <-180.> now;
		turn layer2a to y-axis <90.> now;
		turn layer2b to y-axis <90.> now;
		turn layer2c to y-axis <90.> now;
		turn layer3a to y-axis <-89.> now;
		turn layer3b to y-axis <-90.> now;
		turn layer3c to y-axis <-90.> now;
		turn arm1 to y-axis <-90.> now;
		turn arm1 to y-axis <0.> speed <216.>;
		turn arm2 to y-axis <89.> now;
		turn arm2 to y-axis <0.> speed <213.>;
		turn gun2 to x-axis <11.> now;
		turn gun2 to x-axis <0.> speed <26.>;
		turn gun2 to y-axis <67.> now;
		turn gun2 to y-axis <0.> speed <160.>;
		turn gun2 to z-axis <-2.> now;
		turn gun2 to z-axis <0.> speed <5.>;
		turn gun1 to x-axis <-10.> now;
		turn gun1 to x-axis <0.> speed <24.>;
		turn gun1 to y-axis <-67.> now;
		turn gun1 to y-axis <0.> speed <160.>;
		turn gun1 to z-axis <-2.> now;
		turn gun1 to z-axis <0.> speed <5.>;
		sleep 417;
	}
	if( TRUE )
	{
		move layer1a to x-axis [0.] speed [16.];
		move layer1c to x-axis [0.] speed [17.];
		move layer2a to x-axis [0.] speed [16.];
		move layer2c to x-axis [0.] speed [17.];
		move layer3a to x-axis [0.] speed [16.];
		move layer3c to x-axis [0.] speed [17.];
		move pad to z-axis [0.] speed [7.];
		sleep 321;
	}
	if( TRUE )
	{
		move layer1b to z-axis [0.] speed [27.];
		move layer2b to z-axis [0.] speed [27.];
		move layer3b to z-axis [0.] speed [27.];
		sleep 416;
	}
	if( TRUE )
	{
		turn layer1a to y-axis <-89.> speed <216.>;
		turn layer1b to y-axis <-89.> speed <215.>;
		turn layer1c to y-axis <-89.> speed <216.>;
		sleep 415;
	}
	if( TRUE )
	{
		turn layer1a to y-axis <0.> speed <222.>;
		turn layer1b to y-axis <0.> speed <222.>;
		turn layer1c to y-axis <0.> speed <222.>;
		sleep 404;
	}
	if( TRUE )
	{
		turn layer2a to y-axis <0.> speed <212.>;
		turn layer2b to y-axis <0.> speed <212.>;
		turn layer2c to y-axis <0.> speed <212.>;
		sleep 426;
	}
	if( TRUE )
	{
		turn layer3a to y-axis <0.> speed <225.>;
		turn layer3b to y-axis <0.> speed <226.>;
		turn layer3c to y-axis <0.> speed <226.>;
		sleep 397;
	}
	sleep 12;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache arm1;
	dont-cache arm2;
	dont-cache gun1;
	dont-cache gun2;
	dont-cache layer1a;
	dont-cache layer1b;
	dont-cache layer1c;
	dont-cache layer2a;
	dont-cache layer2b;
	dont-cache layer2c;
	dont-cache layer3a;
	dont-cache layer3b;
	dont-cache layer3c;
	dont-cache pad;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache arm1;
	cache arm2;
	cache gun1;
	cache gun2;
	cache layer1a;
	cache layer1b;
	cache layer1c;
	cache layer2a;
	cache layer2b;
	cache layer2c;
	cache layer3a;
	cache layer3b;
	cache layer3c;
	cache pad;
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	dont-shade arm1;
	dont-shade arm2;
	dont-shade pad;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade layer1a;
	dont-shade layer1b;
	dont-shade layer1c;
	dont-shade layer2a;
	dont-shade layer2b;
	dont-shade layer2c;
	dont-shade layer3a;
	dont-shade layer3b;
	dont-shade layer3c;
	dont-shade pad;
	Static_Var_2 = 0;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = beam1;
		Static_Var_1 = 1;
		return (0);
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = beam2;
		Static_Var_1 = 0;
	}
}

Demo()
{
	Static_Var_2 = 1;
}

Activate()
{
	signal 2;
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	if( !Static_Var_2 )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode beam1 type BITMAPONLY | BITMAP4;
		explode beam2 type BITMAPONLY | BITMAP5;
		explode gun1 type BITMAPONLY | BITMAP1;
		explode gun2 type BITMAPONLY | BITMAP2;
		explode layer1a type BITMAPONLY | BITMAP3;
		explode layer1b type BITMAPONLY | BITMAP4;
		explode layer1c type BITMAPONLY | BITMAP5;
		explode layer2a type BITMAPONLY | BITMAP1;
		explode layer2b type BITMAPONLY | BITMAP2;
		explode layer2c type BITMAPONLY | BITMAP3;
		explode layer3a type BITMAPONLY | BITMAP4;
		explode layer3b type BITMAPONLY | BITMAP5;
		explode layer3c type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm1 type FALL | BITMAP1;
		explode arm2 type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode beam1 type FALL | BITMAP4;
		explode beam2 type FALL | BITMAP5;
		explode gun1 type FALL | BITMAP1;
		explode gun2 type FALL | BITMAP2;
		explode layer1a type BITMAPONLY | BITMAP3;
		explode layer1b type BITMAPONLY | BITMAP4;
		explode layer1c type BITMAPONLY | BITMAP5;
		explode layer2a type BITMAPONLY | BITMAP1;
		explode layer2b type BITMAPONLY | BITMAP2;
		explode layer2c type SHATTER | BITMAP3;
		explode layer3a type FALL | BITMAP4;
		explode layer3b type FALL | BITMAP5;
		explode layer3c type FALL | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode layer1a type BITMAPONLY | BITMAP3;
		explode layer1b type BITMAPONLY | BITMAP4;
		explode layer1c type BITMAPONLY | BITMAP5;
		explode layer2a type BITMAPONLY | BITMAP1;
		explode layer2b type BITMAPONLY | BITMAP2;
		explode layer2c type SHATTER | BITMAP3;
		explode layer3a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode layer3b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode layer3c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode layer1a type BITMAPONLY | BITMAP3;
	explode layer1b type BITMAPONLY | BITMAP4;
	explode layer1c type BITMAPONLY | BITMAP5;
	explode layer2a type BITMAPONLY | BITMAP1;
	explode layer2b type BITMAPONLY | BITMAP2;
	explode layer2c type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode layer3a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode layer3b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode layer3c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode pad type BITMAPONLY | BITMAP2;
}
