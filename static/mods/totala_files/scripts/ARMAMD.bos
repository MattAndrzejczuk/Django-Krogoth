#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, rocket1, rocket2, rocket3, turret, door1, door2, door3,
       door4;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0.> now;
		turn door1 to z-axis <-129.> speed <73.>;
		turn door2 to z-axis <0.> now;
		turn door2 to z-axis <131.> speed <74.>;
		turn door3 to x-axis <0.> now;
		turn door3 to x-axis <-128.> speed <72.>;
		turn door4 to x-axis <0.> now;
		turn door4 to x-axis <129.> speed <73.>;
		sleep 1768;
		spin turret around y-axis speed <30.>;
	}
	sleep 3;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <-130.> now;
		turn door1 to z-axis <0.> speed <73.>;
		turn door2 to z-axis <131.> now;
		turn door2 to z-axis <0.> speed <74.>;
		turn door3 to x-axis <-129.> now;
		turn door3 to x-axis <0.> speed <73.>;
		turn door4 to x-axis <130.> now;
		turn door4 to x-axis <0.> speed <73.>;
		sleep 1762;
	}
	sleep 14;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 4 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from door1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from door2;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from door3;
			}
			if( Func_Var_4 == 4 )
			{
				emit-sfx smoketype from door4;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	dont-cache rocket1;
	dont-cache rocket2;
	dont-cache rocket3;
	dont-cache turret;
	call-script activatescr();
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
	cache door1;
	cache door2;
	cache door3;
	cache door4;
	cache rocket1;
	cache rocket2;
	cache rocket3;
	cache turret;
}

InitState()
{
	Static_Var_4 = 1;
	Static_Var_5 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_5 )
	{
		Static_Var_4 = requestedstate;
		return (0);
	}
	Static_Var_5 = 1;
	currentstate = Static_Var_4;
	Static_Var_4 = requestedstate;
	while( Static_Var_4 != currentstate )
	{
		if( Static_Var_4 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_4 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_5 = 0;
}

Create()
{
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade rocket1;
	dont-shade rocket2;
	dont-shade rocket3;
	dont-shade turret;
	Static_Var_1 = 0;
	Static_Var_3 = 1;
	Static_Var_2 = 3000;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	return (1);
}

FirePrimary()
{
	if( Static_Var_3 == 1 )
	{
		hide rocket1;
		show rocket2;
		show rocket3;
	}
	if( Static_Var_3 == 2 )
	{
		show rocket1;
		hide rocket2;
		show rocket3;
	}
	if( Static_Var_3 == 3 )
	{
		show rocket1;
		show rocket2;
		hide rocket3;
	}
	++Static_Var_3;
	if( Static_Var_3 == 4 )
	{
		Static_Var_3 = 1;
	}
}

QueryPrimary(piecenum)
{
	if( Static_Var_3 == 1 )
	{
		piecenum = rocket1;
	}
	if( Static_Var_3 == 2 )
	{
		piecenum = rocket2;
	}
	if( Static_Var_3 == 3 )
	{
		piecenum = rocket3;
	}
}

AimFromPrimary(piecenum)
{
	if( Static_Var_3 == 1 )
	{
		piecenum = rocket1;
	}
	if( Static_Var_3 == 2 )
	{
		piecenum = rocket2;
	}
	if( Static_Var_3 == 3 )
	{
		piecenum = rocket3;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode door3 type BITMAPONLY | BITMAP4;
		explode door4 type BITMAPONLY | BITMAP5;
		explode rocket1 type BITMAPONLY | BITMAP1;
		explode rocket2 type BITMAPONLY | BITMAP2;
		explode rocket3 type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode door3 type BITMAPONLY | BITMAP4;
		explode door4 type BITMAPONLY | BITMAP5;
		explode rocket1 type FALL | BITMAP1;
		explode rocket2 type FALL | BITMAP2;
		explode rocket3 type FALL | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode door3 type BITMAPONLY | BITMAP4;
		explode door4 type BITMAPONLY | BITMAP5;
		explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rocket3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode door1 type BITMAPONLY | BITMAP2;
	explode door2 type BITMAPONLY | BITMAP3;
	explode door3 type BITMAPONLY | BITMAP4;
	explode door4 type BITMAPONLY | BITMAP5;
	explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rocket3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
}
