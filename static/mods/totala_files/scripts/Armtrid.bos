#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, struts, fan, turret, gun, sleeve, barrel1, barrel2,
       barrel3, flare, shell, vent1, vent2, wake01, wake02, wake03,
       wake04, wake05, wake06, wake07, wake08, wake09, wake10, wake11,
       wake12, wake13, wake14, wake15, wake16;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		if( Static_Var_1 )
		{
			healthpercent = get HEALTH;
			if( healthpercent < 66 )
			{
				smoketype = 256 | 2;
				if( Rand( 1, 66 ) < healthpercent )
				{
					smoketype = 256 | 1;
				}
				emit-sfx smoketype from base;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

SpinSlow()
{
	stop-spin fan around y-axis decelerate <4.>;
}

SpinFast()
{
	spin fan around y-axis speed <600.> accelerate <50.>;
}

Go()
{
	if( !Static_Var_1 )
	{
		call-script SpinFast();
		Static_Var_4 = 1;
		sleep 1500;
		Static_Var_5 = 1;
		move base to y-axis [2.] speed [24.];
		wait-for-move base along y-axis;
		move base to y-axis [0.] speed [8.];
		wait-for-move base along y-axis;
		move base to y-axis [1.] speed [8.];
		sleep 250;
		move base to y-axis [0.] speed [8.];
		sleep 250;
		Static_Var_4 = 0;
		Static_Var_5 = 0;
		turn base to x-axis <0.> speed <8.>;
		turn base to z-axis <0.> speed <8.>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
	}
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script SpinSlow();
	sleep 1000;
	Static_Var_4 = 1;
	Static_Var_5 = 1;
	move base to y-axis [-16.] speed [8.];
	wait-for-move base along y-axis;
	move base to y-axis [-20.] speed [4.];
	wait-for-move base along y-axis;
	Static_Var_5 = 0;
	Static_Var_4 = 0;
	turn base to x-axis <0.> speed <8.>;
	turn base to z-axis <0.> speed <8.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
}

InitState()
{
	Static_Var_6 = 1;
	Static_Var_7 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_7 )
	{
		Static_Var_6 = requestedstate;
		return (0);
	}
	Static_Var_7 = 1;
	currentstate = Static_Var_6;
	Static_Var_6 = requestedstate;
	while( Static_Var_6 != currentstate )
	{
		if( Static_Var_6 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_6 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_7 = 0;
}

Sway()
{
	while( TRUE )
	{
		if( Static_Var_5 )
		{
			turn base to x-axis <8.> speed <20.>;
			turn base to z-axis <8.> speed <20.>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
			turn base to x-axis <-8.> speed <16.>;
			turn base to z-axis <-8.> speed <16.>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
			turn base to x-axis <4.> speed <12.>;
			turn base to z-axis <4.> speed <12.>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
			turn base to x-axis <0.> speed <8.>;
			turn base to z-axis <0.> speed <8.>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
		}
		sleep 250;
	}
}

ShowBubbles()
{
	while( TRUE )
	{
		if( Static_Var_4 )
		{
			emit-sfx 3 from wake01;
			emit-sfx 3 from wake02;
			emit-sfx 3 from wake03;
			emit-sfx 3 from wake04;
			emit-sfx 3 from wake05;
			emit-sfx 3 from wake06;
			emit-sfx 3 from wake07;
			emit-sfx 3 from wake08;
			emit-sfx 3 from wake09;
			emit-sfx 3 from wake10;
			emit-sfx 3 from wake11;
			emit-sfx 3 from wake12;
			emit-sfx 3 from wake13;
			emit-sfx 3 from wake14;
			emit-sfx 3 from wake15;
			emit-sfx 3 from wake16;
		}
		sleep 250;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex * <0.016484> speed <20.>;
	turn base to z-axis anglez * <0.016484> speed <20.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.> - anglex speed <16.>;
	turn base to z-axis <0.> - anglez speed <16.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis anglex / <0.010989> speed <16.>;
	turn base to z-axis anglez / <0.010989> speed <16.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.> speed <8.>;
	turn base to z-axis <0.> speed <8.>;
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	turn gun to x-axis <0.> speed <25.>;
	start-script RequestState(1);
}

Create()
{
	hide flare;
	hide shell;
	hide vent1;
	hide vent2;
	dont-cache base;
	dont-cache struts;
	dont-cache fan;
	dont-cache turret;
	dont-cache gun;
	dont-cache sleeve;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache barrel3;
	dont-cache flare;
	dont-cache shell;
	dont-cache vent1;
	dont-cache vent2;
	dont-cache wake01;
	dont-cache wake02;
	dont-cache wake03;
	dont-cache wake04;
	dont-cache wake05;
	dont-cache wake06;
	dont-cache wake07;
	dont-cache wake08;
	dont-cache wake09;
	dont-cache wake10;
	dont-cache wake11;
	dont-cache wake12;
	dont-cache wake13;
	dont-cache wake14;
	dont-cache wake15;
	dont-cache wake16;
	dont-shade base;
	dont-shade struts;
	dont-shade fan;
	dont-shade turret;
	dont-shade gun;
	dont-shade sleeve;
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade barrel3;
	dont-shade flare;
	dont-shade shell;
	dont-shade vent1;
	dont-shade vent2;
	dont-shade wake01;
	dont-shade wake02;
	dont-shade wake03;
	dont-shade wake04;
	dont-shade wake05;
	dont-shade wake06;
	dont-shade wake07;
	dont-shade wake08;
	dont-shade wake09;
	dont-shade wake10;
	dont-shade wake11;
	dont-shade wake12;
	dont-shade wake13;
	dont-shade wake14;
	dont-shade wake15;
	dont-shade wake16;
	Static_Var_2 = 3000;
	Static_Var_1 = 1;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	call-script InitState();
	start-script SmokeUnit();
	start-script ShowBubbles();
	start-script Sway();
	start-script RequestState(0);
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	spin fan around y-axis speed <600.>;
	set-signal-mask 2;
	start-script RestoreAfterDelay();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <100.>;
	turn gun to x-axis <0.> - pitch speed <50.>;
	wait-for-turn sleeve around z-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_3 == 0 )
	{
		move barrel1 to z-axis [-4.] now;
		show flare;
		emit-sfx 257 from vent1;
		emit-sfx 257 from vent2;
		sleep 250;
		hide flare;
		move barrel1 to z-axis [0.] speed [3.];
		turn sleeve to z-axis <-120.> speed <200.>;
	}
	if( Static_Var_3 == 1 )
	{
		move barrel3 to z-axis [-4.] now;
		show flare;
		emit-sfx 257 from vent1;
		emit-sfx 257 from vent2;
		sleep 250;
		hide flare;
		move barrel3 to z-axis [0.] speed [3.];
		turn sleeve to z-axis <120.> speed <200.>;
	}
	if( Static_Var_3 == 2 )
	{
		move barrel2 to z-axis [-4.] now;
		show flare;
		emit-sfx 257 from vent1;
		emit-sfx 257 from vent2;
		sleep 250;
		hide flare;
		move barrel2 to z-axis [0.] speed [3.];
		turn sleeve to z-axis <0.> speed <200.>;
	}
	++Static_Var_3;
	if( Static_Var_3 == 3 )
	{
		Static_Var_3 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	hide vent1;
	hide vent2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode struts type BITMAPONLY | BITMAP2;
		explode fan type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP2;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP2;
		explode barrel3 type BITMAPONLY | BITMAP1;
		explode shell type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode struts type BITMAPONLY | BITMAP2;
		explode fan type FALL | BITMAP1;
		explode turret type BITMAPONLY | BITMAP3;
		explode gun type BITMAPONLY | BITMAP3;
		explode sleeve type BITMAPONLY | BITMAP2;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP3;
		explode barrel3 type BITMAPONLY | BITMAP2;
		explode shell type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode struts type BITMAPONLY | BITMAP2;
		explode fan type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type BITMAPONLY | BITMAP3;
		explode gun type BITMAPONLY | BITMAP3;
		explode sleeve type SHATTER | BITMAP4;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP2;
		explode barrel3 type BITMAPONLY | BITMAP4;
		explode shell type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode struts type BITMAPONLY | BITMAP2;
	explode fan type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type BITMAPONLY | BITMAP3;
	explode gun type BITMAPONLY | BITMAP3;
	explode sleeve type SHATTER | BITMAP4;
	explode barrel1 type BITMAPONLY | BITMAP3;
	explode barrel2 type BITMAPONLY | BITMAP2;
	explode barrel3 type BITMAPONLY | BITMAP4;
	explode shell type BITMAPONLY | BITMAP2;
}
