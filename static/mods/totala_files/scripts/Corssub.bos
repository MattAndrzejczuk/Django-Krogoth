#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  tflare1, tflare2, base, lflare1, launcher, door1, door2, lflare2,
       lflare3, bubbles1, bubbles2, turret, launch, blink1, noblink1, blink2,
       noblink2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	dont-cache blink1;
	dont-cache blink2;
	hide noblink1;
	hide blink2;
	Static_Var_2 = 1;
	Static_Var_4 = 1;
	Static_Var_3 = 1;
	Static_Var_1 = 3000;
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 1;
}

RestorePrimary()
{
	sleep 9000;
	set-signal-mask 0;
	turn turret to y-axis <0.> speed <80.>;
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		emit-sfx 259 from bubbles1;
		emit-sfx 259 from bubbles2;
		sleep 300;
	}
}

StopMoving()
{
	signal 2;
}

AimTertiary()
{
	sleep 150;
}

ReloadSnipedo()
{
	if( Static_Var_2 == 2 )
	{
		Static_Var_2 = 0;
		show noblink1;
		hide blink1;
		sleep 45000;
		show blink2;
		hide noblink2;
		Static_Var_2 = 2;
		return (0);
	}
	if( Static_Var_2 == 1 )
	{
		Static_Var_2 = 0;
		show noblink2;
		hide blink2;
		sleep 45000;
		show blink1;
		hide noblink1;
		Static_Var_2 = 1;
	}
}

FireTertiary()
{
	if( Static_Var_2 == 1 )
	{
		Static_Var_2 = 2;
		start-script ReloadSnipedo();
		return (0);
	}
	if( Static_Var_2 == 2 )
	{
		Static_Var_2 = 1;
		start-script ReloadSnipedo();
	}
}

AimFromTertiary(piecenum)
{
	piecenum = base;
}

QueryTertiary(piecenum)
{
	if( Static_Var_2 == 1 )
	{
		piecenum = tflare1;
	}
	if( Static_Var_2 == 2 )
	{
		piecenum = tflare2;
	}
}

AimPrimary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn turret to y-axis heading speed <120.>;
	wait-for-turn turret around y-axis;
	start-script RestorePrimary();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

FirePrimary()
{
	sleep 150;
}

QueryPrimary(piecenum)
{
	piecenum = launch;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode bubbles1 type BITMAPONLY | BITMAP2;
		explode bubbles2 type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode tflare1 type BITMAPONLY | BITMAP5;
		explode tflare2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode bubbles1 type FALL | BITMAP2;
		explode bubbles2 type FALL | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode tflare1 type FALL | BITMAP5;
		explode tflare2 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode bubbles1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode bubbles2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode tflare1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode tflare2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode bubbles1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode bubbles2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type BITMAPONLY | BITMAP4;
	explode door1 type BITMAPONLY | BITMAP4;
	explode door2 type BITMAPONLY | BITMAP5;
	explode tflare1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode tflare2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
}
