#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hinge1, hinge2, hinge3, hinge4, dish4, dish3, dish2,
       dish1, wheel, light;

static-var  Static_Var_1, Static_Var_2;


activatescr()
{
	if( TRUE )
	{
		turn hinge1 to x-axis <0.> now;
		turn hinge1 to x-axis <133.> speed <68.>;
		turn hinge2 to x-axis <0.> now;
		turn hinge2 to x-axis <-132.> speed <68.>;
		turn hinge3 to z-axis <0.> now;
		turn hinge3 to z-axis <130.> speed <67.>;
		turn hinge4 to z-axis <0.> now;
		turn hinge4 to z-axis <-130.> speed <67.>;
		turn dish4 to y-axis <0.> now;
		turn dish4 to y-axis <-180.> speed <93.>;
		turn dish3 to y-axis <0.> now;
		turn dish3 to y-axis <-172.> speed <88.>;
		turn dish2 to y-axis <0.> now;
		turn dish2 to y-axis <-182.> speed <93.>;
		turn dish1 to y-axis <0.> now;
		turn dish1 to y-axis <-178.> speed <92.>;
		sleep 1939;
	}
	sleep 88;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		turn hinge1 to x-axis <133.> now;
		turn hinge1 to x-axis <0.> speed <68.>;
		turn hinge2 to x-axis <-133.> now;
		turn hinge2 to x-axis <0.> speed <68.>;
		turn hinge3 to z-axis <131.> now;
		turn hinge3 to z-axis <0.> speed <67.>;
		turn hinge4 to z-axis <-130.> now;
		turn hinge4 to z-axis <0.> speed <67.>;
		turn dish4 to y-axis <-180.> now;
		turn dish4 to y-axis <0.> speed <93.>;
		turn dish3 to y-axis <-172.> now;
		turn dish3 to y-axis <0.> speed <88.>;
		turn dish2 to y-axis <-182.> now;
		turn dish2 to y-axis <0.> speed <94.>;
		turn dish1 to y-axis <-179.> now;
		turn dish1 to y-axis <0.> speed <92.>;
		sleep 1938;
	}
	sleep 88;
}

Go()
{
	dont-cache base;
	dont-cache dish1;
	dont-cache dish2;
	dont-cache dish3;
	dont-cache dish4;
	dont-cache hinge1;
	dont-cache hinge2;
	dont-cache hinge3;
	dont-cache hinge4;
	dont-cache wheel;
	call-script activatescr();
	spin wheel around y-axis speed <60.>;
}

Stop()
{
	stop-spin wheel around y-axis;
	call-script deactivatescr();
	cache base;
	cache dish1;
	cache dish2;
	cache dish3;
	cache dish4;
	cache hinge1;
	cache hinge2;
	cache hinge3;
	cache hinge4;
	cache wheel;
}

InitState()
{
	Static_Var_1 = 1;
	Static_Var_2 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_2 )
	{
		Static_Var_1 = requestedstate;
		return (0);
	}
	Static_Var_2 = 1;
	currentstate = Static_Var_1;
	Static_Var_1 = requestedstate;
	while( Static_Var_1 != currentstate )
	{
		if( Static_Var_1 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_1 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_2 = 0;
}

Create()
{
	dont-shade light;
	dont-cache light;
	dont-shade base;
	dont-shade dish1;
	dont-shade dish2;
	dont-shade dish3;
	dont-shade dish4;
	dont-shade hinge1;
	dont-shade hinge2;
	dont-shade hinge3;
	dont-shade hinge4;
	dont-shade wheel;
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode dish1 type BITMAPONLY | BITMAP2;
		explode dish2 type BITMAPONLY | BITMAP3;
		explode dish3 type BITMAPONLY | BITMAP4;
		explode dish4 type BITMAPONLY | BITMAP5;
		explode hinge1 type BITMAPONLY | BITMAP1;
		explode hinge2 type BITMAPONLY | BITMAP2;
		explode hinge3 type BITMAPONLY | BITMAP3;
		explode hinge4 type BITMAPONLY | BITMAP4;
		explode light type SHATTER | BITMAP5;
		explode wheel type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode dish1 type BITMAPONLY | BITMAP2;
		explode dish2 type BITMAPONLY | BITMAP3;
		explode dish3 type BITMAPONLY | BITMAP4;
		explode dish4 type BITMAPONLY | BITMAP5;
		explode hinge1 type BITMAPONLY | BITMAP1;
		explode hinge2 type BITMAPONLY | BITMAP2;
		explode hinge3 type BITMAPONLY | BITMAP3;
		explode hinge4 type BITMAPONLY | BITMAP4;
		explode light type SHATTER | BITMAP5;
		explode wheel type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode dish1 type BITMAPONLY | BITMAP2;
		explode dish2 type BITMAPONLY | BITMAP3;
		explode dish3 type BITMAPONLY | BITMAP4;
		explode dish4 type BITMAPONLY | BITMAP5;
		explode hinge1 type BITMAPONLY | BITMAP1;
		explode hinge2 type BITMAPONLY | BITMAP2;
		explode hinge3 type BITMAPONLY | BITMAP3;
		explode hinge4 type BITMAPONLY | BITMAP4;
		explode light type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode wheel type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode dish1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode dish2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode dish3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode dish4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode hinge1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode hinge2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode hinge3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode hinge4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode light type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode wheel type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
