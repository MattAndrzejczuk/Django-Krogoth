#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, emit, rupleg1, rupleg2, rupleg3, lupleg1, lupleg2, lupleg3,
       lleg3, lleg2, lleg1, rleg3, rleg2, rleg1, lbody, rbody,
       launcher, lffoot, lrfoot, rffoot, rrfoot;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


walk()
{
	if( Static_Var_3 )
	{
		turn base to x-axis <2.> now;
		turn base to x-axis <0.> speed <14.>;
		turn base to y-axis <1.> now;
		turn base to y-axis <0.> speed <2.>;
		turn rupleg1 to y-axis <27.> now;
		turn rupleg1 to y-axis <7.> speed <132.>;
		turn rupleg2 to y-axis <-13.> now;
		turn rupleg2 to z-axis <0.> now;
		turn rupleg2 to z-axis <27.> speed <184.>;
		turn rupleg3 to y-axis <28.> now;
		turn rupleg3 to y-axis <7.> speed <136.>;
		turn lupleg1 to y-axis <21.> now;
		turn lupleg1 to z-axis <0.> now;
		turn lupleg1 to z-axis <-24.> speed <165.>;
		turn lupleg2 to y-axis <-14.> now;
		turn lupleg2 to y-axis <0.> speed <92.>;
		turn lupleg2 to z-axis <-7.> now;
		turn lupleg2 to z-axis <0.> speed <49.>;
		turn lupleg3 to y-axis <13.> now;
		turn lupleg3 to z-axis <0.> now;
		turn lupleg3 to z-axis <-45.> speed <304.>;
		turn lleg3 to z-axis <0.> now;
		turn lleg3 to z-axis <35.> speed <238.>;
		turn lleg2 to z-axis <0.> now;
		turn lleg2 to z-axis <-11.> speed <80.>;
		turn lleg1 to z-axis <0.> now;
		turn lleg1 to z-axis <11.> speed <77.>;
		turn rleg3 to z-axis <0.> now;
		turn rleg3 to z-axis <8.> speed <56.>;
		turn rleg2 to z-axis <0.> now;
		turn rleg2 to z-axis <-34.> speed <233.>;
		turn rleg1 to z-axis <0.> now;
		turn rleg1 to z-axis <9.> speed <63.>;
		sleep 149;
	}
	if( Static_Var_3 )
	{
		turn base to x-axis <-1.> speed <7.>;
		turn base to y-axis <0.> speed <7.>;
		turn rupleg1 to y-axis <-13.> speed <138.>;
		turn rupleg2 to y-axis <8.> speed <147.>;
		turn rupleg2 to z-axis <54.> speed <178.>;
		turn rupleg3 to y-axis <-14.> speed <145.>;
		turn lupleg1 to y-axis <1.> speed <133.>;
		turn lupleg1 to z-axis <-64.> speed <267.>;
		turn lupleg2 to y-axis <20.> speed <143.>;
		turn lupleg3 to y-axis <-10.> speed <157.>;
		turn lupleg3 to z-axis <-75.> speed <203.>;
		turn lleg3 to z-axis <63.> speed <187.>;
		turn lleg2 to z-axis <0.> speed <79.>;
		turn lleg1 to z-axis <66.> speed <365.>;
		turn rleg3 to z-axis <0.> speed <56.>;
		turn rleg2 to z-axis <-63.> speed <192.>;
		turn rleg1 to z-axis <0.> speed <63.>;
		sleep 150;
	}
	if( Static_Var_3 )
	{
		turn base to x-axis <-1.> speed <2.>;
		turn base to y-axis <-1.> speed <4.>;
		turn rupleg1 to y-axis <-20.> speed <46.>;
		turn rupleg2 to y-axis <17.> speed <55.>;
		turn rupleg2 to z-axis <8.> speed <302.>;
		turn rupleg3 to y-axis <-20.> speed <37.>;
		turn lupleg1 to y-axis <-10.> speed <79.>;
		turn lupleg1 to z-axis <-14.> speed <333.>;
		turn lupleg2 to y-axis <31.> speed <69.>;
		turn lupleg3 to y-axis <-15.> speed <37.>;
		turn lupleg3 to z-axis <-10.> speed <430.>;
		turn lleg3 to z-axis <17.> speed <302.>;
		turn lleg1 to z-axis <10.> speed <370.>;
		turn rleg2 to z-axis <-9.> speed <356.>;
		sleep 151;
	}
	if( Static_Var_3 )
	{
		turn base to x-axis <0.> speed <4.>;
		turn base to y-axis <0.> speed <7.>;
		turn rupleg1 to y-axis <-13.> speed <46.>;
		turn rupleg1 to z-axis <39.> speed <262.>;
		turn rupleg2 to y-axis <11.> speed <39.>;
		turn rupleg2 to z-axis <-2.> speed <70.>;
		turn rupleg3 to y-axis <-3.> speed <112.>;
		turn rupleg3 to z-axis <28.> speed <189.>;
		turn lupleg1 to y-axis <0.> speed <67.>;
		turn lupleg1 to z-axis <2.> speed <110.>;
		turn lupleg2 to y-axis <19.> speed <77.>;
		turn lupleg2 to z-axis <-40.> speed <271.>;
		turn lupleg3 to y-axis <-7.> speed <56.>;
		turn lupleg3 to z-axis <4.> speed <100.>;
		turn lleg3 to z-axis <0.> speed <119.>;
		turn lleg2 to z-axis <32.> speed <218.>;
		turn lleg1 to z-axis <0.> speed <70.>;
		turn rleg3 to z-axis <-17.> speed <117.>;
		turn rleg2 to z-axis <0.> speed <65.>;
		turn rleg1 to z-axis <-19.> speed <131.>;
		sleep 150;
	}
	if( Static_Var_3 )
	{
		turn base to x-axis <0.> speed <9.>;
		turn base to y-axis <1.> speed <9.>;
		turn rupleg1 to y-axis <8.> speed <140.>;
		turn rupleg1 to z-axis <52.> speed <89.>;
		turn rupleg2 to y-axis <0.> speed <75.>;
		turn rupleg3 to y-axis <15.> speed <126.>;
		turn rupleg3 to z-axis <48.> speed <131.>;
		turn lupleg1 to y-axis <9.> speed <65.>;
		turn lupleg2 to y-axis <3.> speed <105.>;
		turn lupleg2 to z-axis <-68.> speed <185.>;
		turn lupleg3 to y-axis <1.> speed <60.>;
		turn lleg3 to z-axis <-10.> speed <67.>;
		turn lleg2 to z-axis <64.> speed <210.>;
		turn lleg1 to z-axis <-5.> speed <39.>;
		turn rleg3 to z-axis <-52.> speed <232.>;
		turn rleg2 to z-axis <3.> speed <23.>;
		turn rleg1 to z-axis <-50.> speed <206.>;
		sleep 150;
	}
	if( Static_Var_3 )
	{
		turn base to x-axis <1.> speed <4.>;
		turn base to y-axis <1.> speed <2.>;
		turn rupleg1 to y-axis <16.> speed <56.>;
		turn rupleg1 to z-axis <39.> speed <89.>;
		turn rupleg2 to y-axis <-11.> speed <75.>;
		turn rupleg3 to y-axis <24.> speed <58.>;
		turn rupleg3 to z-axis <28.> speed <131.>;
		turn lupleg1 to y-axis <20.> speed <70.>;
		turn lupleg2 to y-axis <-3.> speed <51.>;
		turn lupleg2 to z-axis <-40.> speed <185.>;
		turn lupleg3 to y-axis <18.> speed <110.>;
		turn lleg3 to z-axis <0.> speed <67.>;
		turn lleg2 to z-axis <37.> speed <178.>;
		turn lleg1 to z-axis <0.> speed <39.>;
		turn rleg3 to z-axis <-17.> speed <232.>;
		turn rleg2 to z-axis <0.> speed <23.>;
		turn rleg1 to z-axis <-23.> speed <178.>;
		sleep 150;
	}
	sleep 150;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

activatescr()
{
	if( TRUE )
	{
		move lbody to x-axis [-2.] speed [8.];
		move rbody to x-axis [2.] speed [8.];
		wait-for-move lbody along x-axis;
		wait-for-move rbody along x-axis;
	}
	if( TRUE )
	{
		turn launcher to x-axis <98.> speed <500.>;
		wait-for-turn launcher around x-axis;
	}
}

deactivatescr()
{
	if( TRUE )
	{
		move lbody to x-axis [-2.] now;
		move rbody to x-axis [2.] now;
		turn launcher to x-axis <98.> now;
		turn launcher to x-axis <92.> speed <31.>;
		sleep 200;
	}
	if( TRUE )
	{
		turn launcher to x-axis <70.> speed <107.>;
		sleep 200;
	}
	if( TRUE )
	{
		turn launcher to x-axis <17.> speed <267.>;
		sleep 200;
	}
	if( TRUE )
	{
		turn launcher to x-axis <0.> speed <84.>;
		sleep 200;
	}
	if( TRUE )
	{
		move lbody to x-axis [0.] speed [8.];
		move rbody to x-axis [0.] speed [8.];
		sleep 200;
	}
	sleep 200;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.>;
	turn base to x-axis Func_Var_1 speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

Go()
{
	call-script activatescr();
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
}

InitState()
{
	Static_Var_4 = 1;
	Static_Var_5 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_5 )
	{
		Static_Var_4 = requestedstate;
		return (0);
	}
	Static_Var_5 = 1;
	currentstate = Static_Var_4;
	Static_Var_4 = requestedstate;
	while( Static_Var_4 != currentstate )
	{
		if( Static_Var_4 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_4 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_5 = 0;
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = Static_Var_3;
		if( Func_Var_1 )
		{
			call-script walk();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
		}
	}
}

Create()
{
	Static_Var_3 = 0;
	Static_Var_1 = 0;
	Static_Var_2 = 10000;
	start-script SmokeUnit();
	call-script InitState();
	start-script MotionControl();
}

StartMoving()
{
	Static_Var_3 = 1;
}

StopMoving()
{
	Static_Var_3 = 0;
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 100;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 100;
}

QueryPrimary(piecenum)
{
	piecenum = emit;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type BITMAPONLY | BITMAP2;
		explode lbody type BITMAPONLY | BITMAP3;
		explode lffoot type BITMAPONLY | BITMAP4;
		explode lleg1 type BITMAPONLY | BITMAP5;
		explode lleg2 type BITMAPONLY | BITMAP1;
		explode lleg3 type BITMAPONLY | BITMAP2;
		explode lrfoot type BITMAPONLY | BITMAP3;
		explode lupleg1 type BITMAPONLY | BITMAP4;
		explode lupleg2 type BITMAPONLY | BITMAP5;
		explode lupleg3 type BITMAPONLY | BITMAP1;
		explode rbody type BITMAPONLY | BITMAP2;
		explode rffoot type BITMAPONLY | BITMAP3;
		explode rleg1 type BITMAPONLY | BITMAP4;
		explode rleg2 type BITMAPONLY | BITMAP5;
		explode rleg3 type BITMAPONLY | BITMAP1;
		explode rrfoot type BITMAPONLY | BITMAP2;
		explode rupleg1 type BITMAPONLY | BITMAP3;
		explode rupleg2 type BITMAPONLY | BITMAP4;
		explode rupleg3 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type BITMAPONLY | BITMAP2;
		explode lbody type BITMAPONLY | BITMAP3;
		explode lffoot type FALL | BITMAP4;
		explode lleg1 type FALL | BITMAP5;
		explode lleg2 type FALL | BITMAP1;
		explode lleg3 type FALL | BITMAP2;
		explode lrfoot type FALL | BITMAP3;
		explode lupleg1 type FALL | BITMAP4;
		explode lupleg2 type FALL | BITMAP5;
		explode lupleg3 type FALL | BITMAP1;
		explode rbody type BITMAPONLY | BITMAP2;
		explode rffoot type FALL | BITMAP3;
		explode rleg1 type FALL | BITMAP4;
		explode rleg2 type FALL | BITMAP5;
		explode rleg3 type FALL | BITMAP1;
		explode rrfoot type FALL | BITMAP2;
		explode rupleg1 type FALL | BITMAP3;
		explode rupleg2 type FALL | BITMAP4;
		explode rupleg3 type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type BITMAPONLY | BITMAP2;
		explode lbody type BITMAPONLY | BITMAP3;
		explode lffoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode lleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode lleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode lleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode lrfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode lupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode lupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode lupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rbody type BITMAPONLY | BITMAP2;
		explode rffoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode rleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode rleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode rleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rrfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode rupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode rupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode rupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode launcher type BITMAPONLY | BITMAP2;
	explode lbody type BITMAPONLY | BITMAP3;
	explode lffoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode lleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode lleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode lleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode lrfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode lupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode lupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode lupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rbody type BITMAPONLY | BITMAP2;
	explode rffoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode rleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode rleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode rleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rrfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode rupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode rupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode rupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
}
