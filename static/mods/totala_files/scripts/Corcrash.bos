#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  firept1, firept2, turret, gunbase, pelvis, lleg, rleg, gun1,
       gun2, ground;

static-var  Static_Var_1, Static_Var_2;


walk()
{
	while( TRUE )
	{
		if( TRUE )
		{
			move pelvis to y-axis [0.] now;
			move lleg to y-axis [0.] now;
			move lleg to z-axis [2.] now;
			move rleg to y-axis [0.] now;
			move rleg to z-axis [-2.] now;
			turn pelvis to x-axis <6.> now;
			turn lleg to x-axis <-6.> now;
			turn rleg to x-axis <0.> now;
			sleep 60;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-1.] now;
			move lleg to y-axis [1.] now;
			move rleg to y-axis [1.] now;
			turn pelvis to x-axis <5.> now;
			turn lleg to x-axis <-5.> now;
			turn rleg to x-axis <1.> now;
			sleep 30;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.] now;
			move lleg to y-axis [0.] now;
			move rleg to y-axis [0.] now;
			turn pelvis to x-axis <2.> now;
			turn lleg to x-axis <-2.> now;
			turn rleg to x-axis <3.> now;
			sleep 20;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.] now;
			move lleg to y-axis [0.] now;
			move rleg to y-axis [0.] now;
			turn pelvis to x-axis <1.> now;
			turn lleg to x-axis <-1.> now;
			turn rleg to x-axis <3.> now;
			sleep 10;
		}
		if( TRUE )
		{
			move pelvis to y-axis [0.] now;
			move lleg to y-axis [0.] now;
			move rleg to y-axis [1.] now;
			move rleg to z-axis [-2.] now;
			turn pelvis to x-axis <0.> now;
			turn lleg to x-axis <0.> now;
			turn rleg to x-axis <0.> now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [1.] now;
			move rleg to z-axis [-0.] now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to y-axis [0.] now;
			move lleg to z-axis [0.] now;
			move rleg to z-axis [0.] now;
			turn pelvis to x-axis <0.> now;
			turn lleg to x-axis <0.> now;
			turn rleg to x-axis <0.> now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [-1.] now;
			move rleg to z-axis [1.] now;
			turn rleg to x-axis <-9.> now;
			sleep 100;
		}
		if( TRUE )
		{
			move lleg to z-axis [-1.] now;
			move rleg to y-axis [0.] now;
			turn pelvis to x-axis <6.> now;
			turn rleg to x-axis <-6.> now;
			sleep 60;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.] now;
			move lleg to y-axis [1.] now;
			move rleg to y-axis [1.] now;
			turn pelvis to x-axis <5.> now;
			turn lleg to x-axis <1.> now;
			turn rleg to x-axis <-5.> now;
			sleep 30;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.] now;
			move lleg to y-axis [0.] now;
			move rleg to y-axis [0.] now;
			turn pelvis to x-axis <2.> now;
			turn lleg to x-axis <3.> now;
			turn rleg to x-axis <-2.> now;
			sleep 20;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.] now;
			move lleg to y-axis [0.] now;
			move rleg to y-axis [0.] now;
			turn pelvis to x-axis <1.> now;
			turn lleg to x-axis <2.> now;
			turn rleg to x-axis <-1.> now;
			sleep 10;
		}
		if( TRUE )
		{
			move lleg to y-axis [1.] now;
			move lleg to z-axis [-2.] now;
			move rleg to y-axis [1.] now;
			turn pelvis to x-axis <0.> now;
			turn lleg to x-axis <0.> now;
			turn rleg to x-axis <0.> now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [-1.] now;
			move rleg to z-axis [0.] now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [0.] now;
			move rleg to y-axis [0.] now;
			move rleg to z-axis [-0.] now;
			turn rleg to x-axis <0.> now;
			sleep 60;
		}
		move lleg to z-axis [1.] now;
		move rleg to y-axis [0.] now;
		move rleg to z-axis [-1.] now;
		turn lleg to x-axis <-10.> now;
		turn rleg to x-axis <0.> now;
		sleep 100;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	call-script walk();
}

StopMoving()
{
	signal 2;
	set-signal-mask 2;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 3000;
	start-script StopMoving();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 5;
}

SweetSpot(piecenum)
{
	piecenum = pelvis;
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

QueryTertiary(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = firept1;
	}
	if( Static_Var_1 == 0 )
	{
		piecenum = firept2;
	}
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	turn turret to y-axis <0.> speed <90.>;
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn turret to y-axis heading speed <225.>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( Static_Var_1 == 0 )
	{
		Static_Var_1 = 1;
		move gun1 to z-axis [-2.] speed [25.];
		wait-for-move gun1 along z-axis;
		move gun1 to z-axis [0.] speed [3.];
		return (0);
	}
	if( Static_Var_1 == 1 )
	{
		Static_Var_1 = 0;
		move gun2 to z-axis [-2.] speed [25.];
		wait-for-move gun2 along z-axis;
		move gun2 to z-axis [0.] speed [3.];
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode firept1 type BITMAPONLY | BITMAP1;
		explode firept2 type BITMAPONLY | BITMAP2;
		explode ground type BITMAPONLY | BITMAP3;
		explode gun1 type BITMAPONLY | BITMAP4;
		explode gun2 type BITMAPONLY | BITMAP5;
		explode gunbase type BITMAPONLY | BITMAP1;
		explode lleg type BITMAPONLY | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP3;
		explode rleg type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode firept1 type FALL | BITMAP1;
		explode firept2 type FALL | BITMAP2;
		explode ground type FALL | BITMAP3;
		explode gun1 type FALL | BITMAP4;
		explode gun2 type FALL | BITMAP5;
		explode gunbase type BITMAPONLY | BITMAP1;
		explode lleg type FALL | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP3;
		explode rleg type FALL | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode firept1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode firept2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gunbase type BITMAPONLY | BITMAP1;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP3;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode firept1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode firept2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gunbase type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type BITMAPONLY | BITMAP3;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret type BITMAPONLY | BITMAP5;
}
