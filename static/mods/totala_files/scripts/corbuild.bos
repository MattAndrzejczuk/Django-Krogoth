#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, socle, socle2, socle3, cercle1, cercle2, cercle3;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from socle;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Go()
{
	spin socle2 around y-axis speed <300.> accelerate <5.>;
	spin cercle1 around x-axis speed <200.> accelerate <5.>;
	spin cercle2 around y-axis speed <150.> accelerate <7.>;
	spin cercle3 around x-axis speed <100.> accelerate <8.>;
	spin socle3 around y-axis speed <-350.> accelerate <7.>;
}

Stop()
{
	stop-spin cercle1 around x-axis decelerate <1.>;
	stop-spin cercle2 around y-axis decelerate <5.>;
	stop-spin cercle3 around x-axis decelerate <10.>;
	stop-spin socle3 around y-axis decelerate <1.>;
	stop-spin socle2 around y-axis decelerate <5.>;
}

InitState()
{
	Static_Var_4 = 1;
	Static_Var_5 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_5 )
	{
		Static_Var_4 = requestedstate;
		return (0);
	}
	Static_Var_5 = 1;
	currentstate = Static_Var_4;
	Static_Var_4 = requestedstate;
	while( Static_Var_4 != currentstate )
	{
		if( Static_Var_4 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_4 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_5 = 0;
}

Repairing(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = get HEALTH;
		if( Func_Var_1 == 45 )
		{
			if( Static_Var_3 == 1 )
			{
				Static_Var_3 = 0;
				show cercle1;
			}
		}
		if( Func_Var_1 == 60 )
		{
			if( Static_Var_2 == 1 )
			{
				Static_Var_2 = 0;
				show cercle2;
			}
		}
		if( Func_Var_1 == 85 )
		{
			if( Static_Var_1 == 1 )
			{
				Static_Var_1 = 0;
				show cercle3;
			}
		}
		sleep 10;
	}
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	start-script Repairing();
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

HitByWeapon(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 80 )
	{
		if( Static_Var_1 == 0 )
		{
			Static_Var_1 = 1;
			hide cercle3;
			explode cercle3 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		}
	}
	if( Func_Var_3 <= 55 )
	{
		if( Static_Var_2 == 0 )
		{
			Static_Var_2 = 1;
			hide cercle2;
			explode cercle2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		}
	}
	if( Func_Var_3 <= 20 )
	{
		if( Static_Var_3 == 0 )
		{
			Static_Var_3 = 1;
			hide cercle1;
			explode cercle1 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		}
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode socle type BITMAPONLY | BITMAP2;
		explode socle2 type BITMAPONLY | BITMAP1;
		explode socle3 type BITMAPONLY | BITMAP2;
		explode cercle1 type BITMAPONLY | BITMAP1;
		explode cercle2 type BITMAPONLY | BITMAP2;
		explode cercle3 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode socle type SHATTER | BITMAP2;
		explode socle2 type SHATTER | BITMAP3;
		explode socle3 type SHATTER | BITMAP4;
		explode cercle1 type SHATTER | BITMAP1;
		explode cercle2 type SHATTER | BITMAP2;
		explode cercle3 type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode socle type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode socle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode socle3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode cercle1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode cercle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode cercle3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode socle type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode socle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode socle3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode cercle1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode cercle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode cercle3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
