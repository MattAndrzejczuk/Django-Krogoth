#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flamept, turret1, stand, door1, door2, door3, door4,
       turret2, barrel, flame1, flame2, flame3;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		move stand to y-axis [-23.] now;
		turn door1 to z-axis <-3.> now;
		turn door1 to z-axis <-179.> speed <828.>;
		turn door2 to z-axis <3.> now;
		turn door2 to z-axis <179.> speed <826.>;
		turn door3 to x-axis <-3.> now;
		turn door3 to x-axis <-179.> speed <828.>;
		turn door4 to x-axis <3.> now;
		turn door4 to x-axis <180.> speed <830.>;
		turn turret2 to x-axis <90.> now;
		sleep 213;
	}
	if( TRUE )
	{
		move stand to y-axis [0.] speed [76.];
		sleep 307;
	}
	sleep 5;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		move stand to y-axis [0.] now;
		move stand to y-axis [-23.] speed [42.];
		turn door1 to z-axis <-179.> now;
		turn door2 to z-axis <179.> now;
		turn door3 to x-axis <-179.> now;
		turn door4 to x-axis <180.> now;
		turn turret2 to x-axis <90.> now;
		sleep 563;
	}
	if( TRUE )
	{
		turn door1 to z-axis <-3.> speed <309.>;
		turn door2 to z-axis <3.> speed <309.>;
		turn door3 to x-axis <-3.> speed <309.>;
		turn door4 to x-axis <3.> speed <310.>;
		sleep 570;
	}
	sleep 23;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

go()
{
	dont-cache barrel;
	dont-cache stand;
	dont-cache turret1;
	dont-cache turret2;
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
	return (0);
}

stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script deactivatescr();
	cache barrel;
	cache stand;
	cache turret1;
	cache turret2;
	return (0);
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
	return (0);
}

pilotlight(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = Rand( 1, 3 );
		if( Func_Var_1 == 1 )
		{
			show flame1;
			sleep 100;
			hide flame1;
		}
		if( Func_Var_1 == 2 )
		{
			show flame2;
			sleep 100;
			hide flame2;
		}
		if( Func_Var_1 == 3 )
		{
			show flame3;
			sleep 100;
			hide flame3;
		}
	}
	return (0);
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	turn turret1 to y-axis <0.> speed <135.>;
	turn turret2 to x-axis <0.> speed <135.>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret2 around x-axis;
	start-script RequestState(1);
	return (0);
}

Create()
{
	hide flame1;
	hide flame2;
	hide flame3;
	dont-shade barrel;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade stand;
	dont-shade turret1;
	dont-shade turret2;
	dont-cache barrel;
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	dont-cache stand;
	dont-cache turret1;
	dont-cache turret2;
	hide flamept;
	Static_Var_1 = 1;
	Static_Var_2 = 3000;
	call-script InitState();
	start-script SmokeUnit();
	start-script pilotlight();
	start-script RequestState(0);
	turn door1 to z-axis <-179.> speed <291.>;
	turn door2 to z-axis <179.> speed <290.>;
	turn door3 to x-axis <-179.> speed <291.>;
	turn door4 to x-axis <180.> speed <291.>;
	set-signal-mask 2;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 2;
	return (0);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret1 to y-axis heading speed <135.>;
	turn turret2 to x-axis <0.> - pitch speed <135.>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flamept;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flamept;
	if( severity <= 25 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 1;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 2;
		}
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode door3 type BITMAPONLY | BITMAP5;
		explode door4 type BITMAPONLY | BITMAP1;
		explode stand type BITMAPONLY | BITMAP3;
		explode turret1 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP5;
	}
	if( severity <= 50 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 2;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 3;
		}
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode door2 type FALL | BITMAP4;
		explode door3 type FALL | BITMAP5;
		explode door4 type FALL | BITMAP1;
		explode stand type BITMAPONLY | BITMAP3;
		explode turret1 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 3;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 4;
		}
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode stand type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 4;
	explode barrel type BITMAPONLY | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode stand type BITMAPONLY | BITMAP3;
	explode turret1 type BITMAPONLY | BITMAP4;
	explode turret2 type BITMAPONLY | BITMAP5;
	return (0);
}
