#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, nanogun, door1, door2, plate, post, wake1,
       wake2, wake3, wake4, wake5, wake6, wake7, wake8, turret;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0.> now;
		turn door1 to z-axis <-67.> speed <99.>;
		turn door2 to z-axis <0.> now;
		turn door2 to z-axis <67.> speed <99.>;
		sleep 677;
	}
	if( TRUE )
	{
		move door1 to y-axis [-2.] speed [2.];
		move door2 to y-axis [-2.] speed [2.];
		move plate to y-axis [4.] speed [5.];
		sleep 688;
	}
	if( TRUE )
	{
		turn post to x-axis <90.> speed <131.>;
		turn nanogun to x-axis <-90.> speed <131.>;
		sleep 687;
	}
	sleep 39;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move door1 to y-axis [-2.] now;
		move door2 to y-axis [-2.] now;
		move plate to y-axis [4.] now;
		turn door1 to z-axis <-67.> now;
		turn door2 to z-axis <67.> now;
		turn post to x-axis <90.> now;
		turn post to x-axis <0.> speed <197.>;
		turn nanogun to x-axis <-90.> now;
		turn nanogun to x-axis <0.> speed <197.>;
		sleep 457;
	}
	if( TRUE )
	{
		move door1 to y-axis [0.] speed [4.];
		move door2 to y-axis [0.] speed [4.];
		move plate to y-axis [0.] speed [8.];
		sleep 471;
	}
	if( TRUE )
	{
		turn door1 to z-axis <0.> speed <143.>;
		turn door2 to z-axis <0.> speed <143.>;
		sleep 469;
	}
	sleep 27;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		if( Static_Var_1 == 2 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

Go()
{
	call-script activatescr();
	turn turret to y-axis Static_Var_2 speed <160.>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.> speed <160.>;
	wait-for-turn turret around y-axis;
	call-script deactivatescr();
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	Static_Var_2 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( Static_Var_1 == 1 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode post type FALL | BITMAP1;
			explode base type BITMAPONLY | BITMAP2;
			explode beam type FALL | BITMAP3;
			explode door1 type BITMAPONLY | BITMAP4;
			explode door2 type BITMAPONLY | BITMAP5;
			explode nanogun type SHATTER | BITMAP1;
			explode plate type BITMAPONLY | BITMAP2;
			return (0);
		}
		corpsetype = 3;
		explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( Static_Var_1 == 2 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode post type FALL | BITMAP1;
			explode base type BITMAPONLY | BITMAP2;
			explode beam type FALL | BITMAP3;
			explode door1 type BITMAPONLY | BITMAP4;
			explode door2 type BITMAPONLY | BITMAP5;
			explode nanogun type SHATTER | BITMAP1;
			explode plate type BITMAPONLY | BITMAP2;
			return (0);
		}
		corpsetype = 3;
		explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode post type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type BITMAPONLY | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode post type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type BITMAPONLY | BITMAP4;
	explode door2 type BITMAPONLY | BITMAP5;
	explode nanogun type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode plate type BITMAPONLY | BITMAP2;
}
