#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  emit1, emit2, emit3, base, launcher, pole, turret, arms,
       launcher2, wake1, wake2, wake3, wake4, wake5, wake6, wake7,
       wake8;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;


activatescr()
{
	if( TRUE )
	{
		move pole to y-axis [0.] now;
		move pole to y-axis [1.] speed [6.];
		move turret to y-axis [0.] now;
		move turret to y-axis [1.] speed [6.];
		move arms to y-axis [0.] now;
		move launcher to y-axis [0.] now;
		sleep 177;
	}
	if( TRUE )
	{
		turn base to x-axis <3.> speed <17.>;
		turn turret to y-axis <0.> speed <0.>;
		turn arms to x-axis <-19.> speed <106.>;
		turn launcher to x-axis <34.> speed <188.>;
		sleep 181;
	}
	if( TRUE )
	{
		turn base to x-axis <-4.> speed <43.>;
		turn arms to x-axis <-45.> speed <143.>;
		turn launcher to x-axis <45.> speed <60.>;
		sleep 179;
	}
	if( TRUE )
	{
		turn base to x-axis <0.> speed <26.>;
		sleep 183;
	}
	sleep 12;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move pole to y-axis [1.] now;
		move turret to y-axis [1.] now;
		move arms to y-axis [0.] now;
		move launcher to y-axis [0.] now;
		turn base to x-axis <0.> now;
		turn base to x-axis <-3.> speed <15.>;
		turn turret to y-axis <0.> now;
		turn arms to x-axis <-45.> now;
		turn arms to x-axis <-3.> speed <156.>;
		turn launcher to x-axis <45.> now;
		turn launcher to x-axis <41.> speed <14.>;
		sleep 266;
	}
	if( TRUE )
	{
		move pole to y-axis [0.] speed [4.];
		move turret to y-axis [0.] speed [4.];
		turn base to x-axis <2.> speed <22.>;
		turn arms to x-axis <0.> speed <13.>;
		turn launcher to x-axis <20.> speed <79.>;
		sleep 266;
	}
	if( TRUE )
	{
		move base to y-axis [-1.] speed [2.];
		turn base to x-axis <2.> speed <1.>;
		turn launcher to x-axis <0.> speed <75.>;
		sleep 266;
	}
	if( TRUE )
	{
		move base to y-axis [0.] speed [2.];
		turn base to x-axis <0.> speed <9.>;
		sleep 266;
	}
	sleep 36;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.>;
	turn base to x-axis Func_Var_1 speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

Go()
{
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	hide launcher;
	show launcher2;
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	hide launcher2;
	show launcher;
	call-script deactivatescr();
}

InitState()
{
	Static_Var_5 = 1;
	Static_Var_6 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_6 )
	{
		Static_Var_5 = requestedstate;
		return (0);
	}
	Static_Var_6 = 1;
	currentstate = Static_Var_5;
	Static_Var_5 = requestedstate;
	while( Static_Var_5 != currentstate )
	{
		if( Static_Var_5 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_5 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_6 = 0;
}

StartMoving()
{
	signal 4;
	set-signal-mask 4;
	while( TRUE )
	{
		if( Static_Var_3 == 1 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		if( Static_Var_3 == 2 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_3 = Func_Var_1;
}

Create()
{
	Static_Var_2 = 1;
	Static_Var_1 = 0;
	Static_Var_4 = 3000;
	hide launcher2;
	call-script InitState();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_4 = Func_Var_1 * 5;
}

RestoreAfterDelay()
{
	sleep Static_Var_4;
	set-signal-mask 0;
	turn launcher2 to y-axis <0.> speed <250.>;
}

AimTertiary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	start-script RequestState(0);
	while( !Static_Var_1 )
	{
		sleep 200;
	}
	turn launcher2 to y-axis heading speed <250.>;
	wait-for-turn launcher2 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	++Static_Var_2;
	if( Static_Var_2 == 4 )
	{
		Static_Var_2 = 1;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = launcher;
}

QueryTertiary(piecenum)
{
	if( Static_Var_2 == 1 )
	{
		piecenum = emit1;
	}
	if( Static_Var_2 == 2 )
	{
		piecenum = emit2;
	}
	if( Static_Var_2 == 3 )
	{
		piecenum = emit3;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( Static_Var_3 == 1 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode arms type SHATTER | BITMAP1;
			explode base type BITMAPONLY | BITMAP2;
			explode emit1 type FALL | BITMAP2;
			explode emit1 type FALL | BITMAP3;
			explode emit1 type FALL | BITMAP4;
			explode launcher type BITMAPONLY | BITMAP5;
			explode pole type FALL | BITMAP1;
			explode turret type FALL | BITMAP2;
			return (0);
		}
		corpsetype = 3;
		explode arms type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode launcher type BITMAPONLY | BITMAP5;
		explode pole type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( Static_Var_3 == 2 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode arms type SHATTER | BITMAP1;
			explode base type BITMAPONLY | BITMAP2;
			explode emit1 type FALL | BITMAP2;
			explode emit1 type FALL | BITMAP3;
			explode emit1 type FALL | BITMAP4;
			explode launcher type BITMAPONLY | BITMAP5;
			explode pole type FALL | BITMAP1;
			explode turret type FALL | BITMAP2;
			return (0);
		}
		corpsetype = 3;
		explode arms type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode launcher type BITMAPONLY | BITMAP5;
		explode pole type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arms type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode emit1 type BITMAPONLY | BITMAP2;
		explode emit1 type BITMAPONLY | BITMAP3;
		explode emit1 type BITMAPONLY | BITMAP4;
		explode launcher type BITMAPONLY | BITMAP5;
		explode pole type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arms type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode emit1 type FALL | BITMAP2;
		explode emit1 type FALL | BITMAP3;
		explode emit1 type FALL | BITMAP4;
		explode launcher type BITMAPONLY | BITMAP5;
		explode pole type FALL | BITMAP1;
		explode turret type FALL | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arms type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode launcher type BITMAPONLY | BITMAP5;
		explode pole type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode arms type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode launcher type BITMAPONLY | BITMAP5;
	explode pole type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
