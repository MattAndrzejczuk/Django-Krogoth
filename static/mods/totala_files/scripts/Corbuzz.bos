#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare, base, turret, barrel1, barrel2, barrel3, barrel4, barrel5,
       barrel6, sleeve1, sleeve2, sleeve3, sleeve4, sleeve5, sleeve6, spindle,
       rotate;

static-var  Static_Var_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade barrel3;
	dont-shade barrel4;
	dont-shade barrel5;
	dont-shade barrel6;
	dont-shade base;
	dont-shade sleeve1;
	dont-shade sleeve2;
	dont-shade sleeve3;
	dont-shade sleeve4;
	dont-shade sleeve5;
	dont-shade sleeve6;
	dont-shade turret;
	dont-shade spindle;
	dont-cache turret;
	dont-cache spindle;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache barrel3;
	dont-cache barrel4;
	dont-cache barrel5;
	dont-cache barrel6;
	dont-cache sleeve1;
	dont-cache sleeve2;
	dont-cache sleeve3;
	dont-cache sleeve4;
	dont-cache sleeve5;
	dont-cache sleeve6;
	dont-cache flare;
	hide flare;
	Static_Var_1 = 1;
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 100;
	}
	sleep 500;
	turn turret to y-axis heading speed <5.>;
	turn rotate to x-axis <0.> - pitch speed <2.>;
	wait-for-turn turret around y-axis;
	wait-for-turn rotate around x-axis;
	return (1);
}

FirePrimary()
{
	Static_Var_1 = 0;
	sleep 500;
	move barrel1 to z-axis [-6.] now;
	show flare;
	sleep 150;
	hide flare;
	move barrel1 to z-axis [0.] speed [12.];
	turn spindle to x-axis <60.> speed <180.>;
	wait-for-turn spindle around x-axis;
	move barrel2 to y-axis [-5.] now;
	move barrel2 to z-axis [-3.] now;
	show flare;
	sleep 150;
	hide flare;
	move barrel2 to y-axis [0.] speed [10.];
	move barrel2 to z-axis [0.] speed [6.];
	turn spindle to x-axis <120.> speed <180.>;
	wait-for-turn spindle around x-axis;
	move barrel3 to y-axis [-5.] now;
	move barrel3 to z-axis [3.] now;
	show flare;
	sleep 150;
	hide flare;
	move barrel3 to y-axis [0.] speed [10.];
	move barrel3 to z-axis [0.] speed [6.];
	turn spindle to x-axis <180.> speed <180.>;
	wait-for-turn spindle around x-axis;
	move barrel4 to z-axis [6.] now;
	show flare;
	sleep 150;
	hide flare;
	move barrel4 to z-axis [0.] speed [12.];
	turn spindle to x-axis <-120.> speed <180.>;
	wait-for-turn spindle around x-axis;
	move barrel5 to y-axis [5.] now;
	move barrel5 to z-axis [3.] now;
	show flare;
	sleep 150;
	hide flare;
	move barrel5 to y-axis [0.] speed [10.];
	move barrel5 to z-axis [0.] speed [6.];
	turn spindle to x-axis <-60.> speed <180.>;
	wait-for-turn spindle around x-axis;
	move barrel6 to y-axis [5.] now;
	move barrel6 to z-axis [-3.] now;
	show flare;
	sleep 150;
	hide flare;
	move barrel6 to y-axis [0.] speed [10.];
	move barrel6 to z-axis [0.] speed [6.];
	turn spindle to x-axis <0.> speed <180.>;
	wait-for-turn spindle around x-axis;
	Static_Var_1 = 1;
}

TargetCleared(Func_Var_1)
{
	if( Func_Var_1 == 1 )
	{
		signal 2;
		stop-spin turret around y-axis;
		stop-spin rotate around x-axis;
	}
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = spindle;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode barrel3 type BITMAPONLY | BITMAP1;
		explode barrel4 type BITMAPONLY | BITMAP1;
		explode barrel5 type BITMAPONLY | BITMAP1;
		explode barrel6 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode sleeve1 type BITMAPONLY | BITMAP3;
		explode sleeve2 type BITMAPONLY | BITMAP3;
		explode sleeve3 type BITMAPONLY | BITMAP3;
		explode sleeve4 type BITMAPONLY | BITMAP3;
		explode sleeve5 type BITMAPONLY | BITMAP3;
		explode sleeve6 type BITMAPONLY | BITMAP3;
		explode spindle type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode barrel3 type BITMAPONLY | BITMAP1;
		explode barrel4 type BITMAPONLY | BITMAP1;
		explode barrel5 type BITMAPONLY | BITMAP1;
		explode barrel6 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode sleeve1 type FALL | BITMAP3;
		explode sleeve2 type FALL | BITMAP3;
		explode sleeve3 type FALL | BITMAP3;
		explode sleeve4 type FALL | BITMAP3;
		explode sleeve5 type FALL | BITMAP3;
		explode sleeve6 type FALL | BITMAP3;
		explode spindle type SHATTER | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode barrel3 type BITMAPONLY | BITMAP1;
		explode barrel4 type BITMAPONLY | BITMAP1;
		explode barrel5 type BITMAPONLY | BITMAP1;
		explode barrel6 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleeve3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleeve4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleeve5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleeve6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode spindle type SHATTER | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode barrel1 type BITMAPONLY | BITMAP1;
	explode barrel2 type BITMAPONLY | BITMAP1;
	explode barrel3 type BITMAPONLY | BITMAP1;
	explode barrel4 type BITMAPONLY | BITMAP1;
	explode barrel5 type BITMAPONLY | BITMAP1;
	explode barrel6 type BITMAPONLY | BITMAP1;
	explode base type BITMAPONLY | BITMAP5;
	explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleeve3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleeve4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleeve5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleeve6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode spindle type SHATTER | BITMAP4;
	explode turret type BITMAPONLY | BITMAP5;
}
