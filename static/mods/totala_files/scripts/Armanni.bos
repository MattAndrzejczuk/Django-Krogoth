#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, case5, case6, case1, case2, case4, case3,
       plate1, arm, container1, container2, door1, barrel, energy, door2,
       plate2, radar, gun, turret;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		move case5 to y-axis [0.] now;
		move case5 to y-axis [-7.] speed [14.];
		move case6 to y-axis [0.] now;
		move case6 to y-axis [-7.] speed [14.];
		sleep 514;
	}
	if( TRUE )
	{
		turn case1 to z-axis <89.> speed <172.>;
		sleep 518;
	}
	if( TRUE )
	{
		turn case2 to z-axis <-90.> speed <173.>;
		sleep 519;
	}
	if( TRUE )
	{
		turn case4 to z-axis <89.> speed <172.>;
		sleep 519;
	}
	if( TRUE )
	{
		turn case3 to z-axis <-90.> speed <172.>;
		sleep 521;
	}
	if( TRUE )
	{
		move plate1 to y-axis [6.] speed [12.];
		sleep 516;
	}
	if( TRUE )
	{
		move arm to y-axis [6.] speed [10.];
		sleep 518;
	}
	if( TRUE )
	{
		turn container1 to z-axis <90.> speed <174.>;
		sleep 519;
	}
	if( TRUE )
	{
		turn container2 to z-axis <-90.> speed <173.>;
		sleep 518;
	}
	if( TRUE )
	{
		move container1 to x-axis [2.] speed [3.];
		move container2 to x-axis [-2.] speed [3.];
		sleep 522;
	}
	if( TRUE )
	{
		turn door1 to x-axis <87.> speed <169.>;
		sleep 518;
	}
	if( TRUE )
	{
		move door1 to z-axis [-2.] speed [3.];
		sleep 519;
	}
	if( TRUE )
	{
		move barrel to z-axis [10.] speed [18.];
		move energy to z-axis [3.] speed [6.];
		sleep 518;
	}
	if( TRUE )
	{
		turn door2 to z-axis <91.> speed <177.>;
		sleep 516;
	}
	if( TRUE )
	{
		move door2 to x-axis [2.] speed [3.];
		sleep 523;
	}
	if( TRUE )
	{
		move plate2 to x-axis [-2.] speed [4.];
		sleep 517;
	}
	if( TRUE )
	{
		turn radar to x-axis <93.> speed <179.>;
		sleep 519;
	}
	sleep 169;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		stop-spin turret around y-axis;
		stop-spin gun around x-axis;
		turn turret to y-axis <0.> speed <100.>;
		turn gun to x-axis <0.> speed <100.>;
		move plate1 to y-axis [6.] now;
		move case5 to y-axis [-7.] now;
		move case6 to y-axis [-7.] now;
		move arm to y-axis [6.] now;
		move barrel to z-axis [10.] now;
		move container1 to x-axis [2.] now;
		move container2 to x-axis [-2.] now;
		move plate2 to x-axis [-2.] now;
		move door2 to x-axis [2.] now;
		move door1 to z-axis [-2.] now;
		move energy to z-axis [3.] now;
		turn case1 to z-axis <89.> now;
		turn case2 to z-axis <-90.> now;
		turn case3 to z-axis <-90.> now;
		turn case4 to z-axis <89.> now;
		turn container1 to z-axis <91.> now;
		turn container2 to z-axis <-90.> now;
		turn door2 to z-axis <92.> now;
		turn radar to x-axis <93.> now;
		turn radar to x-axis <0.> speed <364.>;
		turn door1 to x-axis <88.> now;
		sleep 256;
		wait-for-turn turret around y-axis;
		wait-for-turn gun around x-axis;
	}
	if( TRUE )
	{
		move plate2 to x-axis [0.] speed [8.];
		sleep 259;
	}
	if( TRUE )
	{
		move door2 to x-axis [0.] speed [6.];
		sleep 260;
	}
	if( TRUE )
	{
		turn door2 to z-axis <0.> speed <354.>;
		sleep 260;
	}
	if( TRUE )
	{
		move barrel to z-axis [0.] speed [36.];
		move energy to z-axis [0.] speed [12.];
		sleep 261;
	}
	if( TRUE )
	{
		move door1 to z-axis [0.] speed [6.];
		sleep 257;
	}
	if( TRUE )
	{
		turn door1 to x-axis <0.> speed <338.>;
		sleep 259;
	}
	if( TRUE )
	{
		move container1 to x-axis [0.] speed [6.];
		move container2 to x-axis [0.] speed [6.];
		sleep 260;
	}
	if( TRUE )
	{
		turn container2 to z-axis <0.> speed <346.>;
		sleep 260;
	}
	if( TRUE )
	{
		turn container1 to z-axis <0.> speed <347.>;
		sleep 261;
	}
	if( TRUE )
	{
		move arm to y-axis [0.] speed [20.];
		sleep 260;
	}
	if( TRUE )
	{
		move plate1 to y-axis [0.] speed [24.];
		sleep 260;
	}
	if( TRUE )
	{
		turn case3 to z-axis <0.> speed <348.>;
		sleep 259;
	}
	if( TRUE )
	{
		turn case4 to z-axis <0.> speed <345.>;
		sleep 259;
	}
	if( TRUE )
	{
		turn case2 to z-axis <0.> speed <344.>;
		sleep 262;
	}
	if( TRUE )
	{
		turn case1 to z-axis <0.> speed <346.>;
		sleep 258;
	}
	if( TRUE )
	{
		move case5 to y-axis [0.] speed [28.];
		move case6 to y-axis [0.] speed [28.];
		sleep 260;
	}
	sleep 80;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache arm;
	dont-cache barrel;
	dont-cache case1;
	dont-cache case2;
	dont-cache case3;
	dont-cache case4;
	dont-cache case5;
	dont-cache case6;
	dont-cache container1;
	dont-cache container2;
	dont-cache door1;
	dont-cache door2;
	dont-cache energy;
	dont-cache flare;
	dont-cache gun;
	dont-cache plate1;
	dont-cache plate2;
	dont-cache radar;
	dont-cache turret;
	set ARMORED to 0;
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	spin radar around x-axis speed <100.>;
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	stop-spin radar around x-axis;
	turn radar to x-axis <0.> speed <100.>;
	wait-for-turn radar around x-axis;
	call-script deactivatescr();
	set ARMORED to 1;
	cache arm;
	cache barrel;
	cache case1;
	cache case2;
	cache case3;
	cache case4;
	cache case5;
	cache case6;
	cache container1;
	cache container2;
	cache door1;
	cache door2;
	cache energy;
	cache flare;
	cache gun;
	cache plate1;
	cache plate2;
	cache radar;
	cache turret;
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	dont-shade arm;
	dont-shade barrel;
	dont-shade case1;
	dont-shade case2;
	dont-shade case3;
	dont-shade case4;
	dont-shade case5;
	dont-shade case6;
	dont-shade container1;
	dont-shade container2;
	dont-shade door1;
	dont-shade door2;
	dont-shade energy;
	dont-shade flare;
	dont-shade gun;
	dont-shade plate1;
	dont-shade plate2;
	dont-shade radar;
	dont-shade turret;
	hide flare;
	Static_Var_1 = 0;
	call-script InitState();
	Static_Var_2 = 3000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 5;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <50.>;
	turn gun to x-axis <0.> - pitch speed <50.>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 150;
	hide flare;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm type BITMAPONLY | BITMAP1;
		explode barrel type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode case1 type BITMAPONLY | BITMAP4;
		explode case2 type BITMAPONLY | BITMAP5;
		explode case3 type BITMAPONLY | BITMAP1;
		explode case4 type BITMAPONLY | BITMAP2;
		explode case5 type BITMAPONLY | BITMAP3;
		explode case6 type BITMAPONLY | BITMAP4;
		explode container1 type BITMAPONLY | BITMAP5;
		explode container2 type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode energy type BITMAPONLY | BITMAP4;
		explode flare type BITMAPONLY | BITMAP5;
		explode gun type BITMAPONLY | BITMAP1;
		explode plate1 type BITMAPONLY | BITMAP2;
		explode plate2 type BITMAPONLY | BITMAP3;
		explode radar type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm type BITMAPONLY | BITMAP1;
		explode barrel type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode case1 type BITMAPONLY | BITMAP4;
		explode case2 type BITMAPONLY | BITMAP5;
		explode case3 type BITMAPONLY | BITMAP1;
		explode case4 type BITMAPONLY | BITMAP2;
		explode case5 type BITMAPONLY | BITMAP3;
		explode case6 type BITMAPONLY | BITMAP4;
		explode container1 type BITMAPONLY | BITMAP5;
		explode container2 type BITMAPONLY | BITMAP1;
		explode door1 type FALL | BITMAP2;
		explode door2 type FALL | BITMAP3;
		explode energy type FALL | BITMAP4;
		explode flare type FALL | BITMAP5;
		explode gun type SHATTER | BITMAP1;
		explode plate1 type BITMAPONLY | BITMAP2;
		explode plate2 type BITMAPONLY | BITMAP3;
		explode radar type FALL | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm type BITMAPONLY | BITMAP1;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode case1 type BITMAPONLY | BITMAP4;
		explode case2 type BITMAPONLY | BITMAP5;
		explode case3 type BITMAPONLY | BITMAP1;
		explode case4 type BITMAPONLY | BITMAP2;
		explode case5 type BITMAPONLY | BITMAP3;
		explode case6 type BITMAPONLY | BITMAP3;
		explode container1 type BITMAPONLY | BITMAP4;
		explode container2 type BITMAPONLY | BITMAP5;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode energy type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode gun type SHATTER | BITMAP5;
		explode plate1 type BITMAPONLY | BITMAP1;
		explode plate2 type BITMAPONLY | BITMAP2;
		explode radar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode arm type BITMAPONLY | BITMAP1;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode case1 type BITMAPONLY | BITMAP4;
	explode case2 type BITMAPONLY | BITMAP5;
	explode case3 type BITMAPONLY | BITMAP1;
	explode case4 type BITMAPONLY | BITMAP2;
	explode case5 type BITMAPONLY | BITMAP3;
	explode case6 type BITMAPONLY | BITMAP3;
	explode container1 type BITMAPONLY | BITMAP4;
	explode container2 type BITMAPONLY | BITMAP5;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode energy type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode plate1 type BITMAPONLY | BITMAP1;
	explode plate2 type BITMAPONLY | BITMAP2;
	explode radar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type BITMAPONLY | BITMAP4;
}
