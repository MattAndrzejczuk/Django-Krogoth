#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lega2, lega3, lega5, lega6, legb2, legb3, legb5, legb6,
       lega1, lega4, legb1, legb4, base;

static-var  Static_Var_1;


walkscr()
{
	while( Static_Var_1 )
	{
		if( Static_Var_1 )
		{
			move lega2 to x-axis [0.] now;
			move lega2 to x-axis [0.] speed [0.];
			move lega2 to z-axis [0.] now;
			move lega2 to z-axis [0.] speed [8.];
			move lega3 to z-axis [0.] now;
			move lega3 to z-axis [0.] speed [8.];
			move lega5 to z-axis [0.] now;
			move lega5 to z-axis [-0.] speed [8.];
			move lega6 to z-axis [0.] now;
			move lega6 to z-axis [-0.] speed [8.];
			move legb2 to z-axis [0.] now;
			move legb2 to z-axis [0.] speed [8.];
			move legb3 to z-axis [0.] now;
			move legb3 to z-axis [0.] speed [8.];
			move legb5 to z-axis [0.] now;
			move legb5 to z-axis [-0.] speed [8.];
			move legb6 to z-axis [0.] now;
			move legb6 to z-axis [-0.] speed [8.];
			turn lega1 to x-axis <0.> now;
			turn lega1 to x-axis <45.> speed <1463.>;
			turn lega4 to x-axis <0.> now;
			turn lega4 to x-axis <44.> speed <1448.>;
			turn legb1 to x-axis <0.> now;
			turn legb1 to x-axis <45.> speed <1463.>;
			turn legb4 to x-axis <0.> now;
			turn legb4 to x-axis <45.> speed <1463.>;
			sleep 31;
		}
		if( Static_Var_1 )
		{
			move lega2 to z-axis [1.] speed [4.];
			move lega3 to z-axis [1.] speed [4.];
			move lega5 to z-axis [-1.] speed [4.];
			move lega6 to z-axis [-1.] speed [4.];
			move legb2 to z-axis [1.] speed [4.];
			move legb3 to z-axis [1.] speed [4.];
			move legb5 to z-axis [-1.] speed [4.];
			move legb6 to z-axis [-1.] speed [4.];
			turn lega1 to x-axis <89.> speed <1073.>;
			turn lega4 to x-axis <86.> speed <1015.>;
			turn legb1 to x-axis <89.> speed <1061.>;
			turn legb2 to z-axis <0.> speed <23.>;
			turn legb4 to x-axis <87.> speed <1015.>;
			sleep 42;
		}
		if( Static_Var_1 )
		{
			move lega1 to y-axis [-0.] speed [0.];
			move lega1 to z-axis [-0.] speed [4.];
			move lega2 to z-axis [1.] speed [4.];
			move lega3 to z-axis [1.] speed [4.];
			move lega4 to y-axis [0.] speed [0.];
			move lega4 to z-axis [0.] speed [4.];
			move lega5 to z-axis [-1.] speed [8.];
			move lega6 to z-axis [-1.] speed [4.];
			move legb1 to y-axis [-0.] speed [0.];
			move legb1 to z-axis [-0.] speed [4.];
			move legb2 to z-axis [1.] speed [4.];
			move legb3 to z-axis [1.] speed [4.];
			move legb4 to y-axis [0.] speed [0.];
			move legb4 to z-axis [0.] speed [4.];
			move legb5 to z-axis [-1.] speed [8.];
			move legb6 to z-axis [-1.] speed [4.];
			turn lega1 to x-axis <135.> speed <1109.>;
			turn lega4 to x-axis <135.> speed <1191.>;
			turn legb1 to x-axis <134.> speed <1097.>;
			turn legb2 to z-axis <0.> speed <23.>;
			turn legb4 to x-axis <135.> speed <1167.>;
			turn legb5 to z-axis <0.> speed <0.>;
			sleep 164;
		}
		move lega1 to y-axis [0.] speed [300.];
		move lega1 to z-axis [0.] speed [400.];
		move lega2 to x-axis [0.] speed [0.];
		move lega2 to z-axis [0.] speed [1696.];
		move lega3 to z-axis [0.] speed [1696.];
		move lega4 to y-axis [0.] speed [296.];
		move lega4 to z-axis [0.] speed [396.];
		move lega5 to z-axis [0.] speed [1796.];
		move lega6 to z-axis [0.] speed [1700.];
		move legb1 to y-axis [0.] speed [300.];
		move legb1 to z-axis [0.] speed [400.];
		move legb2 to z-axis [0.] speed [1700.];
		move legb3 to z-axis [0.] speed [1700.];
		move legb4 to y-axis [0.] speed [296.];
		move legb4 to z-axis [0.] speed [400.];
		move legb5 to z-axis [0.] speed [1796.];
		move legb6 to z-axis [0.] speed [1700.];
		turn lega1 to x-axis <0.> speed <67516.>;
		turn lega4 to x-axis <0.> speed <67755.>;
		turn legb1 to x-axis <0.> speed <67277.>;
		turn legb4 to x-axis <0.> speed <67516.>;
		turn legb5 to z-axis <0.> speed <0.>;
		sleep 1;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = Static_Var_1;
		if( Func_Var_1 )
		{
			call-script walkscr();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
		}
	}
}

Create()
{
	Static_Var_1 = 0;
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	Static_Var_1 = 1;
}

StopMoving()
{
	Static_Var_1 = 0;
}

SweetSpot(piecenum)
{
	piecenum = lega2;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode lega1 type FALL | BITMAP2;
		explode lega2 type FALL | BITMAP3;
		explode lega3 type FALL | BITMAP4;
		explode lega4 type FALL | BITMAP5;
		explode lega5 type FALL | BITMAP1;
		explode lega6 type SHATTER | BITMAP2;
		explode legb1 type FALL | BITMAP3;
		explode legb2 type FALL | BITMAP4;
		explode legb3 type FALL | BITMAP5;
		explode legb4 type FALL | BITMAP1;
		explode legb5 type FALL | BITMAP2;
		explode legb6 type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode lega1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lega2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lega3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lega4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lega5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lega6 type SHATTER | BITMAP2;
		explode legb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode legb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode legb3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode legb4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode legb5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode legb6 type SHATTER | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode lega1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lega2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lega3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lega4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lega5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lega6 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode legb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode legb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode legb3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode legb4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode legb5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode legb6 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
}
