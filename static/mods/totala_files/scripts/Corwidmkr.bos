#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wtf, door1, door2, baseplate, turretbase, turret, gun,
       barrel, flare, blackness;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Go()
{
	spin wtf around y-axis speed <200.>;
	move door1 to x-axis [10.] speed [1.];
	move door2 to x-axis [-10.] speed [1.];
	wait-for-move door1 along x-axis;
	wait-for-move door2 along x-axis;
	move door1 to x-axis [3.] speed [4.];
	move door2 to x-axis [-3.] speed [4.];
	wait-for-move door1 along x-axis;
	wait-for-move door2 along x-axis;
	move door1 to x-axis [0.] speed [1.];
	move door2 to x-axis [0.] speed [1.];
	move barrel to z-axis [-6.] now;
	move gun to z-axis [0.] now;
	set ARMORED to 0;
	move baseplate to y-axis [-3.] speed [5.];
	wait-for-move baseplate along y-axis;
	move baseplate to y-axis [-1.] speed [2.];
	wait-for-move baseplate along y-axis;
	move baseplate to y-axis [0.] speed [1.];
	wait-for-move baseplate along y-axis;
	move barrel to z-axis [0.] speed [8.];
	show baseplate;
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	stop-spin wtf around y-axis;
	wait-for-move barrel along z-axis;
	wait-for-move gun along z-axis;
	move gun to z-axis [0.] speed [2.];
	wait-for-move gun along z-axis;
	hide baseplate;
	move barrel to z-axis [-6.] speed [10.];
	move baseplate to y-axis [-1.] speed [1.];
	wait-for-move baseplate along y-axis;
	move baseplate to y-axis [-3.] speed [2.];
	wait-for-move baseplate along y-axis;
	move baseplate to y-axis [-20.] speed [5.];
	move door1 to x-axis [3.] speed [1.];
	move door2 to x-axis [-3.] speed [1.];
	wait-for-move door1 along x-axis;
	wait-for-move door2 along x-axis;
	move door1 to x-axis [10.] speed [4.];
	move door2 to x-axis [-10.] speed [4.];
	wait-for-move door1 along x-axis;
	wait-for-move door2 along x-axis;
	move door1 to x-axis [11.] speed [1.];
	move door2 to x-axis [-11.] speed [1.];
	wait-for-move baseplate along y-axis;
	set ARMORED to 1;
	move barrel to z-axis [0.] now;
	move gun to z-axis [0.] now;
}

InitState()
{
	Static_Var_4 = 1;
	Static_Var_5 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_5 )
	{
		Static_Var_4 = requestedstate;
		return (0);
	}
	Static_Var_5 = 1;
	currentstate = Static_Var_4;
	Static_Var_4 = requestedstate;
	while( Static_Var_4 != currentstate )
	{
		if( Static_Var_4 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_4 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_5 = 0;
}

Create()
{
	hide flare;
	hide baseplate;
	cache base;
	cache door1;
	cache door2;
	cache blackness;
	dont-cache door1;
	dont-cache door2;
	dont-cache baseplate;
	dont-cache turretbase;
	dont-cache turret;
	dont-cache gun;
	dont-cache barrel;
	dont-cache flare;
	dont-cache blackness;
	dont-cache wtf;
	dont-shade door1;
	dont-shade door2;
	dont-shade baseplate;
	dont-shade turretbase;
	dont-shade turret;
	dont-shade gun;
	dont-shade barrel;
	dont-shade flare;
	dont-shade blackness;
	dont-shade wtf;
	Static_Var_1 = 0;
	Static_Var_3 = 0;
	Static_Var_2 = 0;
	move baseplate to y-axis [-20.] now;
	move barrel to z-axis [-6.] now;
	move door1 to x-axis [11.] now;
	move door2 to x-axis [-11.] now;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	set ARMORED to 1;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	if( !get ACTIVATION )
	{
		return (0);
	}
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 250;
		if( !get ACTIVATION )
		{
			return (0);
		}
	}
	if( !get ACTIVATION )
	{
		return (0);
	}
	while( Static_Var_2 )
	{
		sleep 250;
		if( !get ACTIVATION )
		{
			return (0);
		}
	}
	if( !get ACTIVATION )
	{
		return (0);
	}
	turn turret to y-axis heading speed <5.>;
	turn gun to x-axis <0.> - pitch speed <2.>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	if( !get ACTIVATION )
	{
		return (0);
	}
	return (1);
}

FirePrimary()
{
	if( Static_Var_3 == 0 )
	{
		move barrel to z-axis [-2.] speed [500.];
		move gun to z-axis [-1.] speed [500.];
		wait-for-move barrel along z-axis;
		show flare;
		sleep 250;
		hide flare;
	}
	if( Static_Var_3 == 1 )
	{
		move barrel to z-axis [-3.] speed [500.];
		move gun to z-axis [-1.] speed [500.];
		wait-for-move barrel along z-axis;
		show flare;
		sleep 250;
		hide flare;
	}
	if( Static_Var_3 == 2 )
	{
		Static_Var_2 = 1;
		move barrel to z-axis [-5.] speed [500.];
		move gun to z-axis [-2.] speed [500.];
		wait-for-move barrel along z-axis;
		show flare;
		sleep 250;
		hide flare;
	}
	++Static_Var_3;
	if( Static_Var_3 == 3 )
	{
		if( !Static_Var_1 )
		{
			return (0);
		}
		move barrel to z-axis [0.] speed [3.];
		move gun to z-axis [0.] speed [2.];
		wait-for-move barrel along z-axis;
		wait-for-move gun along z-axis;
		sleep 16000;
		Static_Var_2 = 0;
		Static_Var_3 = 0;
	}
}

TargetCleared(Func_Var_1)
{
	if( Func_Var_1 == 1 )
	{
		signal 2;
		stop-spin turret around y-axis;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	hide blackness;
	if( severity <= 25 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 1;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 2;
		}
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode turretbase type BITMAPONLY | BITMAP2;
		explode gun type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 2;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 3;
		}
		explode barrel type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode turretbase type BITMAPONLY | BITMAP2;
		explode gun type SHATTER | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 3;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 4;
		}
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode turretbase type BITMAPONLY | BITMAP2;
		explode gun type SHATTER | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 4;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode turretbase type BITMAPONLY | BITMAP2;
	explode gun type SHATTER | BITMAP4;
	explode turret type BITMAPONLY | BITMAP5;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
