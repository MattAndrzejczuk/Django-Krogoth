#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, blink, beama, beamb, turreta, turretb, gunb, guna,
       explodpt1, explodpt2, slip;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	if( TRUE )
	{
		move turreta to y-axis [0.] now;
		move turreta to y-axis [7.] speed [5.];
		move turretb to y-axis [0.] now;
		move turretb to y-axis [7.] speed [5.];
		sleep 1177;
	}
	if( TRUE )
	{
		move turreta to y-axis [7.] speed [0.];
		move turretb to y-axis [7.] speed [0.];
		turn turreta to y-axis <-33.> speed <47.>;
		turn turretb to y-axis <-43.> speed <59.>;
		turn gunb to z-axis <71.> speed <99.>;
		turn gunb to x-axis <28.> speed <39.>;
		turn guna to z-axis <-66.> speed <92.>;
		turn guna to x-axis <-28.> speed <39.>;
		sleep 722;
	}
	sleep 11;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move turreta to y-axis [7.] now;
		move turreta to y-axis [7.] speed [0.];
		move turretb to y-axis [7.] now;
		move turretb to y-axis [7.] speed [0.];
		turn turreta to y-axis <-34.> now;
		turn turreta to y-axis <0.> speed <50.>;
		turn turretb to y-axis <-43.> now;
		turn turretb to y-axis <0.> speed <63.>;
		turn gunb to z-axis <72.> now;
		turn gunb to z-axis <0.> speed <106.>;
		turn gunb to x-axis <29.> now;
		turn gunb to x-axis <0.> speed <42.>;
		turn guna to z-axis <-67.> now;
		turn guna to z-axis <0.> speed <98.>;
		turn guna to x-axis <-29.> now;
		turn guna to x-axis <0.> speed <42.>;
		sleep 676;
	}
	if( TRUE )
	{
		move turreta to y-axis [0.] speed [5.];
		move turretb to y-axis [0.] speed [5.];
		sleep 1222;
	}
	sleep 7;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache beama;
	dont-cache beamb;
	dont-cache guna;
	dont-cache gunb;
	dont-cache turreta;
	dont-cache turretb;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beama;
	cache beamb;
	cache guna;
	cache gunb;
	cache turreta;
	cache turretb;
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	dont-shade blink;
	dont-cache blink;
	dont-cache beama;
	dont-shade beamb;
	dont-shade guna;
	dont-shade gunb;
	dont-shade turreta;
	dont-shade turretb;
	Static_Var_2 = 0;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	turn slip to y-axis <-90.> now;
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = beama;
		Static_Var_1 = 1;
		return (0);
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = beamb;
		Static_Var_1 = 0;
	}
}

Demo()
{
	Static_Var_2 = 1;
}

Activate()
{
	signal 2;
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	if( !Static_Var_2 )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

QueryBuildInfo(piecenum)
{
	piecenum = slip;
}

SweetSpot(piecenum)
{
	piecenum = blink;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beama type BITMAPONLY | BITMAP2;
		explode beamb type BITMAPONLY | BITMAP3;
		explode blink type BITMAPONLY | BITMAP4;
		explode guna type BITMAPONLY | BITMAP5;
		explode gunb type BITMAPONLY | BITMAP1;
		explode turreta type BITMAPONLY | BITMAP2;
		explode turretb type BITMAPONLY | BITMAP3;
		explode explodpt1 type BITMAPONLY | BITMAP2;
		explode explodpt2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP1;
		explode beama type FALL | BITMAP2;
		explode beamb type FALL | BITMAP3;
		explode blink type FALL | BITMAP4;
		explode guna type FALL | BITMAP5;
		explode gunb type FALL | BITMAP1;
		explode turreta type FALL | BITMAP2;
		explode turretb type FALL | BITMAP3;
		explode explodpt1 type FALL | BITMAP2;
		explode explodpt2 type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP1;
		explode beama type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beamb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode blink type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode guna type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gunb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turreta type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turretb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode explodpt1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode explodpt2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode beama type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beamb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode blink type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode guna type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gunb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turreta type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turretb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode explodpt1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode explodpt2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
