#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, head, firept, belly, lthigh, lleg, rleg, gun,
       pelvis, rthigh, lfoot, rfoot, ground;

static-var  Static_Var_1;


walk()
{
	while( TRUE )
	{
		if( TRUE )
		{
			move belly to y-axis [0.] now;
			move lthigh to y-axis [0.] now;
			move lleg to y-axis [1.] now;
			move rleg to y-axis [0.] now;
			move torso to y-axis [-0.] now;
			move gun to y-axis [0.] now;
			move firept to x-axis [0.] now;
			move firept to y-axis [0.] now;
			move firept to z-axis [0.] now;
			turn pelvis to z-axis <3.> now;
			turn belly to x-axis <-6.> now;
			turn rthigh to x-axis <14.> now;
			turn lthigh to x-axis <-45.> now;
			turn lleg to x-axis <-1.> now;
			turn lfoot to x-axis <11.> now;
			turn rleg to x-axis <6.> now;
			turn rfoot to x-axis <-14.> now;
			turn torso to x-axis <-0.> now;
			sleep 130;
		}
		if( TRUE )
		{
			move lthigh to y-axis [1.] now;
			move lleg to y-axis [0.] now;
			move torso to y-axis [0.] now;
			move firept to x-axis [1.] now;
			move firept to y-axis [0.] now;
			move firept to z-axis [-3.] now;
			turn pelvis to z-axis <7.> now;
			turn belly to x-axis <-5.> now;
			turn rthigh to x-axis <21.> now;
			turn lthigh to x-axis <-24.> now;
			turn lleg to x-axis <7.> now;
			turn lfoot to x-axis <17.> now;
			turn rleg to x-axis <13.> now;
			turn rfoot to x-axis <-4.> now;
			turn torso to x-axis <3.> now;
			sleep 130;
		}
		if( TRUE )
		{
			turn belly to x-axis <3.> now;
			sleep 130;
		}
		if( TRUE )
		{
			turn belly to x-axis <2.> now;
			turn torso to x-axis <12.> now;
			sleep 130;
		}
		if( TRUE )
		{
			move rthigh to y-axis [0.] now;
			move lthigh to y-axis [0.] now;
			move rleg to y-axis [0.] now;
			move torso to y-axis [-0.] now;
			turn pelvis to z-axis <5.> now;
			turn belly to x-axis <0.> now;
			turn rthigh to x-axis <14.> now;
			turn lthigh to x-axis <-14.> now;
			turn lfoot to x-axis <6.> now;
			turn rleg to x-axis <8.> now;
			turn rfoot to x-axis <-2.> now;
			turn torso to x-axis <5.> now;
			sleep 130;
		}
		if( TRUE )
		{
			move lthigh to y-axis [0.] now;
			move rleg to y-axis [1.] now;
			move torso to y-axis [-0.] now;
			turn pelvis to z-axis <4.> now;
			turn belly to x-axis <5.> now;
			turn rthigh to x-axis <4.> now;
			turn lthigh to x-axis <-1.> now;
			turn lfoot to x-axis <-6.> now;
			turn torso to x-axis <3.> now;
			sleep 120;
		}
		if( TRUE )
		{
			move lthigh to y-axis [0.] now;
			move torso to y-axis [-0.] now;
			turn pelvis to z-axis <0.> now;
			turn belly to x-axis <2.> now;
			turn rthigh to x-axis <-7.> now;
			turn lthigh to x-axis <4.> now;
			turn lfoot to x-axis <-12.> now;
			turn torso to x-axis <8.> now;
			sleep 110;
		}
		if( TRUE )
		{
			move rleg to y-axis [1.] now;
			move torso to y-axis [0.] now;
			turn pelvis to z-axis <-1.> now;
			turn belly to x-axis <-4.> now;
			turn rthigh to x-axis <-18.> now;
			turn lthigh to x-axis <9.> now;
			turn torso to x-axis <7.> now;
			sleep 110;
		}
		if( TRUE )
		{
			move rleg to y-axis [0.] now;
			turn pelvis to z-axis <-3.> now;
			turn belly to x-axis <-7.> now;
			turn rthigh to x-axis <-37.> now;
			turn lthigh to x-axis <16.> now;
			turn lfoot to x-axis <-6.> now;
			turn rleg to x-axis <-10.> now;
			turn torso to x-axis <2.> now;
			sleep 110;
		}
		if( TRUE )
		{
			move rthigh to y-axis [1.] now;
			move lleg to y-axis [0.] now;
			move torso to y-axis [0.] - [0.] now;
			turn pelvis to z-axis <-7.> now;
			turn belly to x-axis <1.> now;
			turn lthigh to x-axis <23.> now;
			turn lfoot to x-axis <-3.> now;
			turn rleg to x-axis <10.> now;
			turn rfoot to x-axis <27.> now;
			turn torso to x-axis <-2.> now;
			sleep 130;
		}
		if( TRUE )
		{
			turn belly to x-axis <13.> now;
			sleep 130;
		}
		if( TRUE )
		{
			turn belly to x-axis <9.> now;
			turn torso to x-axis <8.> now;
			sleep 130;
		}
		if( TRUE )
		{
			move rthigh to y-axis [0.] now;
			move lleg to y-axis [1.] now;
			move torso to y-axis [-0.] now;
			turn pelvis to z-axis <-5.> now;
			turn belly to x-axis <7.> now;
			turn rthigh to x-axis <-23.> now;
			turn lthigh to x-axis <16.> now;
			turn lfoot to x-axis <0.> now;
			turn rfoot to x-axis <12.> now;
			turn torso to x-axis <2.> now;
			sleep 120;
		}
		if( TRUE )
		{
			move rthigh to y-axis [0.] now;
			move lleg to y-axis [1.] now;
			move torso to y-axis [-0.] now;
			turn pelvis to z-axis <-4.> now;
			turn belly to x-axis <-3.> now;
			turn rthigh to x-axis <-11.> now;
			turn lthigh to x-axis <5.> now;
			turn lfoot to x-axis <-1.> now;
			turn rfoot to x-axis <0.> now;
			turn torso to x-axis <-4.> now;
			sleep 130;
		}
		if( TRUE )
		{
			move rthigh to y-axis [0.] now;
			move torso to y-axis [-0.] now;
			turn pelvis to z-axis <0.> now;
			turn belly to x-axis <-4.> now;
			turn rthigh to x-axis <1.> now;
			turn lthigh to x-axis <-12.> now;
			turn rfoot to x-axis <-12.> now;
			turn torso to x-axis <-1.> now;
			sleep 130;
		}
		move lleg to y-axis [1.] now;
		move torso to y-axis [-0.] now;
		turn pelvis to z-axis <1.> now;
		turn belly to x-axis <-5.> now;
		turn rthigh to x-axis <4.> now;
		turn lthigh to x-axis <-23.> now;
		turn torso to x-axis <1.> now;
		sleep 130;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	call-script walk();
}

StopMoving()
{
	signal 2;
	set-signal-mask 2;
	turn pelvis to z-axis <0.> speed <150.>;
	turn belly to x-axis <0.> speed <150.>;
	move torso to y-axis [0.] speed [1.];
	turn torso to x-axis <0.> speed <150.>;
	turn rthigh to x-axis <0.> speed <150.>;
	turn rleg to x-axis <0.> speed <150.>;
	turn rfoot to x-axis <0.> speed <150.>;
	turn lthigh to x-axis <0.> speed <150.>;
	turn lleg to x-axis <0.> speed <150.>;
	turn lfoot to x-axis <0.> speed <150.>;
}

Create()
{
	hide firept;
	Static_Var_1 = 3000;
	start-script StopMoving();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

AimFromPrimary(piecenum)
{
	piecenum = head;
}

QueryPrimary(piecenum)
{
	piecenum = firept;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn head to y-axis <0.> speed <135.>;
	turn gun to x-axis <0.> speed <85.>;
}

AimPrimary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn head to y-axis heading speed <270.>;
	turn gun to x-axis <0.> - pitch speed <170.>;
	wait-for-turn head around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move gun to z-axis [-2.] speed [25.];
	show firept;
	wait-for-move gun along z-axis;
	move gun to z-axis [0.] speed [1.];
	sleep 15;
	hide firept;
}

Killed(severity, corpsetype)
{
	hide firept;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode belly type BITMAPONLY | BITMAP1;
		explode firept type BITMAPONLY | BITMAP2;
		explode ground type BITMAPONLY | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode head type BITMAPONLY | BITMAP5;
		explode lfoot type BITMAPONLY | BITMAP1;
		explode lleg type BITMAPONLY | BITMAP2;
		explode lthigh type BITMAPONLY | BITMAP3;
		explode pelvis type BITMAPONLY | BITMAP4;
		explode rfoot type BITMAPONLY | BITMAP5;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rthigh type BITMAPONLY | BITMAP2;
		explode torso type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode belly type BITMAPONLY | BITMAP1;
		explode firept type FALL | BITMAP2;
		explode ground type FALL | BITMAP3;
		explode gun type FALL | BITMAP4;
		explode head type FALL | BITMAP5;
		explode lfoot type FALL | BITMAP1;
		explode lleg type FALL | BITMAP2;
		explode lthigh type SHATTER | BITMAP3;
		explode pelvis type FALL | BITMAP4;
		explode rfoot type FALL | BITMAP5;
		explode rleg type FALL | BITMAP1;
		explode rthigh type SHATTER | BITMAP2;
		explode torso type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode belly type BITMAPONLY | BITMAP1;
		explode firept type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lthigh type SHATTER | BITMAP3;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rthigh type SHATTER | BITMAP2;
		explode torso type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode belly type BITMAPONLY | BITMAP1;
	explode firept type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lthigh type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rthigh type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode torso type BITMAPONLY | BITMAP3;
}
