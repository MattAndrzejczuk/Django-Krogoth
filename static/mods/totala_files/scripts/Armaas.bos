#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, missileemitt1, missileemitt2, base, missilebox1, missilebox2, turretgun1,
       turretgun2, wake1, wake2, gunbarrel1, gunbarrel2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	hide flare2;
	hide flare1;
	Static_Var_1 = 0;
	Static_Var_3 = 0;
	Static_Var_2 = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 3;
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	turn turretgun1 to y-axis <0.> speed <75.>;
	turn turretgun2 to x-axis <0.> speed <75.>;
	turn missilebox1 to y-axis <0.> speed <75.>;
	turn missilebox1 to x-axis <0.> speed <75.>;
	turn missilebox2 to y-axis <0.> speed <75.>;
	turn missilebox2 to x-axis <0.> speed <75.>;
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		emit-sfx 4 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal 2;
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	if( Static_Var_3 == 0 )
	{
		turn missilebox1 to y-axis heading speed <455.>;
		turn missilebox1 to x-axis <0.> - pitch speed <430.>;
		wait-for-turn missilebox1 around y-axis;
		wait-for-turn missilebox1 around x-axis;
	}
	if( Static_Var_3 == 1 )
	{
		turn missilebox2 to y-axis heading speed <455.>;
		turn missilebox2 to x-axis <0.> - pitch speed <430.>;
		wait-for-turn missilebox2 around y-axis;
		wait-for-turn missilebox2 around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 8;
	set-signal-mask 8;
	turn turretgun1 to y-axis heading speed <755.>;
	turn turretgun2 to x-axis <0.> - pitch speed <730.>;
	wait-for-turn turretgun1 around y-axis;
	wait-for-turn turretgun2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	++Static_Var_3;
	if( Static_Var_3 == 2 )
	{
		Static_Var_3 = 0;
	}
}

FireTertiary()
{
	if( Static_Var_1 == 0 )
	{
		show flare1;
		move gunbarrel1 to z-axis [-2.] speed [500.];
		sleep 150;
		hide flare1;
		wait-for-move gunbarrel1 along z-axis;
		move gunbarrel1 to z-axis [0.] speed [3.];
		Static_Var_1 = 1;
		return (0);
	}
	if( Static_Var_1 == 1 )
	{
		show flare2;
		move gunbarrel2 to z-axis [-2.] speed [500.];
		sleep 150;
		hide flare2;
		wait-for-move gunbarrel2 along z-axis;
		move gunbarrel2 to z-axis [0.] speed [3.];
		Static_Var_1 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

AimFromSecondary(piecenum)
{
	if( Static_Var_3 == 0 )
	{
		piecenum = missilebox1;
	}
	if( Static_Var_3 == 1 )
	{
		piecenum = missilebox2;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = turretgun1;
}

QueryPrimary(piecenum)
{
	piecenum = base;
}

QuerySecondary(piecenum)
{
	if( Static_Var_3 == 0 )
	{
		piecenum = missileemitt1;
	}
	if( Static_Var_3 == 1 )
	{
		piecenum = missileemitt2;
	}
}

QueryTertiary(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = flare1;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode missilebox1 type BITMAPONLY | BITMAP2;
		explode missilebox2 type BITMAPONLY | BITMAP3;
		explode missileemitt1 type BITMAPONLY | BITMAP4;
		explode missileemitt2 type BITMAPONLY | BITMAP5;
		explode flare1 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP2;
		explode gunbarrel1 type BITMAPONLY | BITMAP3;
		explode gunbarrel2 type BITMAPONLY | BITMAP4;
		explode turretgun1 type BITMAPONLY | BITMAP1;
		explode turretgun2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode missilebox1 type SHATTER | BITMAP2;
		explode missilebox2 type BITMAPONLY | BITMAP3;
		explode missileemitt1 type FALL | BITMAP4;
		explode missileemitt2 type FALL | BITMAP5;
		explode flare1 type FALL | BITMAP1;
		explode flare2 type FALL | BITMAP2;
		explode gunbarrel1 type BITMAPONLY | BITMAP3;
		explode gunbarrel2 type BITMAPONLY | BITMAP4;
		explode turretgun1 type FALL | BITMAP1;
		explode turretgun2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode missilebox1 type SHATTER | BITMAP2;
		explode missilebox2 type BITMAPONLY | BITMAP3;
		explode missileemitt1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode missileemitt2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode flare1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode flare2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode gunbarrel1 type BITMAPONLY | BITMAP3;
		explode gunbarrel2 type BITMAPONLY | BITMAP4;
		explode turretgun1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode turretgun2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode missilebox1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode missilebox2 type BITMAPONLY | BITMAP3;
	explode missileemitt1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode missileemitt2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode flare1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode flare2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode gunbarrel1 type BITMAPONLY | BITMAP3;
	explode gunbarrel2 type BITMAPONLY | BITMAP4;
	explode turretgun1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode turretgun2 type BITMAPONLY | BITMAP2;
}
