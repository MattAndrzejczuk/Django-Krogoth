#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, barrel, flare, hydraudics, lholder, rholder;

static-var  Static_Var_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.>;
	turn base to z-axis anglez speed <50.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <20.>;
	turn base to x-axis <0.> speed <20.>;
}

Create()
{
	Static_Var_1 = 2000;
	hide flare;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn lholder to z-axis <0.> speed <50.>;
	turn rholder to z-axis <0.> speed <50.>;
	turn turret to y-axis <0.> speed <100.>;
	turn barrel to x-axis <0.> speed <50.>;
	turn hydraudics to x-axis <0.> speed <50.>;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn lholder to z-axis <-50.> speed <50.>;
	turn rholder to z-axis <50.> speed <50.>;
	turn turret to y-axis heading speed <100.>;
	turn barrel to x-axis <0.> - pitch speed <50.>;
	turn hydraudics to x-axis pitch speed <50.>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move barrel to z-axis [-3.] speed [500.];
	show flare;
	sleep 150;
	hide flare;
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.] speed [3.];
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode flare type BITMAPONLY | BITMAP1;
		explode hydraudics type BITMAPONLY | BITMAP1;
		explode lholder type BITMAPONLY | BITMAP1;
		explode rholder type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type SHATTER | BITMAP4;
		explode turret type SHATTER | BITMAP4;
		explode barrel type SHATTER | BITMAP4;
		explode hydraudics type SHATTER | BITMAP4;
		explode lholder type SHATTER | BITMAP4;
		explode rholder type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode hydraudics type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lholder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rholder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode hydraudics type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lholder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rholder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
