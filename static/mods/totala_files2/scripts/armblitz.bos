#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wheel1, loader, turret, launcher, rocket1, rocket2, rocket3,
       rocket4, rocket5, rocket6, smokybit1, smokybit2, smokybit3, smokybit4, smokybit5,
       smokybit6, wheel2, wheel3, wheel4, door1, door2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.>;
	turn base to x-axis Func_Var_1 speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

StartMoving()
{
	spin wheel1 around x-axis speed <80.> accelerate <15.>;
	spin wheel2 around x-axis speed <80.> accelerate <15.>;
	spin wheel3 around x-axis speed <80.> accelerate <15.>;
	spin wheel4 around x-axis speed <80.> accelerate <15.>;
}

StopMoving()
{
	stop-spin wheel1 around x-axis;
	stop-spin wheel2 around x-axis;
	stop-spin wheel3 around x-axis;
	stop-spin wheel4 around x-axis;
}

Create()
{
	Static_Var_1 = 3000;
	Static_Var_3 = 0;
	Static_Var_2 = 0;
	Static_Var_5 = 0;
	Static_Var_4 = 1;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
}

Reload()
{
	Static_Var_2 = 0;
	turn turret to y-axis <0.> speed <40.>;
	wait-for-turn turret around y-axis;
	turn launcher to x-axis <0.> speed <30.>;
	wait-for-turn launcher around x-axis;
	move loader to y-axis [0.] speed [4.];
	sleep 1000;
	move door1 to y-axis [0.] speed [3.];
	move door2 to y-axis [0.] speed [3.];
	wait-for-move door2 along y-axis;
	turn door1 to z-axis <0.> speed <60.>;
	turn door2 to z-axis <0.> speed <60.>;
	wait-for-turn door2 around z-axis;
	if( Static_Var_4 >= 4 )
	{
		Static_Var_5 = 1;
		show rocket1;
		show rocket2;
		show rocket3;
		show rocket4;
		show rocket5;
		show rocket6;
		sleep 26800;
		Static_Var_3 = 0;
		Static_Var_5 = 0;
		Static_Var_4 = 1;
	}
}

Launch()
{
	turn door1 to z-axis <90.> speed <60.>;
	turn door2 to z-axis <-90.> speed <60.>;
	wait-for-turn door2 around z-axis;
	move door1 to y-axis [-7.] speed [3.];
	move door2 to y-axis [-7.] speed [3.];
	sleep 400;
	move loader to y-axis [6.] speed [5.];
	wait-for-move loader along y-axis;
	Static_Var_2 = 1;
}

RestoreAfterDelay()
{
	set-signal-mask 2;
	sleep Static_Var_1;
	start-script Reload();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	if( Static_Var_4 == 1 )
	{
		piecenum = rocket1;
	}
	if( Static_Var_4 == 2 )
	{
		piecenum = rocket2;
	}
	if( Static_Var_4 == 3 )
	{
		piecenum = rocket3;
	}
	if( Static_Var_4 == 4 )
	{
		piecenum = rocket4;
	}
	if( Static_Var_4 == 5 )
	{
		piecenum = rocket5;
	}
	if( Static_Var_4 == 6 )
	{
		piecenum = rocket6;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimPrimary(heading, pitch)
{
	while( Static_Var_3 == 1 )
	{
		sleep 400;
	}
	while( Static_Var_5 == 1 )
	{
		sleep 400;
	}
	signal 2;
	set-signal-mask 2;
	if( Static_Var_2 == 0 )
	{
		start-script Launch();
	}
	while( Static_Var_2 == 0 )
	{
		sleep 100;
	}
	turn turret to y-axis heading speed <50.>;
	turn launcher to x-axis <0.> - pitch speed <30.>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_4 == 1 )
	{
		hide rocket1;
		emit-sfx 256 | 1 from smokybit1;
		Static_Var_4 = 2;
		return (0);
	}
	if( Static_Var_4 == 2 )
	{
		hide rocket2;
		emit-sfx 256 | 1 from smokybit2;
		Static_Var_4 = 3;
		return (0);
	}
	if( Static_Var_4 == 3 )
	{
		hide rocket3;
		emit-sfx 256 | 1 from smokybit3;
		Static_Var_4 = 4;
		return (0);
	}
	if( Static_Var_4 == 4 )
	{
		hide rocket4;
		emit-sfx 256 | 1 from smokybit4;
		Static_Var_4 = 5;
		return (0);
	}
	if( Static_Var_4 == 5 )
	{
		hide rocket5;
		emit-sfx 256 | 1 from smokybit5;
		Static_Var_4 = 6;
		return (0);
	}
	if( Static_Var_4 == 6 )
	{
		hide rocket6;
		emit-sfx 256 | 1 from smokybit6;
		Static_Var_4 = 7;
		Static_Var_3 = 1;
		start-script Reload();
		return (0);
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode wheel1 type BITMAPONLY | BITMAP1;
		explode loader type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		explode launcher type BITMAPONLY | BITMAP1;
		explode rocket1 type BITMAPONLY | BITMAP1;
		explode rocket2 type BITMAPONLY | BITMAP1;
		explode rocket3 type BITMAPONLY | BITMAP1;
		explode rocket4 type BITMAPONLY | BITMAP1;
		explode rocket5 type BITMAPONLY | BITMAP1;
		explode rocket6 type BITMAPONLY | BITMAP1;
		explode wheel2 type BITMAPONLY | BITMAP1;
		explode wheel3 type BITMAPONLY | BITMAP1;
		explode wheel4 type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode wheel1 type SHATTER | BITMAP4;
		explode loader type SHATTER | BITMAP4;
		explode turret type SHATTER | BITMAP4;
		explode launcher type SHATTER | BITMAP4;
		explode rocket1 type SHATTER | BITMAP4;
		explode rocket2 type SHATTER | BITMAP4;
		explode rocket3 type SHATTER | BITMAP4;
		explode rocket4 type BITMAPONLY | BITMAP4;
		explode rocket5 type BITMAPONLY | BITMAP4;
		explode rocket6 type BITMAPONLY | BITMAP4;
		explode wheel2 type SHATTER | BITMAP4;
		explode wheel3 type SHATTER | BITMAP4;
		explode wheel4 type SHATTER | BITMAP4;
		explode door1 type SHATTER | BITMAP4;
		explode door2 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode loader type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode launcher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rocket3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rocket4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rocket5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rocket6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wheel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wheel4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode loader type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode launcher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rocket3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rocket4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rocket5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rocket6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wheel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wheel4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
