#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, body, mlauncher, flare2, flare3, barrel1, barrel2,
       flare1;

static-var  Static_Var_1, Static_Var_2;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from turret;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver3.0 beta2 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.netzine.ml.org/DCS   
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.>;
	turn base to x-axis Func_Var_1 speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

Create()
{
	hide flare1;
	Static_Var_2 = 1;
	Static_Var_1 = 3000;
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn turret to y-axis <0.> speed <15.>;
}

RestoreAfterDelay2()
{
	sleep Static_Var_1;
	turn mlauncher to x-axis <0.> speed <35.>;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <40.>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move barrel1 to z-axis [-1.] speed [-24.];
	move barrel2 to z-axis [-2.] speed [-24.];
	wait-for-move barrel1 along z-axis;
	move barrel1 to z-axis [0.] speed [3.];
	move barrel2 to z-axis [0.] speed [3.];
	show flare1;
	sleep 150;
	hide flare1;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn mlauncher to x-axis <-90.> speed <40.>;
	wait-for-turn mlauncher around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FireSecondary()
{
	if( Static_Var_2 == 1 )
	{
		hide flare2;
		sleep 4550;
		show flare2;
	}
	if( Static_Var_2 == 2 )
	{
		hide flare3;
		sleep 4550;
		show flare3;
	}
	++Static_Var_2;
	if( Static_Var_2 == 3 )
	{
		Static_Var_2 = 1;
	}
}

QuerySecondary(piecenum)
{
	if( Static_Var_2 == 1 )
	{
		piecenum = flare2;
	}
	if( Static_Var_2 == 2 )
	{
		piecenum = flare3;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = body;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP4;
		explode body type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP2;
		return (1);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP4;
		explode turret type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode body type SHATTER | BITMAP2;
		explode barrel1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type SHATTER | BITMAP2;
		return (1);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP4;
		explode turret type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode body type SHATTER | BITMAP2;
		explode barrel1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type SHATTER | BITMAP2;
		return (1);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP5;
	explode turret type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode body type SHATTER | BITMAP3;
	explode barrel1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type SHATTER | BITMAP3;
	return (1);
}
