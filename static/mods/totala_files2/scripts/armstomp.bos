#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, panel, turret1, tur1back, tur1slv, tur1bar, flare1, turret2,
       tur2slv, tur2bar, flare2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.>;
	turn base to z-axis anglez speed <50.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <20.>;
	turn base to x-axis <0.> speed <20.>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.>;
	turn base to x-axis Func_Var_1 speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

activatescr()
{
	if( TRUE )
	{
		set ARMORED to 0;
		turn turret1 to y-axis <0.> speed <360.>;
		turn tur1slv to y-axis <0.> speed <180.>;
		wait-for-turn turret1 around y-axis;
		wait-for-turn tur1slv around x-axis;
	}
	if( TRUE )
	{
		move tur1back to z-axis [0.] speed [0.];
		move tur1bar to z-axis [-0.] speed [0.];
		wait-for-move tur1back along z-axis;
		turn panel to z-axis <180.> speed <270.>;
		turn turret2 to z-axis <0.> speed <270.>;
		wait-for-turn panel around z-axis;
		move tur2bar to z-axis [0.] speed [0.];
		wait-for-move tur2bar along z-axis;
	}
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		set ARMORED to 1;
		turn turret2 to y-axis <0.> speed <360.>;
		turn tur2slv to x-axis <0.> speed <180.>;
		wait-for-turn turret2 around y-axis;
		wait-for-turn tur2slv around x-axis;
	}
	if( TRUE )
	{
		move tur2bar to z-axis [-0.] speed [0.];
		wait-for-move tur2bar along z-axis;
		turn panel to z-axis <0.> speed <270.>;
		turn turret2 to z-axis <180.> speed <270.>;
		wait-for-turn turret2 around z-axis;
		move tur1back to z-axis [0.] speed [0.];
		move tur1bar to z-axis [0.] speed [0.];
		wait-for-move tur1bar along z-axis;
	}
	return (0);
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	Static_Var_1 = 2000;
	set ARMORED to 1;
	turn turret2 to z-axis <180.> now;
	Static_Var_2 = 60;
	hide flare1;
	hide flare2;
	call-script InitState();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	if( !get ACTIVATION )
	{
		turn turret1 to y-axis <0.> speed <360.>;
		turn tur1slv to x-axis <0.> speed <180.>;
	}
	if( get ACTIVATION )
	{
		turn turret2 to y-axis <0.> speed <360.>;
		turn tur2slv to x-axis <0.> speed <180.>;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare2;
}

AimFromPrimary(piecenum)
{
	piecenum = turret2;
}

AimPrimary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	if( !get ACTIVATION )
	{
		return (0);
	}
	if( get ACTIVATION )
	{
		turn turret2 to y-axis heading speed <360.>;
		turn tur2slv to x-axis <0.> - pitch speed <180.>;
		wait-for-turn turret2 around y-axis;
		wait-for-turn tur2slv around x-axis;
		start-script RestoreAfterDelay();
		return (1);
	}
}

FirePrimary()
{
	show flare2;
	turn tur2bar to z-axis Static_Var_2 speed <240.>;
	sleep 150;
	hide flare2;
	Static_Var_2 = Static_Var_2 + 60;
	if( Static_Var_2 >= 400 )
	{
		Static_Var_2 = 0;
	}
	wait-for-turn tur2bar around z-axis;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flare1;
}

AimFromSecondary(piecenum)
{
	piecenum = turret1;
}

AimSecondary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	if( get ACTIVATION )
	{
		return (0);
	}
	if( !get ACTIVATION )
	{
		turn turret1 to y-axis heading speed <360.>;
		turn tur1slv to x-axis <0.> - pitch speed <180.>;
		wait-for-turn turret1 around y-axis;
		wait-for-turn tur1slv around x-axis;
		start-script RestoreAfterDelay();
		return (1);
	}
}

FireSecondary()
{
	show flare1;
	move tur1bar to z-axis [-0.] speed [0.];
	sleep 150;
	hide flare1;
	move tur1bar to z-axis [0.] speed [0.];
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode panel type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode tur1back type BITMAPONLY | BITMAP1;
		explode tur1slv type BITMAPONLY | BITMAP1;
		explode tur1bar type BITMAPONLY | BITMAP1;
		explode flare1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP1;
		explode tur2slv type BITMAPONLY | BITMAP1;
		explode tur2bar type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode panel type SHATTER | BITMAP4;
		explode turret1 type SHATTER | BITMAP4;
		explode tur1back type SHATTER | BITMAP4;
		explode tur1slv type SHATTER | BITMAP4;
		explode tur1bar type SHATTER | BITMAP4;
		explode flare1 type SHATTER | BITMAP4;
		explode turret2 type SHATTER | BITMAP4;
		explode tur2slv type SHATTER | BITMAP4;
		explode tur2bar type SHATTER | BITMAP4;
		explode flare2 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode panel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode tur1back type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode tur1slv type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode tur1bar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode tur2slv type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode tur2bar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode panel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode tur1back type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode tur1slv type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode tur1bar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode tur2slv type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode tur2bar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}
