#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, radar, turret, canon, barrel, flare1, flare2, flare3,
       flare4, flare5, flare6, flare7, flare8;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.>;
	turn base to z-axis anglez speed <50.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <20.>;
	turn base to x-axis <0.> speed <20.>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.>;
	turn base to x-axis Func_Var_1 speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

Create()
{
	Static_Var_2 = 1;
	Static_Var_3 = 1;
	Static_Var_1 = 3000;
	spin radar around y-axis speed <60.>;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn turret to y-axis <0.> speed <35.>;
	turn barrel to x-axis <0.> speed <15.>;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <70.>;
	turn barrel to x-axis <0.> - pitch speed <50.>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	return (1);
}

FirePrimary()
{
	++Static_Var_2;
	if( Static_Var_2 == 5 )
	{
		Static_Var_2 = 1;
	}
}

FireSecondary()
{
	++Static_Var_3;
	if( Static_Var_3 == 5 )
	{
		Static_Var_3 = 1;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( Static_Var_2 == 1 )
	{
		piecenum = flare1;
	}
	if( Static_Var_2 == 2 )
	{
		piecenum = flare2;
	}
	if( Static_Var_2 == 3 )
	{
		piecenum = flare3;
	}
	if( Static_Var_2 == 4 )
	{
		piecenum = flare4;
	}
}

QuerySecondary(piecenum)
{
	if( Static_Var_3 == 1 )
	{
		piecenum = flare5;
	}
	if( Static_Var_3 == 2 )
	{
		piecenum = flare6;
	}
	if( Static_Var_3 == 3 )
	{
		piecenum = flare7;
	}
	if( Static_Var_3 == 4 )
	{
		piecenum = flare8;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare1 type BITMAPONLY | BITMAP3;
		explode flare2 type BITMAPONLY | BITMAP4;
		explode flare3 type BITMAPONLY | BITMAP5;
		explode flare4 type BITMAPONLY | BITMAP1;
		explode flare5 type BITMAPONLY | BITMAP2;
		explode flare6 type BITMAPONLY | BITMAP3;
		explode flare7 type BITMAPONLY | BITMAP4;
		explode flare8 type BITMAPONLY | BITMAP5;
		explode canon type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare1 type BITMAPONLY | BITMAP3;
		explode flare2 type BITMAPONLY | BITMAP4;
		explode flare3 type BITMAPONLY | BITMAP5;
		explode flare4 type BITMAPONLY | BITMAP1;
		explode flare5 type BITMAPONLY | BITMAP2;
		explode flare6 type BITMAPONLY | BITMAP3;
		explode flare7 type BITMAPONLY | BITMAP4;
		explode flare8 type BITMAPONLY | BITMAP5;
		explode canon type FALL | BITMAP1;
		explode turret type FALL | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare1 type BITMAPONLY | BITMAP3;
		explode flare2 type BITMAPONLY | BITMAP4;
		explode flare3 type BITMAPONLY | BITMAP5;
		explode flare4 type BITMAPONLY | BITMAP1;
		explode flare5 type BITMAPONLY | BITMAP2;
		explode flare6 type BITMAPONLY | BITMAP3;
		explode flare7 type BITMAPONLY | BITMAP4;
		explode flare8 type BITMAPONLY | BITMAP5;
		explode canon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2 type BITMAPONLY | BITMAP4;
	explode flare3 type BITMAPONLY | BITMAP5;
	explode flare4 type BITMAPONLY | BITMAP1;
	explode flare5 type BITMAPONLY | BITMAP2;
	explode flare6 type BITMAPONLY | BITMAP3;
	explode flare7 type BITMAPONLY | BITMAP4;
	explode flare8 type BITMAPONLY | BITMAP5;
	explode canon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
