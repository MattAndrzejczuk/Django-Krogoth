#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  barrel_main, barrel_main2, blod_turret, blod_flare1, blod_flare2, blod_flare3, firepoint, tribarrel_joint1,
       tribarrel_joint2, tribarrel_joint3, tribarrel_a1, tribarrel_a2, tribarrel_a3, tribarrel_b1, tribarrel_b2, tribarrel_b3,
       tribarrel_c1, tribarrel_c2, tribarrel_c3, flarea, barrelb1, barrelb2, barrelb3, base,
       guna, turreta, turretb, flareb1, flareb2, flareb3, wake1, wake2,
       sleeveb;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	dont-cache blod_turret;
	hide flarea;
	hide blod_flare1;
	hide blod_flare2;
	hide blod_flare3;
	hide flareb1;
	hide flareb2;
	hide flareb3;
	Static_Var_1 = 1;
	Static_Var_3 = 0;
	Static_Var_2 = 3000;
	turn tribarrel_joint2 to z-axis <120.> now;
	turn tribarrel_joint3 to z-axis <240.> now;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 3;
}

restoretertiary()
{
	sleep Static_Var_2;
	turn turretb to y-axis <0.> speed <25.>;
	turn turretb to x-axis <0.> speed <15.>;
}

RestoreAfterDelay()
{
	hide blod_flare1;
	hide blod_flare2;
	hide blod_flare3;
	sleep Static_Var_2;
	turn blod_turret to y-axis <0.> speed <35.>;
	turn tribarrel_c1 to x-axis <0.> speed <90.>;
	turn tribarrel_c2 to x-axis <0.> speed <90.>;
	turn tribarrel_c3 to x-axis <0.> speed <90.>;
	wait-for-turn tribarrel_c1 around x-axis;
	wait-for-turn tribarrel_c2 around x-axis;
	wait-for-turn tribarrel_c3 around x-axis;
	turn tribarrel_a1 to x-axis <0.> speed <60.>;
	turn tribarrel_a2 to x-axis <0.> speed <60.>;
	turn tribarrel_a3 to x-axis <0.> speed <60.>;
	move tribarrel_b1 to z-axis [0.] speed [5.];
	move tribarrel_b2 to z-axis [0.] speed [5.];
	move tribarrel_b3 to z-axis [0.] speed [5.];
	wait-for-turn tribarrel_a1 around x-axis;
	wait-for-turn tribarrel_a2 around x-axis;
	wait-for-turn tribarrel_a3 around x-axis;
	wait-for-move tribarrel_b1 along z-axis;
	wait-for-move tribarrel_b2 along z-axis;
	wait-for-move tribarrel_b3 along z-axis;
	move barrel_main to z-axis [0.] speed [5.];
	move barrel_main2 to z-axis [0.] speed [5.];
}

restoresecondary()
{
	sleep Static_Var_2;
	turn turreta to y-axis <0.> speed <100.>;
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal 8;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	hide blod_flare1;
	hide blod_flare2;
	hide blod_flare3;
	turn blod_turret to y-axis heading speed <75.>;
	move barrel_main to z-axis [5.] speed [10.];
	move barrel_main2 to z-axis [6.] speed [11.];
	wait-for-move barrel_main along z-axis;
	wait-for-move barrel_main2 along z-axis;
	turn tribarrel_a1 to x-axis <-59.> speed <120.>;
	turn tribarrel_a2 to x-axis <-59.> speed <120.>;
	turn tribarrel_a3 to x-axis <-59.> speed <120.>;
	move tribarrel_b1 to z-axis [6.] speed [11.];
	move tribarrel_b2 to z-axis [6.] speed [11.];
	move tribarrel_b3 to z-axis [6.] speed [11.];
	wait-for-turn tribarrel_a1 around x-axis;
	wait-for-turn tribarrel_a2 around x-axis;
	wait-for-turn tribarrel_a3 around x-axis;
	wait-for-move tribarrel_b1 along z-axis;
	wait-for-move tribarrel_b2 along z-axis;
	wait-for-move tribarrel_b3 along z-axis;
	turn tribarrel_c1 to x-axis <-89.> speed <180.>;
	turn tribarrel_c2 to x-axis <-89.> speed <180.>;
	turn tribarrel_c3 to x-axis <-89.> speed <180.>;
	wait-for-turn tribarrel_c1 around x-axis;
	wait-for-turn tribarrel_c2 around x-axis;
	wait-for-turn tribarrel_c3 around x-axis;
	wait-for-turn blod_turret around y-axis;
	wait-for-turn tribarrel_c3 around z-axis;
	turn tribarrel_c3 to z-axis <0.> now;
	show blod_flare1;
	sleep 250;
	show blod_flare2;
	sleep 250;
	show blod_flare3;
	sleep 250;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 8;
	set-signal-mask 8;
	turn turreta to y-axis heading speed <200.>;
	turn guna to z-axis <120.> speed <400.>;
	wait-for-turn guna around z-axis;
	turn guna to z-axis <0.> now;
	wait-for-turn turreta around y-axis;
	start-script restoresecondary();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn turretb to y-axis heading speed <25.>;
	turn turretb to x-axis <0.> - pitch speed <15.>;
	wait-for-turn turretb around y-axis;
	wait-for-turn turretb around x-axis;
	while( Static_Var_3 )
	{
		wait-for-move barrelb1 along z-axis;
		wait-for-move barrelb2 along z-axis;
		wait-for-move barrelb3 along z-axis;
		Static_Var_1 = 1;
		Static_Var_3 = 0;
	}
	start-script restoretertiary();
	return (1);
}

FirePrimary()
{
	hide blod_flare1;
	hide blod_flare2;
	hide blod_flare3;
	turn tribarrel_c3 to z-axis <24.> speed <5.>;
}

FireSecondary()
{
	show flarea;
	sleep 250;
	hide flarea;
}

FireTertiary()
{
	if( Static_Var_1 == 1 )
	{
		show flareb1;
		move barrelb1 to z-axis [-5.] now;
		sleep 150;
		hide flareb1;
		move barrelb1 to z-axis [0.] speed [1.];
	}
	if( Static_Var_1 == 2 )
	{
		show flareb2;
		move barrelb2 to z-axis [-5.] now;
		sleep 150;
		hide flareb2;
		move barrelb2 to z-axis [0.] speed [1.];
	}
	if( Static_Var_1 == 3 )
	{
		Static_Var_3 = 1;
		show flareb3;
		move barrelb3 to z-axis [-5.] now;
		sleep 150;
		hide flareb3;
		move barrelb3 to z-axis [0.] speed [1.];
	}
	++Static_Var_1;
}

AimFromPrimary(piecenum)
{
	piecenum = barrel_main;
}

QueryPrimary(piecenum)
{
	piecenum = firepoint;
}

AimFromSecondary(piecenum)
{
	piecenum = turreta;
}

QuerySecondary(piecenum)
{
	piecenum = flarea;
}

AimFromTertiary(piecenum)
{
	piecenum = turretb;
}

QueryTertiary(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = flareb1;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = flareb2;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = flareb3;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flarea;
	hide blod_flare1;
	hide blod_flare2;
	hide blod_flare3;
	hide flareb1;
	hide flareb2;
	hide flareb3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrelb1 type SHATTER | BITMAP4;
		explode barrelb2 type SHATTER | BITMAP4;
		explode barrelb3 type SHATTER | BITMAP4;
		explode base type SHATTER | BITMAP4;
		explode flarea type SHATTER | BITMAP4;
		explode blod_flare1 type SHATTER | BITMAP4;
		explode blod_flare2 type SHATTER | BITMAP4;
		explode blod_flare3 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrelb1 type SHATTER | BITMAP4;
		explode barrelb2 type SHATTER | BITMAP4;
		explode barrelb3 type SHATTER | BITMAP4;
		explode base type SHATTER | BITMAP4;
		explode flarea type SHATTER | BITMAP4;
		explode blod_flare1 type SHATTER | BITMAP4;
		explode blod_flare2 type SHATTER | BITMAP4;
		explode blod_flare3 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrelb1 type SHATTER | BITMAP4;
		explode barrelb2 type SHATTER | BITMAP4;
		explode barrelb3 type SHATTER | BITMAP4;
		explode base type SHATTER | BITMAP4;
		explode flarea type SHATTER | BITMAP4;
		explode blod_flare1 type SHATTER | BITMAP4;
		explode blod_flare2 type SHATTER | BITMAP4;
		explode blod_flare3 type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode barrelb1 type SHATTER | BITMAP4;
	explode barrelb2 type SHATTER | BITMAP4;
	explode barrelb3 type SHATTER | BITMAP4;
	explode base type SHATTER | BITMAP4;
	explode flarea type SHATTER | BITMAP4;
	explode blod_flare1 type SHATTER | BITMAP4;
	explode blod_flare2 type SHATTER | BITMAP4;
	explode blod_flare3 type SHATTER | BITMAP4;
}
