#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, slip, explode1, explode2, explode3, explode4, explode5, explode6,
       piling1, gun1, nano1, piling2, gun2, nano2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


activatescr()
{
	turn gun2 to x-axis <-30.> speed <30.>;
	turn gun1 to x-axis <-30.> speed <60.>;
	sleep 100;
	turn piling1 to y-axis <45.> speed <90.>;
	turn piling2 to y-axis <-135.> speed <120.>;
	wait-for-turn piling1 around y-axis;
	wait-for-turn piling2 around y-axis;
	sleep 500;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	turn piling1 to y-axis <45.> now;
	turn piling1 to y-axis <0.> speed <90.>;
	turn piling2 to y-axis <-135.> now;
	turn piling2 to y-axis <0.> speed <120.>;
	turn gun2 to x-axis <-30.> now;
	turn gun1 to x-axis <-30.> now;
	sleep 100;
	turn gun2 to x-axis <0.> speed <30.>;
	turn gun1 to x-axis <0.> speed <60.>;
	sleep 500;
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache nano1;
	dont-cache nano2;
	dont-cache gun1;
	dont-cache gun2;
	dont-cache piling1;
	dont-cache piling2;
	dont-cache slip;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache nano1;
	cache nano2;
	cache gun1;
	cache gun2;
	cache piling1;
	cache piling2;
	cache slip;
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	dont-shade nano1;
	dont-shade nano2;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade piling1;
	dont-shade piling2;
	dont-shade slip;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	call-script InitState();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = nano1;
	}
	if( Static_Var_1 != 0 )
	{
		piecenum = nano2;
	}
	Static_Var_1 = !Static_Var_1;
}

Demo()
{
	Static_Var_2 = 1;
}

Activate()
{
	signal 2;
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	if( !Static_Var_2 )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

QueryBuildInfo(piecenum)
{
	piecenum = slip;
}

SweetSpot(piecenum)
{
	piecenum = piling1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode nano1 type BITMAPONLY | BITMAP2;
		explode nano2 type BITMAPONLY | BITMAP3;
		explode explode1 type BITMAPONLY | BITMAP2;
		explode explode2 type BITMAPONLY | BITMAP3;
		explode explode3 type BITMAPONLY | BITMAP2;
		explode explode4 type BITMAPONLY | BITMAP3;
		explode explode5 type BITMAPONLY | BITMAP2;
		explode explode6 type BITMAPONLY | BITMAP3;
		explode gun1 type BITMAPONLY | BITMAP4;
		explode gun2 type BITMAPONLY | BITMAP5;
		explode piling1 type BITMAPONLY | BITMAP1;
		explode piling2 type BITMAPONLY | BITMAP2;
		explode slip type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode nano1 type BITMAPONLY | BITMAP2;
		explode nano2 type BITMAPONLY | BITMAP3;
		explode explode1 type BITMAPONLY | BITMAP2;
		explode explode2 type BITMAPONLY | BITMAP3;
		explode explode3 type BITMAPONLY | BITMAP2;
		explode explode4 type BITMAPONLY | BITMAP3;
		explode explode5 type BITMAPONLY | BITMAP2;
		explode explode6 type BITMAPONLY | BITMAP3;
		explode gun1 type BITMAPONLY | BITMAP4;
		explode gun2 type BITMAPONLY | BITMAP5;
		explode piling1 type BITMAPONLY | BITMAP1;
		explode piling2 type BITMAPONLY | BITMAP2;
		explode slip type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode nano1 type BITMAPONLY | BITMAP2;
	explode nano2 type BITMAPONLY | BITMAP3;
	explode explode1 type BITMAPONLY | BITMAP2;
	explode explode2 type BITMAPONLY | BITMAP3;
	explode explode3 type BITMAPONLY | BITMAP2;
	explode explode4 type BITMAPONLY | BITMAP3;
	explode explode5 type BITMAPONLY | BITMAP2;
	explode explode6 type BITMAPONLY | BITMAP3;
	explode gun1 type BITMAPONLY | BITMAP4;
	explode gun2 type BITMAPONLY | BITMAP5;
	explode piling1 type BITMAPONLY | BITMAP1;
	explode piling2 type BITMAPONLY | BITMAP2;
	explode slip type BITMAPONLY | BITMAP3;
}
