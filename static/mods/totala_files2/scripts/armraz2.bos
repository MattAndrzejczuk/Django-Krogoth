// Arm "Razorback" script

#define TA

#include "sfxtype.h"
#include "exptype.h"

piece  ground, hips, luparm, lloarm, lhand, fingerla, fingerlb, thumbl,
       ruparm, rloarm, rhand, fingerra, fingerrb, thumbr, body, arml,
       cannonl, flareb, canonbarrel1, armr, cannonr, flarea, canonbarrel2,
       EnrgyCell1, Enrgycell2, b1, b2, arm1, arm2, ar, al, calcarm, calcflare,
       calcpoint, turret, barrel, emit, axis;

static-var  restore_delay, gun, bMoving, heat,  baiming, movearms,  aimf, uv, headprim, aimtert;

#define SIG_MOVE			2
#define SIG_AIM			4
#define SIG_AIM2			16

startwalk()
{
	if( TRUE )
	{
		if (movearms) 
		{
			turn arml to x-axis <18> speed <9>;
			turn armr to x-axis <-18.000000> speed <18>;
		}
		turn luparm to x-axis <38.005495> speed <50.000000>;
		turn ruparm to x-axis <-38.005495> speed <50.000000>;
		turn lhand to x-axis <-28.005495> speed <70.000000>;
		turn rhand to x-axis <8.000000> speed <50.000000>;
		turn rloarm to x-axis <-30> speed <80>;
		turn body to x-axis <4.000000> speed <5.000000>;
		sleep 505;
		turn lhand to x-axis <38.005495> speed <100.000000>;
		turn rhand to x-axis <18.000000> speed <50.000000>;
		turn rloarm to x-axis <38.005495> speed <100.000000>;
		turn fingerla to x-axis <45.010989> speed <100.000000>;
		turn fingerlb to x-axis <45.010989> speed <100.000000>;
		turn thumbl to x-axis <-45.010989> speed <100.000000>;
		turn fingerra to x-axis <0.000000> speed <100.000000>;
		turn fingerrb to x-axis <0.000000> speed <100.000000>;
		sleep 450;
		turn thumbr to x-axis <0.000000> speed <100.000000>;
		move hips to y-axis [1.000000] speed [1.000000];
		turn hips to z-axis <3.000000> speed <3.000000>;
	}

	if( TRUE )
	{
		if (movearms) 
			{
				turn arml to x-axis <-18.000000> speed <20>;
				turn armr to x-axis <18> speed <20>;
			}
		turn luparm to x-axis <-38.005495> speed <50.000000>;
		turn ruparm to x-axis <38.005495> speed <50.000000>;
		turn rhand to x-axis <-38.005495> speed <130.000000>;
		turn lloarm to x-axis <-30> speed <80>;
		sleep 1050;
		turn rhand to x-axis <38.005495> speed <100.000000>;
		turn lloarm to x-axis <30.005495> speed <80.000000>;
		move hips to y-axis [0.000000] speed [2.000000];
		turn fingerla to x-axis <0.000000> speed <100.000000>;
		turn fingerlb to x-axis <0.000000> speed <100.000000>;
		turn fingerra to x-axis <45.010989> speed <100.000000>;
		turn fingerrb to x-axis <45.010989> speed <100.000000>;
		turn thumbr to x-axis <-45.010989> speed <100.000000>;
		sleep 450;
		turn thumbl to x-axis <0.000000> speed <100.000000>;
		move hips to y-axis [2.000000] speed [2.000000];
		turn hips to z-axis <-5.000000> speed <8.000000>;
		turn arml to x-axis <0.000000> speed <14.000000>;
		turn armr to x-axis <0.000000> speed <14.000000>;

	} 
}

walk()
{
		if( TRUE )
		{	
			if (movearms) 
				{
					turn arml to x-axis <18> speed <18>;
					turn armr to x-axis <-18> speed <18>;
					turn body to y-axis <-8.000000> speed <12.000000>;
					turn axis to y-axis <8.000000> speed <12.000000>;
				}

			turn body to x-axis <-3.000000> speed <6.000000>;
			turn luparm to x-axis <38.005495> speed <50.000000>;
			turn ruparm to x-axis <-38.005495> speed <50.000000>;
			turn lhand to x-axis <-38.005495> speed <130.000000>;
			turn rloarm to x-axis <-30> speed <80>;
			sleep 1050;
			turn lhand to x-axis <38.005495> speed <100.000000>;
			turn rhand to x-axis <38.005495> speed <70.000000>;
			turn rloarm to x-axis <30.005495> speed <100.000000>;
			move hips to y-axis [0.000000] speed [2.000000];
			turn fingerla to x-axis <45.010989> speed <100.000000>;
			turn fingerlb to x-axis <45.010989> speed <100.000000>;
			turn thumbl to x-axis <-45.010989> speed <100.000000>;
			turn fingerra to x-axis <0.000000> speed <100.000000>;
			turn fingerrb to x-axis <0.000000> speed <100.000000>;
			sleep 450;
			turn thumbr to x-axis <0.000000> speed <100.000000>;
			move hips to y-axis [1.000000] speed [1.000000];
			turn hips to z-axis <3.000000> speed <7.000000>;
		}

		if( TRUE )
		{	
			if (movearms) 
				{
					turn arml to x-axis <-18> speed <20>;
					turn armr to x-axis <18> speed <20>;
					turn body to y-axis <8.000000> speed <12.000000>;
					turn axis to y-axis <-8.000000> speed <12.000000>;
				}

			turn body to x-axis <4.000000> speed <6.000000>;
			turn luparm to x-axis <-38.005495> speed <50.000000>;
			turn ruparm to x-axis <38.005495> speed <50.000000>;
			turn rhand to x-axis <-38.005495> speed <130.000000>;
			turn lloarm to x-axis <-30> speed <100.000000>;
			sleep 1050;
			turn rhand to x-axis <38.005495> speed <100.000000>;
			turn lloarm to x-axis <30.005495> speed <80.000000>;
			move hips to y-axis [0.000000] speed [2.000000];
			turn fingerla to x-axis <0.000000> speed <100.000000>;
			turn fingerlb to x-axis <0.000000> speed <100.000000>;
			turn fingerra to x-axis <45.010989> speed <100.000000>;
			turn fingerrb to x-axis <45.010989> speed <100.000000>;
			turn thumbr to x-axis <-45.010989> speed <100.000000>;
			sleep 450;
			turn thumbl to x-axis <0.000000> speed <100.000000>;
			move hips to y-axis [1.000000] speed [1];
			turn hips to z-axis <-3.000000> speed <7.000000>;

		}
	
}


stopwalk()
{
		if( TRUE )
		{	

			turn luparm to x-axis <0.000000> speed <50.000000>;
			turn ruparm to x-axis <0.000000> speed <50.000000>;
			turn lloarm to x-axis <0.000000> speed <100.000000>;
			turn rloarm to x-axis <0.000000> speed <100.000000>;
			turn body to x-axis <0.000000> speed <20.000000>;
			move hips to y-axis [0.000000] speed [20.000000];
			turn hips to z-axis <0.000000> speed <20.000000>;
			turn fingerra to x-axis <0.000000> speed <100.000000>;
			turn fingerrb to x-axis <0.000000> speed <100.000000>;
			turn thumbr to x-axis <0.000000> speed <100.000000>;
			turn fingerla to x-axis <0.000000> speed <100.000000>;
			turn fingerlb to x-axis <0.000000> speed <100.000000>;
			turn thumbl to x-axis <0.000000> speed <100.000000>;
			turn rhand to x-axis <0.000000> speed <100.000000>;
			turn lhand to x-axis <0.000000> speed <100.000000>;
			turn body to x-axis <8.000000> speed <48.000000>;
		
			if( movearms )
			{
				turn arml to x-axis <-8.000000> speed <48.000000>;
				turn armr to x-axis <-8.000000> speed <48.000000>;
			}

			wait-for-turn body around x-axis;	
			wait-for-turn body around x-axis;
			turn body to x-axis <-1.000000> speed <48.000000>;
			wait-for-turn body around x-axis;
			turn body to x-axis <0.000000> speed <48.000000>;

			if( movearms )
			{
				turn arml to x-axis <0.000000> speed <48.000000>;
				turn armr to x-axis <0.000000> speed <48.000000>;
			}

			wait-for-turn body around x-axis;
		}
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


SmokeGun()
{	
	var  sleeptime;

	while( TRUE )
	{
		if( heat > 10 )
		{

			emit-sfx 256 | 1 from flarea;
			emit-sfx 256 | 1 from flareb;

		}
		sleeptime = (129 - heat) * 12;
		if( sleeptime < 80 )
		{
			sleeptime = 80;
		}
		sleep sleeptime;
	}
	return (0);
}


HeatControl()
{


	while(TRUE)
	{
		if (heat > 0 )
		{
			heat = heat - 1;
		}
		sleep 400;
	}
}


Demo()
{
	uv = TRUE;
}

Create()
{

	hide flarea;
	hide flareb;
	turn calcarm to x-axis <0> now;


	heat=0;
	gun = 0;
	uv = FALSE;
	bMoving = FALSE;
	bAiming = FALSE;
	aimtert = FALSE;
	movearms =TRUE;
	restore_delay = 3500;
	headprim = 0;

	dont-cache enrgycell1;
	dont-shade enrgycell1;
	dont-cache enrgycell2;
	dont-shade enrgycell2;

	start-script SmokeUnit();
	start-script SmokeGun();
	start-script HeatControl();
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	if (!baiming) 
	{
	headprim = 0;
	turn body to y-axis <0.000000> speed <60>;
	turn axis to y-axis <0.000000> speed <60>;
	}
	call-script startwalk();

	While (TRUE)
	{
		call-script walk();
	}
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	start-script stopwalk();
}


SweetSpot(piecenum)
{
	piecenum = body;
}


RestoreTertiary()
{
	sleep 4000;
	turn turret to y-axis headprim speed <50>;
	aimtert = FALSE;
}



RestoreAfterDelay(moving)
{	start-script RestoreTertiary();
	sleep restore_delay;
	moving=bMoving;
	stop-spin canonbarrel1 around z-axis decelerate <25>;
	stop-spin canonbarrel2 around z-axis decelerate <25>;
	turn cannonr to y-axis 0 speed <15>;
	turn cannonl to y-axis  0 speed  <15>;

	if (moving)
	{
	headprim = 0;
	turn body to y-axis <0.000000> speed <60>;
	turn axis to y-axis <0.000000> speed <60>;
		wait-for-turn body around y-axis;
	}

	if (!moving)
	{
		turn arml to x-axis <0.000000> speed <20.000000>;
		turn armr to x-axis <0.000000> speed <20.000000>;
		wait-for-turn arml around x-axis;
	}
	wait-for-turn cannonr around y-axis;
	movearms = TRUE;
	bAiming = FALSE;

}


AimFromPrimary(piecenum)
{
	piecenum = body;
}


QueryPrimary(piecenum)
{
	if( gun == 0 )
	{
		piecenum = flareb;
	}
	if( gun == 1 )
	{
		piecenum = flarea;
	}
}

AimPrimary(heading, pitch)
{	
	var flareheight, pointheight, dist;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;


	if(heat > 60)
	{
		sleep ((heat - 60) * 8);
	}

	if (heat == 0) {gun = rand(0,1);}
	spin canonbarrel1 around z-axis speed <2000> accelerate <25>;
	spin canonbarrel2 around z-axis speed <2000> accelerate <25>;

	movearms = FALSE;

	if (!uv) 
	{
		turn calcarm to x-axis <0> - pitch now;
		pointheight = get PIECE_Y(calcpoint);
		flareheight = get PIECE_Y(calcflare);
		if ( pointheight >= flareheight )
		{
			dist = (pointheight - flareheight)/480+360;
			turn cannonr to y-axis dist  speed <40>;
			turn cannonl to y-axis  <0> -  dist  speed <40>;
		}
		if ( pointheight < flareheight )
		{
			turn cannonr to y-axis 0 speed <40>;
			turn cannonl to y-axis 0 speed <40>;
		}
		turn body to y-axis heading speed <100>;
		turn axis to y-axis (1 - heading) speed <100>;
		if (!aimtert) {turn turret to y-axis heading speed <100>;}
		turn arml to x-axis <0> - pitch speed <40>;
		turn armr to x-axis <0> - pitch speed <40>;
	}
	
	if (uv)
	{
		turn body to y-axis heading speed <100>;
		turn axis to y-axis (1 - heading) speed <100>;
	}
	wait-for-turn body around y-axis;
	headprim = heading;
	wait-for-turn arml around x-axis;
	wait-for-turn armr around x-axis;
	wait-for-turn cannonr around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	heat = heat + 3;

	if( gun == 0 )
	{
		move b2 to z-axis [-2] speed [400];
		turn al to x-axis <20> speed <400>;
		turn cannonl to x-axis <-20> speed <400>;
	
		show flareb;
		sleep 100;
		hide flareb;

		move b2 to z-axis [0] speed [2];
		turn al to x-axis <0> speed <35>;
		turn cannonl to x-axis <0> speed <35>;

		gun = 1;
		return (0);
	}
	if( gun == 1 )
	{
		move b1 to z-axis [-2] speed [400];
		turn ar to x-axis <20> speed <400>;
		turn cannonr to x-axis <-20> speed <400>;

		show flarea;
		sleep 100;
		hide flarea;

		move b1 to z-axis [0] speed [2];
		turn ar to x-axis <0> speed <35>;
		turn cannonr to x-axis <0> speed <35>;

		gun = 0;
		return (0);
	}
}



AimFromTertiary(piecenum)
{
	piecenum = turret;
}


QueryTertiary(piecenum)
{
		piecenum = emit;
}

AimTertiary(heading, pitch)
{	aimtert = TRUE;
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn turret to y-axis heading speed <200>; //turn turret to y-axis (heading - headprim) speed <200>;
	wait-for-turn turret around y-axis;
	start-script RestoreTertiary();
	return (1);

}

FireTertiary()
{
		explode emit type BITMAPONLY | BITMAP5;
		move barrel to z-axis [-2] speed [400];
		sleep 150;
		move barrel to z-axis [0] speed [2];

}


Killed(severity, corpsetype)
{

		explode EnrgyCell1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode EnrgyCell2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;

	if( severity <= 25 )
	{
		corpsetype = 1;

		explode hips type BITMAPONLY | BITMAP1;
		explode luparm type BITMAPONLY | BITMAP1;
		explode lloarm type BITMAPONLY | BITMAP1;
		explode lhand type BITMAPONLY | BITMAP1;
		explode fingerla type BITMAPONLY | BITMAP1;
		explode fingerlb type BITMAPONLY | BITMAP1;
		explode thumbl type BITMAPONLY | BITMAP1;
		explode ruparm type BITMAPONLY | BITMAP1;
		explode rloarm type BITMAPONLY | BITMAP1;
		explode rhand type BITMAPONLY | BITMAP1;
		explode fingerra type BITMAPONLY | BITMAP1;
		explode fingerrb type BITMAPONLY | BITMAP1;
		explode thumbr type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP1;
		explode arml type BITMAPONLY | BITMAP1;
		explode cannonl type BITMAPONLY | BITMAP1;
		explode flareb type BITMAPONLY | BITMAP1;
		explode canonbarrel1 type BITMAPONLY | BITMAP1;
		explode armr type BITMAPONLY | BITMAP1;
		explode cannonr type BITMAPONLY | BITMAP1;
		explode flarea type BITMAPONLY | BITMAP1;
		explode canonbarrel2 type BITMAPONLY | BITMAP1;

		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;

		explode hips type SHATTER | BITMAP4;
		explode luparm type SHATTER | BITMAP4;
		explode lloarm type SHATTER | BITMAP4;
		explode lhand type SHATTER | BITMAP4;
		explode fingerla type SHATTER | BITMAP4;
		explode fingerlb type SHATTER | BITMAP4;
		explode thumbl type SHATTER | BITMAP4;
		explode ruparm type SHATTER | BITMAP4;
		explode rloarm type SHATTER | BITMAP4;
		explode rhand type SHATTER | BITMAP4;
		explode fingerra type SHATTER | BITMAP4;
		explode fingerrb type SHATTER | BITMAP4;
		explode thumbr type SHATTER | BITMAP4;
		explode body type SHATTER | BITMAP4;
		explode arml type SHATTER | BITMAP4;
		explode cannonl type SHATTER | BITMAP4;
		explode flareb type SHATTER | BITMAP4;
		explode canonbarrel1 type SHATTER | BITMAP4;
		explode armr type SHATTER | BITMAP4;
		explode cannonr type SHATTER | BITMAP4;
		explode flarea type SHATTER | BITMAP4;
		explode canonbarrel2 type SHATTER | BITMAP4;

		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode hips type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fingerla type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fingerlb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode thumbl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fingerra type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fingerrb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode thumbr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode arml type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode cannonl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flareb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode canonbarrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode armr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode cannonr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode canonbarrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;

		return (0);
	}
	corpsetype = 3;

	explode hips type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fingerla type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fingerlb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode thumbl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fingerra type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fingerrb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode thumbr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode arml type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode cannonl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode canonbarrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode armr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode cannonr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode canonbarrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;

}