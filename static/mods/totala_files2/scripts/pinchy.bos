#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, luparm, ruparm, pelvis, rthigh, lthigh, rlowarm, llowarm,
       lleg, lfoot, rleg, rfoot, head, lhand, piston, p1,
       p2, p3, p4, p5, p6, shield, backshield, armor,
       helm, pack, nanopiece, ml, flarerail, flaredgun, flaremissile, nano;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8, Static_Var_9;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from torso;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from pack;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from flaredgun;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver3.0 beta2 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.netzine.ml.org/DCS   
}

walk()
{
	if( Static_Var_2 )
	{
		turn torso to x-axis <6.> speed <50.>;
		turn torso to z-axis <10.> speed <10.>;
		turn rthigh to x-axis <17.> now;
		turn lthigh to x-axis <-41.> now;
		turn lleg to x-axis <31.> now;
		turn lfoot to x-axis <-4.> now;
		turn rleg to x-axis <17.> now;
		turn rfoot to x-axis <-27.> now;
		turn luparm to x-axis <6.> now;
		turn ruparm to x-axis <-14.> now;
		sleep 150;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <7.> now;
		turn lthigh to x-axis <-32.> now;
		turn lleg to x-axis <22.> now;
		turn lfoot to x-axis <-5.> now;
		turn rleg to x-axis <29.> now;
		turn rfoot to x-axis <-26.> now;
		turn luparm to x-axis <4.> now;
		turn ruparm to x-axis <-8.> now;
		sleep 160;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <-10.> now;
		turn lthigh to x-axis <-26.> now;
		turn lfoot to x-axis <9.> now;
		turn rleg to x-axis <41.> now;
		turn luparm to x-axis <0.> now;
		turn ruparm to x-axis <0.> now;
		sleep 150;
	}
	if( Static_Var_2 )
	{
		turn torso to z-axis <-10.> speed <10.>;
		turn torso to x-axis <-2.> speed <50.>;
		turn rthigh to x-axis <-19.> now;
		turn lthigh to x-axis <1.> now;
		turn lleg to x-axis <-4.> now;
		turn lfoot to x-axis <-8.> now;
		turn rleg to x-axis <42.> now;
		turn rfoot to x-axis <-22.> now;
		turn luparm to x-axis <-4.> now;
		turn ruparm to x-axis <8.> now;
		sleep 150;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <-41.> now;
		turn lthigh to x-axis <7.> now;
		turn lleg to x-axis <-1.> now;
		turn lfoot to x-axis <-16.> now;
		turn rleg to x-axis <40.> now;
		turn rfoot to x-axis <-5.> now;
		turn luparm to x-axis <-6.> now;
		turn ruparm to x-axis <14.> now;
		sleep 150;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <-49.> now;
		turn lthigh to x-axis <11.> now;
		turn lleg to x-axis <8.> now;
		turn lfoot to x-axis <-22.> now;
		turn rleg to x-axis <22.> now;
		turn luparm to x-axis <-10.> now;
		turn ruparm to x-axis <20.> now;
		sleep 160;
	}
	if( Static_Var_2 )
	{
		turn torso to z-axis <10.> speed <10.>;
		turn torso to x-axis <6.> speed <50.>;
		turn rthigh to x-axis <-44.> now;
		turn lthigh to x-axis <18.> now;
		turn lleg to x-axis <12.> now;
		turn lfoot to x-axis <-26.> now;
		turn rleg to x-axis <38.> now;
		turn rfoot to x-axis <-8.> now;
		turn luparm to x-axis <-6.> now;
		turn ruparm to x-axis <14.> now;
		sleep 170;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <-32.> now;
		turn lthigh to x-axis <3.> now;
		turn lleg to x-axis <33.> now;
		turn lfoot to x-axis <-27.> now;
		turn rleg to x-axis <30.> now;
		turn rfoot to x-axis <-12.> now;
		turn luparm to x-axis <-4.> now;
		turn ruparm to x-axis <8.> now;
		sleep 160;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <-25.> now;
		turn lthigh to x-axis <-11.> now;
		turn lleg to x-axis <47.> now;
		turn rleg to x-axis <25.> now;
		turn rfoot to x-axis <-15.> now;
		turn luparm to x-axis <0.> now;
		turn ruparm to x-axis <0.> now;
		sleep 150;
	}
	if( Static_Var_2 )
	{
		turn torso to z-axis <-10.> speed <10.>;
		turn torso to x-axis <-2.> speed <50.>;
		turn rthigh to x-axis <6.> now;
		turn lthigh to x-axis <-25.> now;
		turn lleg to x-axis <55.> now;
		turn lfoot to x-axis <-26.> now;
		turn rleg to x-axis <-7.> now;
		turn rfoot to x-axis <-11.> now;
		turn luparm to x-axis <4.> now;
		turn ruparm to x-axis <-8.> now;
		sleep 140;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <16.> now;
		turn lthigh to x-axis <-39.> now;
		turn lleg to x-axis <44.> now;
		turn lfoot to x-axis <-23.> now;
		turn rleg to x-axis <-3.> now;
		turn rfoot to x-axis <-18.> now;
		turn luparm to x-axis <6.> now;
		turn ruparm to x-axis <-14.> now;
		sleep 150;
	}
	turn rthigh to x-axis <22.> now;
	turn lthigh to x-axis <-47.> now;
	turn lleg to x-axis <30.> now;
	turn lfoot to x-axis <-7.> now;
	turn rleg to x-axis <0.> now;
	turn rfoot to x-axis <-23.> now;
	turn luparm to x-axis <10.> now;
	turn ruparm to x-axis <-20.> now;
	sleep 160;
}

walklegs()
{
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <17.> now;
		turn lthigh to x-axis <-41.> now;
		turn lleg to x-axis <41.> now;
		turn lfoot to x-axis <-4.> now;
		turn rleg to x-axis <27.> now;
		turn rfoot to x-axis <-27.> now;
		sleep 170;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <7.> now;
		turn lthigh to x-axis <-32.> now;
		turn lleg to x-axis <32.> now;
		turn lfoot to x-axis <-5.> now;
		turn rleg to x-axis <39.> now;
		turn rfoot to x-axis <-26.> now;
		sleep 160;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <-10.> now;
		turn lthigh to x-axis <-26.> now;
		turn lleg to x-axis <15.> now;
		turn lfoot to x-axis <-9.> now;
		turn rleg to x-axis <51.> now;
		turn rfoot to x-axis <-23.> now;
		sleep 150;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <-19.> now;
		turn lthigh to x-axis <1.> now;
		turn lleg to x-axis <6.> now;
		turn lfoot to x-axis <-8.> now;
		turn rleg to x-axis <52.> now;
		turn rfoot to x-axis <-22.> now;
		sleep 140;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <-41.> now;
		turn lthigh to x-axis <7.> now;
		turn lleg to x-axis <9.> now;
		turn lfoot to x-axis <-16.> now;
		turn rleg to x-axis <50.> now;
		turn rfoot to x-axis <-5.> now;
		sleep 150;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <-49.> now;
		turn lthigh to x-axis <11.> now;
		turn lleg to x-axis <18.> now;
		turn lfoot to x-axis <-22.> now;
		turn rleg to x-axis <32.> now;
		sleep 160;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <-44.> now;
		turn lthigh to x-axis <18.> now;
		turn lleg to x-axis <22.> now;
		turn lfoot to x-axis <-26.> now;
		turn rleg to x-axis <48.> now;
		turn rfoot to x-axis <-8.> now;
		sleep 150;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <-32.> now;
		turn lthigh to x-axis <3.> now;
		turn lleg to x-axis <43.> now;
		turn lfoot to x-axis <-27.> now;
		turn rleg to x-axis <40.> now;
		turn rfoot to x-axis <-12.> now;
		sleep 160;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <-25.> now;
		turn lthigh to x-axis <-11.> now;
		turn lleg to x-axis <62.> now;
		turn rleg to x-axis <35.> now;
		turn rfoot to x-axis <-15.> now;
		sleep 150;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <6.> now;
		turn lthigh to x-axis <-25.> now;
		turn lleg to x-axis <71.> now;
		turn lfoot to x-axis <-26.> now;
		turn rleg to x-axis <3.> now;
		turn rfoot to x-axis <-11.> now;
		sleep 170;
	}
	if( Static_Var_2 )
	{
		turn rthigh to x-axis <16.> now;
		turn lthigh to x-axis <-39.> now;
		turn lleg to x-axis <54.> now;
		turn lfoot to x-axis <-23.> now;
		turn rleg to x-axis <7.> now;
		turn rfoot to x-axis <-18.> now;
		sleep 150;
	}
	turn rthigh to x-axis <22.> now;
	turn lthigh to x-axis <-47.> now;
	turn lleg to x-axis <40.> now;
	turn lfoot to x-axis <-7.> now;
	turn rleg to x-axis <10.> now;
	turn rfoot to x-axis <-23.> now;
	sleep 160;
}

HitByWeapon(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 80 )
	{
		if( Static_Var_7 == 0 )
		{
			Static_Var_7 = 1;
			hide shield;
			explode shield type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
			explode backshield type SHATTER | EXPLODE_ON_HIT | BITMAP1;
			turn llowarm to z-axis <0.> now;
			turn llowarm to x-axis <-15.> now;
			turn luparm to x-axis <0.> now;
		}
	}
	if( Func_Var_3 <= 55 )
	{
		if( Static_Var_8 == 0 )
		{
			Static_Var_8 = 1;
			hide helm;
			explode helm type FALL | SMOKE | BITMAP5;
		}
	}
	if( Func_Var_3 <= 40 )
	{
		if( Static_Var_9 == 0 )
		{
			Static_Var_9 = 1;
			hide armor;
			explode armor type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		}
	}
}

Repairing(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = get HEALTH;
		if( Func_Var_1 == 45 )
		{
			if( Static_Var_9 == 1 )
			{
				Static_Var_9 = 0;
				show armor;
			}
		}
		if( Func_Var_1 == 60 )
		{
			if( Static_Var_8 == 1 )
			{
				Static_Var_8 = 0;
				show helm;
			}
		}
		if( Func_Var_1 == 85 )
		{
			if( Static_Var_7 == 1 )
			{
				Static_Var_7 = 0;
				show shield;
				show backshield;
				turn llowarm to z-axis <40.> speed <20.>;
				turn llowarm to x-axis <-90.> speed <20.>;
				turn luparm to x-axis <-45.> speed <20.>;
			}
		}
		sleep 10;
	}
}

stand()
{
	turn pelvis to y-axis <0.> speed <5.>;
	turn torso to z-axis <0.> speed <150.>;
	turn torso to x-axis <0.> speed <200.>;
	turn rthigh to x-axis <0.> speed <200.>;
	turn rleg to x-axis <0.> speed <200.>;
	turn rfoot to x-axis <0.> speed <200.>;
	turn lthigh to x-axis <0.> speed <200.>;
	turn lleg to x-axis <0.> speed <200.>;
	turn lfoot to x-axis <0.> speed <200.>;
	sleep 200;
}

RestoreAfterDelay2()
{
	set INBUILDSTANCE to 0;
	signal 8;
	set-signal-mask 8;
	if( Static_Var_7 == 1 )
	{
		turn llowarm to z-axis <0.> speed <50.>;
		turn llowarm to x-axis <-15.> speed <50.>;
		turn luparm to x-axis <0.> speed <50.>;
	}
	if( Static_Var_7 == 0 )
	{
		turn luparm to x-axis <-45.> speed <50.>;
		turn llowarm to x-axis <-90.> speed <50.>;
		turn llowarm to z-axis <40.> speed <50.>;
	}
	move lhand to y-axis [0.] speed [20.];
	move nanopiece to y-axis [0.] speed [20.];
	turn torso to y-axis <0.> speed <70.>;
	turn head to y-axis <0.> speed <90.>;
	Static_Var_3 = 0;
}

MotionControl(Func_Var_1, Func_Var_2)
{
	while( TRUE )
	{
		Func_Var_1 = Static_Var_2;
		Func_Var_2 = Static_Var_3;
		if( Func_Var_1 )
		{
			if( Func_Var_2 )
			{
				Static_Var_4 = 1;
				call-script walklegs();
			}
			if( !Func_Var_2 )
			{
				Static_Var_4 = 0;
				call-script walk();
			}
			if( !Static_Var_1 )
			{
				if( !Static_Var_3 )
				{
					start-script RestoreAfterDelay2();
				}
			}
		}
		if( !Func_Var_1 )
		{
			Static_Var_4 = 1;
			call-script stand();
		}
	}
}

Create()
{
	hide flarerail;
	hide flaredgun;
	hide flaremissile;
	hide nano;
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	Static_Var_4 = 1;
	Static_Var_1 = 0;
	Static_Var_5 = 0;
	Static_Var_7 = 0;
	Static_Var_8 = 0;
	Static_Var_9 = 0;
	dont-cache pack;
	Static_Var_6 = 3000;
	turn luparm to x-axis <-45.> now;
	turn llowarm to x-axis <-90.> now;
	turn llowarm to z-axis <40.> now;
	start-script MotionControl();
	start-script SmokeUnit();
	start-script Repairing();
}

StartMoving()
{
	Static_Var_2 = 1;
	Static_Var_1 = 0;
}

StopMoving()
{
	Static_Var_2 = 0;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

SetMaxReloadTime(Func_Var_1)
{
	if( Func_Var_1 )
	{
		Static_Var_6 = 6000;
	}
	if( Func_Var_1 <= 3000 )
	{
		Static_Var_6 = Func_Var_1 * 2;
	}
}

RestoreAfterDelay()
{
	sleep Static_Var_6;
	turn torso to y-axis <0.> speed <100.>;
	turn head to y-axis <0.> speed <90.>;
	turn ruparm to z-axis <0.> speed <65.>;
	turn rlowarm to z-axis <0.> speed <60.>;
	Static_Var_3 = 0;
	Static_Var_1 = 0;
}

RestoreAfterDelay3()
{
	sleep Static_Var_6;
	turn torso to y-axis <0.> speed <100.>;
	turn head to y-axis <0.> speed <90.>;
	turn ruparm to z-axis <0.> speed <65.>;
	turn rlowarm to z-axis <0.> speed <60.>;
	spin piston around y-axis speed <0.>;
	turn piston to y-axis <0.> now;
	Static_Var_3 = 0;
	Static_Var_1 = 0;
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

QueryPrimary(piecenum)
{
	piecenum = flaredgun;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	Static_Var_3 = 1;
	while( !Static_Var_4 )
	{
		sleep 100;
	}
	spin piston around y-axis speed <0.>;
	turn piston to y-axis <0.> now;
	turn torso to y-axis heading + <88.> speed <180.>;
	turn head to y-axis heading speed <250.>;
	turn ruparm to z-axis <70.> speed <60.>;
	turn rlowarm to z-axis <20.> speed <45.>;
	wait-for-turn ruparm around z-axis;
	wait-for-turn rlowarm around z-axis;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move piston to y-axis [1.] speed [-24.];
	show flaredgun;
	sleep 150;
	hide flaredgun;
	turn ruparm to z-axis <90.> speed <310.>;
	turn rlowarm to z-axis <70.> speed <310.>;
	sleep 450;
	wait-for-turn rlowarm around z-axis;
	wait-for-turn ruparm around z-axis;
	wait-for-move piston along y-axis;
	turn ruparm to z-axis <70.> speed <50.>;
	turn rlowarm to z-axis <20.> speed <50.>;
	move piston to y-axis [0.] speed [3.];
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	return (1);
}

FireSecondary()
{
	show flaremissile;
	sleep 250;
	hide flaremissile;
	return (1);
}

QuerySecondary(piecenum)
{
	piecenum = flaremissile;
	return (1);
}

AimFromTertiary(piecenum)
{
	piecenum = torso;
}

QueryTertiary(piecenum)
{
	piecenum = flarerail;
}

AimTertiary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	Static_Var_3 = 1;
	while( !Static_Var_4 )
	{
		sleep 100;
	}
	turn torso to y-axis heading + <88.> speed <180.>;
	turn head to y-axis heading speed <250.>;
	turn ruparm to z-axis <70.> speed <60.>;
	turn rlowarm to z-axis <20.> speed <45.>;
	spin piston around y-axis speed <200.>;
	wait-for-turn ruparm around z-axis;
	wait-for-turn rlowarm around z-axis;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

FireTertiary()
{
	move piston to y-axis [1.] speed [-24.];
	show flarerail;
	sleep 150;
	hide flarerail;
	move piston to y-axis [0.] speed [3.];
	return (1);
}

QueryNanoPiece(piecenum)
{
	piecenum = nano;
}

StartBuilding(Func_Var_1, Func_Var_2)
{
	signal 8;
	set-signal-mask 8;
	Static_Var_3 = 1;
	Static_Var_1 = 1;
	while( !Static_Var_4 )
	{
		sleep 100;
	}
	turn llowarm to x-axis <-45.> speed <60.>;
	turn luparm to x-axis <-45.> speed <60.>;
	turn llowarm to z-axis <0.> speed <60.>;
	turn head to y-axis Func_Var_1 speed <250.>;
	turn torso to y-axis Func_Var_1 speed <200.>;
	wait-for-turn torso around y-axis;
	wait-for-turn llowarm around z-axis;
	move lhand to y-axis [2.] speed [10.];
	wait-for-move lhand along y-axis;
	move nanopiece to y-axis [-3.] speed [10.];
	wait-for-move nanopiece along y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	Static_Var_1 = 0;
	call-script RestoreAfterDelay2();
}

Killed(severity, corpsetype)
{
	hide flaredgun;
	hide flarerail;
	hide flaremissile;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode llowarm type BITMAPONLY | BITMAP5;
		explode lthigh type BITMAPONLY | BITMAP1;
		explode luparm type BITMAPONLY | BITMAP2;
		explode rfoot type BITMAPONLY | BITMAP5;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rthigh type BITMAPONLY | BITMAP3;
		explode pack type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lfoot type FALL | BITMAP2;
		explode lleg type FALL | BITMAP4;
		explode llowarm type FALL | SMOKE | BITMAP5;
		explode lthigh type FALL | BITMAP1;
		explode luparm type FALL | SMOKE | BITMAP2;
		explode pelvis type FALL | BITMAP3;
		explode rfoot type FALL | BITMAP5;
		explode rleg type FALL | SMOKE | BITMAP1;
		explode rlowarm type FALL | BITMAP2;
		explode rthigh type FALL | SMOKE | BITMAP3;
		explode pack type FALL | SMOKE | BITMAP3;
		explode ruparm type FALL | BITMAP4;
		explode torso type SHATTER | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode llowarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rlowarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pack type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode torso type SHATTER | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode llowarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rlowarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pack type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP5;
}
