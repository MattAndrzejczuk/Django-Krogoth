#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, missile1, missile2, door1, door2, door3, door4, launch,
       turret, sleeve;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7;


activatescr()
{
	if( TRUE )
	{
		turn door1 to x-axis <90.> speed <120.>;
		turn door2 to x-axis <-90.> speed <120.>;
		turn door3 to z-axis <90.> speed <120.>;
		turn door4 to z-axis <-90.> speed <120.>;
		sleep 400;
	}
	if( TRUE )
	{
		move turret to y-axis [0.] speed [90.];
		sleep 300;
	}
	if( TRUE )
	{
		move sleeve to y-axis [0.] speed [45.];
		sleep 200;
	}
	if( TRUE )
	{
		turn launch to x-axis <0.> speed <170.>;
		wait-for-turn launch around x-axis;
	}
	sleep 100;
}

deactivatescr()
{
	if( TRUE )
	{
		turn launch to x-axis <90.> speed <120.>;
		wait-for-turn launch around x-axis;
	}
	if( TRUE )
	{
		move sleeve to y-axis [-4.] speed [60.];
		sleep 200;
	}
	if( TRUE )
	{
		move turret to y-axis [-15.] speed [100.];
		sleep 300;
	}
	if( TRUE )
	{
		turn door1 to x-axis <0.> speed <120.>;
		turn door2 to x-axis <0.> speed <120.>;
		turn door3 to z-axis <0.> speed <120.>;
		turn door4 to z-axis <0.> speed <120.>;
		sleep 400;
	}
	sleep 35;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache launch;
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	dont-cache missile1;
	dont-cache missile2;
	dont-cache sleeve;
	dont-cache turret;
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 100;
	Static_Var_1 = 0;
	call-script deactivatescr();
	cache launch;
	cache door1;
	cache door2;
	cache door3;
	cache door4;
	cache missile1;
	cache missile2;
	cache sleeve;
	cache turret;
}

InitState()
{
	Static_Var_6 = 1;
	Static_Var_7 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_7 )
	{
		Static_Var_6 = requestedstate;
		return (0);
	}
	Static_Var_7 = 1;
	currentstate = Static_Var_6;
	Static_Var_6 = requestedstate;
	while( Static_Var_6 != currentstate )
	{
		if( Static_Var_6 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_6 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_7 = 0;
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	start-script RequestState(1);
}

Create()
{
	turn door1 to x-axis <90.> speed <1000.>;
	turn door2 to x-axis <-90.> speed <1000.>;
	turn door3 to z-axis <90.> speed <1000.>;
	turn door4 to z-axis <-90.> speed <1000.>;
	dont-shade missile1;
	dont-shade base;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade missile2;
	dont-shade sleeve;
	dont-shade launch;
	dont-shade turret;
	hide missile1;
	hide missile2;
	Static_Var_5 = 1;
	Static_Var_1 = 1;
	Static_Var_2 = 3000;
	start-script SmokeUnit();
	call-script InitState();
	start-script RequestState(0);
	set-signal-mask 2;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <190.>;
	turn launch to x-axis <0.> - pitch speed <100.>;
	wait-for-turn turret around y-axis;
	wait-for-turn launch around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_5 == 1 )
	{
		show missile1;
		sleep 200;
		hide missile1;
	}
	if( Static_Var_5 == 2 )
	{
		show missile2;
		sleep 200;
		hide missile2;
	}
	++Static_Var_5;
	if( Static_Var_5 == 3 )
	{
		Static_Var_5 = 1;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = Static_Var_5;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide missile2;
	hide missile1;
	if( severity <= 25 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 1;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 2;
		}
		explode sleeve type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP2;
		explode door3 type BITMAPONLY | BITMAP2;
		explode door4 type BITMAPONLY | BITMAP2;
		explode missile2 type BITMAPONLY | BITMAP3;
		explode launch type BITMAPONLY | BITMAP4;
		explode missile1 type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 2;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 3;
		}
		explode missile2 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode door2 type FALL | BITMAP3;
		explode door3 type FALL | BITMAP3;
		explode door4 type FALL | BITMAP3;
		explode sleeve type FALL | BITMAP3;
		explode launch type BITMAPONLY | BITMAP4;
		explode missile1 type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 3;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 4;
		}
		explode launch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode missile1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode missile2 type BITMAPONLY | BITMAP4;
		explode sleeve type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 4;
	explode missile1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode launch type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode missile2 type BITMAPONLY | BITMAP5;
	explode turret type BITMAPONLY | BITMAP1;
}
