#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, cross, body, drum, barrel, flare, barreldrum, energybar;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


RestoreAfterDelay()
{
	sleep 20000;
	Static_Var_4 = 0;
	if( !Static_Var_3 )
	{
		signal 2;
		set-signal-mask 0;
		Static_Var_2 = 0;
		cache body;
		cache drum;
		cache barrel;
		cache flare;
		cache barreldrum;
		cache energybar;
		dont-shade body;
		dont-shade drum;
		dont-shade barrel;
		dont-shade flare;
		dont-shade barreldrum;
		dont-shade energybar;
		spin drum around z-axis speed <0.> accelerate <-10.>;
		spin barreldrum around z-axis speed <0.> accelerate <10.>;
		move body to y-axis [0.] speed [0.];
		wait-for-move body along y-axis;
		wait-for-turn drum around z-axis;
		wait-for-turn barreldrum around z-axis;
		if( !Static_Var_2 )
		{
			turn drum to z-axis <0.> speed <75.>;
			turn barreldrum to z-axis <0.> speed <-50.>;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		if( Static_Var_3 AND ( !Static_Var_4 ) )
		{
			Static_Var_3 = 0;
			Static_Var_4 = 1;
		}
		sleep sleeptime;
		if( ( !Static_Var_3 ) AND Static_Var_4 )
		{
			start-script RestoreAfterDelay();
		}
	}
}

Create()
{
	hide flare;
	dont-shade body;
	dont-shade drum;
	dont-shade barrel;
	dont-shade flare;
	dont-shade barreldrum;
	dont-shade energybar;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

Powerup()
{
	Static_Var_1 = 1;
	Static_Var_2 = 1;
	dont-cache body;
	dont-cache drum;
	dont-cache barrel;
	dont-cache flare;
	dont-cache barreldrum;
	dont-cache energybar;
	move body to y-axis [0.] now;
	spin drum around z-axis speed <0.>;
	spin barreldrum around z-axis speed <0.>;
	sleep 1000;
	spin drum around z-axis speed <1200.> accelerate <3.>;
	spin barreldrum around z-axis speed <-1200.> accelerate <-3.>;
	move body to y-axis [1.] speed [0.];
	wait-for-move body along y-axis;
	Static_Var_1 = 0;
}

AimPrimary(heading, pitch)
{
	if( !Static_Var_2 )
	{
		start-script Powerup();
		Static_Var_1 = 1;
	}
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn body to y-axis heading speed <20.>;
	turn body to x-axis <0.> - pitch speed <15.>;
	wait-for-turn body around y-axis;
	wait-for-turn body around x-axis;
	while( Static_Var_1 )
	{
		sleep 200;
	}
	Static_Var_3 = 1;
	return (1);
}

FirePrimary()
{
	Static_Var_2 = 0;
	cache body;
	cache drum;
	cache barrel;
	cache flare;
	cache barreldrum;
	cache energybar;
	dont-shade body;
	dont-shade drum;
	dont-shade barrel;
	dont-shade flare;
	dont-shade barreldrum;
	dont-shade energybar;
	show flare;
	emit-sfx 256 | 1 from drum;
	emit-sfx 256 | 1 from barreldrum;
	emit-sfx 256 | 1 from barrel;
	spin drum around z-axis speed <0.>;
	spin barreldrum around z-axis speed <0.>;
	move barrel to z-axis [-4.] now;
	move drum to z-axis [-1.] now;
	move barreldrum to z-axis [-3.] now;
	sleep 10;
	move body to y-axis [0.] now;
	sleep 140;
	hide flare;
	move barrel to z-axis [0.] speed [5.];
	move drum to z-axis [0.] speed [5.];
	move barreldrum to z-axis [0.] speed [2.];
	sleep 250;
	if( !Static_Var_2 )
	{
		turn drum to z-axis <0.> speed <75.>;
		turn barreldrum to z-axis <0.> speed <-50.>;
	}
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = drum;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode cross type BITMAPONLY | BITMAP4;
		explode body type BITMAPONLY | BITMAP3;
		explode drum type BITMAPONLY | BITMAP1;
		explode barrel type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode flare type BITMAPONLY | BITMAP3;
		explode barreldrum type BITMAPONLY | BITMAP1;
		explode energybar type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode cross type BITMAPONLY | BITMAP4;
		explode body type BITMAPONLY | BITMAP3;
		explode drum type BITMAPONLY | BITMAP1;
		explode barrel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode flare type SHATTER | BITMAP3;
		explode barreldrum type BITMAPONLY | BITMAP1;
		explode energybar type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode cross type BITMAPONLY | BITMAP4;
		explode body type BITMAPONLY | BITMAP3;
		explode drum type BITMAPONLY | BITMAP1;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode barreldrum type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode energybar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode cross type BITMAPONLY | BITMAP4;
	explode body type BITMAPONLY | BITMAP3;
	explode drum type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare type SHATTER | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barreldrum type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode energybar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
