 
piece flare1a ,flare1b ,flare2a ,sleeves ,sleeves2 ,flare2b ,base ,turret1 ,turret2 ,wake1 ,wake2 ,barrel1a ,barrel1b ,barrel2a ,barrel2b ;
static-var fire,fire1,restore_delay;

#define SIG_AIM1	2
#define SIG_AIM2	4
#define SIG_WAKE	8
#define SMOKEPIECE1 base
#include "smokeunit.h"
#include "exptype.h"
#include "SFXtype.h"

Create()
	{
	hide flare1a;
	hide flare1b;
	hide flare2a;
	hide flare2b;
	fire=0;
	fire1=0;
	restore_delay=3000;
	start-script SmokeUnit();
	}

SetMaxReloadTime(time)
	{
	restore_delay = time * 2;
	}

RestoreAfterDelay()
	{
	sleep restore_delay;
	stop-spin barrel1a around z-axis decelerate <25.000000>;
	stop-spin barrel1b around z-axis decelerate <25.000000>;
	turn turret1 to y-axis 0 speed <35>;
	turn sleeves to x-axis 0 speed <15>;
	turn turret2 to y-axis 0 speed <35>;
	turn sleeves2 to x-axis 0 speed <15>;
	}

StartMoving()
	{
	signal SIG_WAKE;
	set-signal-mask SIG_WAKE;
	while (TRUE)
		{
		emit-sfx SFXTYPE_WAKE1 from wake1;
		emit-sfx SFXTYPE_WAKE1 from wake2;
		sleep 150;
		}
	}

StopMoving()
	{
	signal SIG_WAKE;
	}

AimPrimary(heading,pitch)
	{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;
	turn turret1 to y-axis heading speed <145>;
	turn sleeves to x-axis (0-pitch) speed <95>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();	
	return(TRUE);
	}

AimSecondary(heading,pitch)
	{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn turret2 to y-axis heading speed <145>;
	turn sleeves2 to x-axis (0-pitch) speed <95>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeves2 around x-axis;
	start-script RestoreAfterDelay();	
	return(TRUE);
	}
FirePrimary()
	{
	if (fire==0)
		{
		show flare1a;
		move barrel1a to z-axis [-1.4] speed [300];
		spin barrel1a around z-axis speed <400.000000>;
		sleep 150;
		hide flare1a;
		wait-for-move barrel1a along z-axis;
		move barrel1a to z-axis [0] speed [3.0];
		}
	if (fire==1)
		{
		show flare1b;
		move barrel1b to z-axis [-1.4] speed [300];
		spin barrel1b around z-axis speed <400.000000>;
		sleep 150;
		hide flare1b;
		wait-for-move barrel1b along z-axis;
		move barrel1b to z-axis [0] speed [3.0];
		}
	fire = !fire;
	}

FireSecondary()
	{
	if (fire1==0)
		{
		show flare2a;
		move barrel2a to z-axis [-3.4] speed [300];
		sleep 150;
		hide flare2a;
		wait-for-move barrel2a along z-axis;
		move barrel2a to z-axis [0] speed [3.0];
		}
	if (fire1==1)
		{
		show flare2b;
		move barrel2b to z-axis [-3.4] speed [300];
		sleep 150;
		hide flare2b;
		wait-for-move barrel2b along z-axis;
		move barrel2b to z-axis [0] speed [3.0];
		}
	fire1 = !fire1;
	}

AimFromPrimary(piecenum)
	{
	piecenum=turret1;
	}
AimFromSecondary(piecenum)
	{
	piecenum=turret2;
	}
QueryPrimary(piecenum)
	{
	if (fire==0) {
		piecenum=flare1a; }
	if (fire==1) {
		piecenum=flare1b; }
	}

QuerySecondary(piecenum)
	{
	if (fire1==0) {
		piecenum=flare2a; }
	if (fire1==1) {
		piecenum=flare2b; }
	}

SweetSpot(piecenum)
	{
		piecenum = base;
	}
Killed(severity,corpsetype)
	{
		HIDE flare1a;
		HIDE flare1b;
		HIDE flare2a;
		HIDE flare2b;
		IF (severity <= 25 )
			{
			corpsetype = 1 ;
			EXPLODE  barrel1a type  	BITMAPONLY | BITMAP1;
			EXPLODE  barrel1b type  	BITMAPONLY | BITMAP2;
			EXPLODE  barrel2a type  	BITMAPONLY | BITMAP4;
			EXPLODE  barrel2b type  	BITMAPONLY | BITMAP5;
			EXPLODE  sleeves type	BITMAPONLY | BITMAP4;
			EXPLODE  sleeves2 type	BITMAPONLY | BITMAP4;
			EXPLODE  base type  	BITMAPONLY | BITMAP2;
			EXPLODE  flare1a type  	BITMAPONLY | BITMAP3;
			EXPLODE  flare1b type  	BITMAPONLY | BITMAP4;
			EXPLODE  flare2a type  	BITMAPONLY | BITMAP1;
			EXPLODE  flare2b type  	BITMAPONLY | BITMAP2;
			EXPLODE  turret1 type  	BITMAPONLY | BITMAP4;
			EXPLODE  turret2 type  	BITMAPONLY | BITMAP5;
			EXPLODE  wake1 type  	BITMAPONLY | BITMAP1;
			EXPLODE  wake2 type  	BITMAPONLY | BITMAP2;
			RETURN ( 0 );
			}
		IF (severity <= 50 )
			{
			corpsetype = 2 ;
			EXPLODE  sleeves type	BITMAPONLY | BITMAP4;
			EXPLODE  sleeves2 type	BITMAPONLY | BITMAP4;
			EXPLODE  barrel1a type  	FALL | EXPLODE_ON_HIT | BITMAP1;
			EXPLODE  barrel1b type  	FALL | EXPLODE_ON_HIT | BITMAP2;
			EXPLODE  barrel2a type  	FALL | EXPLODE_ON_HIT | BITMAP4;
			EXPLODE  barrel2b type  	FALL | EXPLODE_ON_HIT | BITMAP5;
			EXPLODE  base type  	BITMAPONLY | BITMAP2;
			EXPLODE  flare1a type  	FALL | EXPLODE_ON_HIT | BITMAP3;
			EXPLODE  flare1b type  	FALL | EXPLODE_ON_HIT | BITMAP4;
			EXPLODE  flare2a type  	FALL | EXPLODE_ON_HIT | BITMAP1;
			EXPLODE  flare2b type  	FALL | EXPLODE_ON_HIT | BITMAP2;
			EXPLODE  turret1 type  	BITMAPONLY | BITMAP4;
			EXPLODE  turret2 type  	SHATTER | BITMAP5;
			EXPLODE  wake1 type  	FALL | EXPLODE_ON_HIT | BITMAP1;
			EXPLODE  wake2 type  	FALL | EXPLODE_ON_HIT | BITMAP2;
			RETURN ( 0 );
			}
		corpsetype = 3 ;
		EXPLODE  sleeves type	BITMAPONLY | BITMAP4;
		EXPLODE  sleeves2 type	BITMAPONLY | BITMAP4;
		EXPLODE  barrel1a type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		EXPLODE  barrel1b type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		EXPLODE  barrel2a type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		EXPLODE  barrel2b type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		EXPLODE  base type  	BITMAPONLY | BITMAP2;
		EXPLODE  flare1a type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		EXPLODE  flare1b type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		EXPLODE  flare2a type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		EXPLODE  flare2b type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		EXPLODE  turret1 type  	BITMAPONLY | BITMAP4;
		EXPLODE  turret2 type  	SHATTER | EXPLODE_ON_HIT | BITMAP5;
		EXPLODE  wake1 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		EXPLODE  wake2 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	}
