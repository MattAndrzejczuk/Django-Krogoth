#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, launcher1, launcher2, turret, misbox, flare1, flare2, flare3;

static-var  Static_Var_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.>;
	turn base to x-axis Func_Var_1 speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
}

Create()
{
}

start_script()
{
	hide flare1;
	hide flare2;
	hide flare3;
	Static_Var_1 = 4000;
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn turret to y-axis <0.> speed <80.>;
	turn misbox to x-axis <0.> speed <80.>;
	turn launcher1 to x-axis <0.> speed <40.>;
	turn launcher2 to x-axis <0.> speed <40.>;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn launcher1 to x-axis <-90.> speed <40.>;
	wait-for-turn launcher1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn launcher2 to x-axis <-90.> speed <40.>;
	wait-for-turn launcher2 around x-axis;
	sleep 450;
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 8;
	set-signal-mask 8;
	turn turret to y-axis heading speed <300.>;
	turn misbox to x-axis <0.> - pitch speed <300.>;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare1;
}

FireSecondary()
{
	show flare2;
}

FireTertiary()
{
	show flare3;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

QueryTertiary(piecenum)
{
	piecenum = flare3;
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP4;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode flare3 type BITMAPONLY | BITMAP5;
		explode launcher1 type BITMAPONLY | BITMAP1;
		explode launcher2 type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP2;
		explode misbox type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode turret type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | BITMAP4;
		explode flare2 type FALL | BITMAP5;
		explode flare3 type FALL | BITMAP5;
		explode launcher1 type SHATTER | BITMAP1;
		explode launcher2 type FALL | BITMAP2;
		explode misbox type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode misbox type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launcher1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode launcher2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode launcher1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode launcher2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode misbox type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
