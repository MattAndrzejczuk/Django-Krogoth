#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  ground, base, top, sphere, shield1;

static-var  Static_Var_1, Static_Var_2;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

InitState()
{
	Static_Var_1 = 1;
	Static_Var_2 = 0;
}

Create()
{
	dont-shade top;
	dont-shade sphere;
	call-script InitState();
	start-script SmokeUnit();
	dont-shade shield1;
	dont-cache shield1;
	dont-cache sphere;
	spin shield1 around y-axis speed <200.>;
	hide shield1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	spin top around y-axis speed <-10.>;
	spin sphere around y-axis speed <50.>;
}

Go()
{
	set ARMORED to 1;
	show shield1;
}

Stop()
{
	set ARMORED to 0;
	hide shield1;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_2 )
	{
		Static_Var_1 = requestedstate;
		return (0);
	}
	Static_Var_2 = 1;
	currentstate = Static_Var_1;
	Static_Var_1 = requestedstate;
	while( Static_Var_1 != currentstate )
	{
		if( Static_Var_1 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_1 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_2 = 0;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode top type BITMAPONLY | BITMAP2;
		explode sphere type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode top type BITMAPONLY | BITMAP2;
		explode sphere type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode top type BITMAPONLY | BITMAP2;
		explode sphere type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode top type BITMAPONLY | BITMAP2;
	explode sphere type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
