#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, launcher, turret;

static-var  Static_Var_1, Static_Var_2;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.>;
	turn base to z-axis anglez speed <50.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <20.>;
	turn base to x-axis <0.> speed <20.>;
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.>;
	turn base to x-axis Func_Var_1 speed <105.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.> speed <30.>;
	turn base to x-axis <0.> speed <30.>;
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	cache base;
	cache launcher;
	dont-cache flare1;
	dont-cache flare1;
	dont-shade flare1;
	dont-shade flare2;
	Static_Var_2 = 0;
	Static_Var_1 = 3000;
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	turn base to x-axis <-8.> speed <6.>;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.> speed <4.>;
	return (0);
}

StopMoving()
{
	turn base to x-axis <0.> speed <2.>;
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn turret to y-axis <0.> speed <50.>;
	turn launcher to x-axis <0.> speed <34.>;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <175.>;
	turn launcher to x-axis <0.> - pitch speed <120.>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_2 == 0 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		Static_Var_2 = 1;
		return (0);
		return (0);
	}
	if( Static_Var_2 == 1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		Static_Var_2 = 0;
		return (0);
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = launcher;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = Static_Var_2;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type BITMAPONLY | BITMAP2;
		explode flare2 type BITMAPONLY | BITMAP3;
		explode launcher type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | BITMAP2;
		explode flare2 type FALL | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
