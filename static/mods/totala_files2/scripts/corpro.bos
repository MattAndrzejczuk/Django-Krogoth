#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  bombay, base, lw, rw, m1, m2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from m1;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from m2;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	turn rw to z-axis <-140.000000> speed <60.000000>;
	turn lw to z-axis <140.000000> speed <60.000000>;
}

Stop()
{
	turn rw to z-axis <0.000000> speed <20.000000>;
	turn lw to z-axis <0.000000> speed <20.000000>;
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = bombay;
}

SweetSpot(piecenum)
{
	piecenum = base;
}


AimSecondary()
{
	return (1);
}

AimTertiary()
{
	return (1);
}


QuerySecondary(piecenum)
{
	piecenum = m1;
}

QueryTertiary(piecenum)
{
	piecenum = m2;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode bombay type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lw type SHATTER | BITMAP1;
		explode rw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP1;
		explode bombay type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lw type SHATTER | BITMAP1;
		explode rw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP1;
		explode bombay type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rw type EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | BITMAP1;
	explode bombay type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lw type FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
