#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  body, nano1, nano2, nano3, nano4, nano5, nano6, target,
       base, buildinga, buildingb, light1, light2, light3, light4, glow1,
       glow2, glow3, glow4, pylon1, pylon2, pylon3, pylon4, pylon5,
       pylon6, loarm1, loarm2, loarm3, loarm4, loarm5, loarm6, midarm1,
       midarm2, midarm3, midarm4, midarm5, midarm6, higharm1, higharm2, higharm3,
       higharm4, higharm5, higharm6;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


activatescr()
{
	if( TRUE )
	{
		move buildinga to x-axis [8.] speed [1.];
		move buildingb to x-axis [-8.] speed [1.];
		sleep 750;
	}
	if( TRUE )
	{
		turn pylon1 to y-axis <-45.> speed <7.>;
		turn pylon3 to y-axis <45.> speed <7.>;
		turn pylon4 to y-axis <45.> speed <7.>;
		turn pylon6 to y-axis <-45.> speed <7.>;
		sleep 500;
	}
	if( TRUE )
	{
		turn loarm1 to z-axis <-113.> speed <18.>;
		turn loarm2 to z-axis <-113.> speed <18.>;
		turn loarm3 to z-axis <-113.> speed <18.>;
		turn loarm4 to z-axis <113.> speed <18.>;
		turn loarm5 to z-axis <113.> speed <18.>;
		turn loarm6 to z-axis <113.> speed <18.>;
		sleep 750;
	}
	if( TRUE )
	{
		turn midarm1 to z-axis <-45.> speed <12.>;
		turn midarm2 to z-axis <-45.> speed <12.>;
		turn midarm3 to z-axis <-45.> speed <12.>;
		turn midarm4 to z-axis <45.> speed <12.>;
		turn midarm5 to z-axis <45.> speed <12.>;
		turn midarm6 to z-axis <45.> speed <12.>;
		sleep 750;
	}
	if( TRUE )
	{
		turn higharm1 to z-axis <-45.> speed <9.>;
		turn higharm2 to z-axis <-45.> speed <9.>;
		turn higharm3 to z-axis <-45.> speed <9.>;
		turn higharm4 to z-axis <45.> speed <9.>;
		turn higharm5 to z-axis <45.> speed <9.>;
		turn higharm6 to z-axis <45.> speed <9.>;
		sleep 3500;
	}
	if( TRUE )
	{
		show nano1;
		explode nano1 type BITMAPONLY | BITMAP5;
		hide nano1;
		sleep 500;
	}
	if( TRUE )
	{
		show nano2;
		explode nano2 type BITMAPONLY | BITMAP5;
		hide nano2;
		sleep 500;
	}
	if( TRUE )
	{
		show nano3;
		explode nano3 type BITMAPONLY | BITMAP5;
		hide nano3;
		sleep 500;
	}
	if( TRUE )
	{
		show nano4;
		explode nano4 type BITMAPONLY | BITMAP5;
		hide nano4;
		sleep 500;
	}
	if( TRUE )
	{
		show nano5;
		explode nano5 type BITMAPONLY | BITMAP5;
		hide nano5;
		sleep 500;
	}
	if( TRUE )
	{
		show nano6;
		explode nano6 type BITMAPONLY | BITMAP5;
		hide nano6;
		sleep 500;
	}
	sleep 34;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		show nano6;
		explode nano6 type BITMAPONLY | BITMAP5;
		hide nano6;
		sleep 250;
	}
	if( TRUE )
	{
		show nano5;
		explode nano5 type BITMAPONLY | BITMAP5;
		hide nano5;
		sleep 250;
	}
	if( TRUE )
	{
		show nano4;
		explode nano4 type BITMAPONLY | BITMAP5;
		hide nano4;
		sleep 250;
	}
	if( TRUE )
	{
		show nano3;
		explode nano3 type BITMAPONLY | BITMAP5;
		hide nano3;
		sleep 250;
	}
	if( TRUE )
	{
		show nano2;
		explode nano2 type BITMAPONLY | BITMAP5;
		hide nano2;
		sleep 250;
	}
	if( TRUE )
	{
		show nano1;
		explode nano1 type BITMAPONLY | BITMAP5;
		hide nano1;
		sleep 250;
	}
	if( TRUE )
	{
		turn higharm6 to z-axis <0.> speed <10.>;
		turn higharm5 to z-axis <0.> speed <10.>;
		turn higharm4 to z-axis <0.> speed <10.>;
		turn higharm3 to z-axis <0.> speed <10.>;
		turn higharm2 to z-axis <0.> speed <10.>;
		turn higharm1 to z-axis <0.> speed <10.>;
		sleep 750;
	}
	if( TRUE )
	{
		turn midarm6 to z-axis <0.> speed <20.>;
		turn midarm5 to z-axis <0.> speed <20.>;
		turn midarm4 to z-axis <0.> speed <20.>;
		turn midarm3 to z-axis <0.> speed <20.>;
		turn midarm2 to z-axis <0.> speed <20.>;
		turn midarm1 to z-axis <0.> speed <20.>;
		sleep 750;
	}
	if( TRUE )
	{
		turn loarm6 to z-axis <0.> speed <30.>;
		turn loarm5 to z-axis <0.> speed <30.>;
		turn loarm4 to z-axis <0.> speed <30.>;
		turn loarm3 to z-axis <0.> speed <30.>;
		turn loarm2 to z-axis <0.> speed <30.>;
		turn loarm1 to z-axis <0.> speed <30.>;
		sleep 500;
	}
	if( TRUE )
	{
		turn pylon6 to y-axis <0.> speed <14.>;
		turn pylon4 to y-axis <0.> speed <14.>;
		turn pylon3 to y-axis <0.> speed <14.>;
		turn pylon1 to y-axis <0.> speed <14.>;
		sleep 750;
	}
	if( TRUE )
	{
		move buildingb to x-axis [0.] speed [3.];
		move buildinga to x-axis [0.] speed [3.];
		sleep 5000;
	}
	sleep 34;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

go()
{
	cache light1;
	cache light2;
	cache light3;
	cache light4;
	hide light1;
	hide light2;
	hide light3;
	hide light4;
	show glow1;
	show glow2;
	show glow3;
	show glow4;
	dont-cache glow1;
	dont-cache glow2;
	dont-cache glow3;
	dont-cache glow4;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache glow1;
	cache glow2;
	cache glow3;
	cache glow4;
	hide glow1;
	hide glow2;
	hide glow3;
	hide glow4;
	show light1;
	show light2;
	show light3;
	show light4;
	dont-cache light1;
	dont-cache light2;
	dont-cache light3;
	dont-cache light4;
	return (0);
}

InitState()
{
	Static_Var_2 = 1;
	Static_Var_3 = 0;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( Static_Var_2 == 0 )
		{
			call-script go();
			currentstate = 0;
		}
		if( Static_Var_2 == 1 )
		{
			call-script stop();
			currentstate = 1;
		}
	}
	Static_Var_3 = 0;
	return (0);
}

Create()
{
	Static_Var_1 = 1;
	hide nano1;
	hide nano2;
	hide nano3;
	hide nano4;
	hide nano5;
	hide nano6;
	dont-shade glow1;
	dont-shade glow2;
	dont-shade glow3;
	dont-shade glow4;
	hide glow1;
	hide glow2;
	hide glow3;
	hide glow4;
	dont-shade pylon1;
	dont-shade pylon2;
	dont-shade pylon3;
	dont-shade pylon4;
	dont-shade pylon5;
	dont-shade pylon6;
	dont-shade loarm1;
	dont-shade loarm2;
	dont-shade loarm3;
	dont-shade loarm4;
	dont-shade loarm5;
	dont-shade loarm6;
	dont-shade midarm1;
	dont-shade midarm2;
	dont-shade midarm3;
	dont-shade midarm4;
	dont-shade midarm5;
	dont-shade midarm6;
	dont-shade higharm1;
	dont-shade higharm2;
	dont-shade higharm3;
	dont-shade higharm4;
	dont-shade higharm5;
	dont-shade higharm6;
	dont-shade light1;
	dont-shade light2;
	dont-shade light3;
	dont-shade light4;
	dont-cache light1;
	dont-cache light2;
	dont-cache light3;
	dont-cache light4;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = nano1;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = nano2;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = nano3;
	}
	if( Static_Var_1 == 4 )
	{
		piecenum = nano4;
	}
	if( Static_Var_1 == 5 )
	{
		piecenum = nano5;
	}
	if( Static_Var_1 == 6 )
	{
		piecenum = nano6;
	}
	++Static_Var_1;
	if( Static_Var_1 == 7 )
	{
		Static_Var_1 = 1;
	}
	return (0);
}

Activate()
{
	signal 2;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = target;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = body;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		return (0);
	}
}
