#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, baseb, turret, canon1, canon2, flare1, flare2, laser,
       flarel1, flarel2, missil, miss1, miss2, roueg1, roueg2, roueg3,
       roued1, roued2, roued3, shell1, shell2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2, Func_Var_3)
{
	if( Func_Var_1 >= 100 )
	{
		turn base to z-axis Func_Var_3 speed <105.>;
		turn base to x-axis Func_Var_2 speed <105.>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
		turn base to z-axis <0.> speed <30.>;
		turn base to x-axis <0.> speed <30.>;
	}
}

StartMoving()
{
	spin roueg1 around x-axis speed <100.> accelerate <8.>;
	spin roueg2 around x-axis speed <100.> accelerate <8.>;
	spin roueg3 around x-axis speed <100.> accelerate <8.>;
	spin roued1 around x-axis speed <100.> accelerate <8.>;
	spin roued2 around x-axis speed <100.> accelerate <8.>;
	spin roued3 around x-axis speed <100.> accelerate <8.>;
}

StopMoving()
{
	spin roueg1 around x-axis speed <0.>;
	spin roueg2 around x-axis speed <0.>;
	spin roueg3 around x-axis speed <0.>;
	spin roued1 around x-axis speed <0.>;
	spin roued2 around x-axis speed <0.>;
	spin roued3 around x-axis speed <0.>;
}

Create()
{
	hide flarel1;
	hide flarel2;
	hide flare1;
	hide flare2;
	hide shell1;
	hide shell2;
	Static_Var_4 = 1;
	Static_Var_5 = 1;
	Static_Var_6 = 1;
	Static_Var_7 = 1;
	Static_Var_1 = 3000;
	start-script SmokeUnit();
}

TargetHeading(Func_Var_1)
{
	Static_Var_3 = 0 - Func_Var_1;
}

SetMaxReloadTime(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn canon1 to x-axis <0.> speed <100.>;
	turn canon2 to x-axis <0.> speed <100.>;
	turn turret to y-axis <0.> speed <70.>;
	turn laser to y-axis <0.> speed <100.>;
	wait-for-turn canon1 around x-axis;
	wait-for-turn canon2 around x-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn laser around y-axis;
}

RestoreAfterDelay2()
{
	sleep Static_Var_1;
	turn missil to x-axis <0.> speed <100.>;
	wait-for-turn missil around x-axis;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <120.>;
	turn canon1 to x-axis <0.> - pitch speed <50.>;
	turn canon2 to x-axis <0.> - pitch speed <50.>;
	wait-for-turn turret around y-axis;
	wait-for-turn canon1 around x-axis;
	wait-for-turn canon2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn laser to y-axis heading speed <200.>;
	wait-for-turn laser around y-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn canon1 around x-axis;
	wait-for-turn canon2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 8;
	set-signal-mask 8;
	turn missil to x-axis <-75.> speed <100.>;
	wait-for-turn missil around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FirePrimary()
{
	if( Static_Var_4 == 1 )
	{
		move canon1 to z-axis [-2.] speed [20.];
		show flare1;
		show shell1;
		explode shell1 type FALL;
		sleep 150;
		hide flare1;
		move canon1 to z-axis [0.] speed [10.];
		Static_Var_4 = 2;
		return (0);
	}
	if( Static_Var_4 == 2 )
	{
		move canon2 to z-axis [-2.] speed [20.];
		show flare2;
		show shell2;
		explode shell2 type FALL;
		sleep 150;
		hide flare2;
		move canon2 to z-axis [0.] speed [10.];
		Static_Var_4 = 1;
		return (0);
	}
}

FireSecondary()
{
	if( Static_Var_5 == 1 )
	{
		show flarel1;
		sleep 150;
		hide flarel1;
		Static_Var_5 = 2;
		return (0);
	}
	if( Static_Var_5 == 2 )
	{
		show flarel2;
		sleep 150;
		hide flarel2;
		Static_Var_5 = 1;
		return (0);
	}
}

FireTertiary()
{
	if( Static_Var_6 == 1 )
	{
		Static_Var_6 = 2;
		return (0);
	}
	if( Static_Var_6 == 2 )
	{
		Static_Var_6 = 1;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimFromSecondary(piecenum)
{
	piecenum = laser;
}

AimFromTertiary(piecenum)
{
}

QueryPrimary(piecenum)
{
	if( Static_Var_4 == 1 )
	{
		piecenum = flare1;
	}
	if( Static_Var_4 == 2 )
	{
		piecenum = flare2;
	}
}

QuerySecondary(piecenum)
{
	if( Static_Var_5 == 1 )
	{
		piecenum = flarel1;
	}
	if( Static_Var_5 == 2 )
	{
		piecenum = flarel2;
	}
}

QueryTertiary(piecenum)
{
	if( Static_Var_6 == 1 )
	{
		piecenum = miss1;
	}
	if( Static_Var_6 == 2 )
	{
		piecenum = miss2;
	}
}

SweetSpot(piecenum)
{
	piecenum = baseb;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode baseb type BITMAPONLY | BITMAP5;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode laser type BITMAPONLY | BITMAP3;
		explode missil type BITMAPONLY | BITMAP5;
		explode canon1 type BITMAPONLY | BITMAP1;
		explode canon2 type BITMAPONLY | BITMAP2;
		explode roueg1 type BITMAPONLY | BITMAP3;
		explode roueg2 type BITMAPONLY | BITMAP4;
		explode roueg3 type BITMAPONLY | BITMAP5;
		explode roued1 type BITMAPONLY | BITMAP1;
		explode roued2 type BITMAPONLY | BITMAP2;
		explode roued3 type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP2;
		explode flarel1 type BITMAPONLY | BITMAP3;
		explode flarel2 type BITMAPONLY | BITMAP5;
		explode miss1 type BITMAPONLY | BITMAP1;
		explode miss2 type BITMAPONLY | BITMAP2;
		explode shell1 type BITMAPONLY | BITMAP2;
		explode shell2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode baseb type BITMAPONLY | BITMAP5;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type FALL | BITMAP2;
		explode laser type FALL | BITMAP3;
		explode missil type FALL | BITMAP5;
		explode canon1 type BITMAPONLY | BITMAP1;
		explode canon2 type BITMAPONLY | BITMAP2;
		explode roueg1 type FALL | BITMAP3;
		explode roueg2 type BITMAPONLY | BITMAP4;
		explode roueg3 type FALL | BITMAP5;
		explode roued1 type BITMAPONLY | BITMAP1;
		explode roued2 type FALL | BITMAP2;
		explode roued3 type FALL | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP2;
		explode flarel1 type BITMAPONLY | BITMAP3;
		explode flarel2 type BITMAPONLY | BITMAP5;
		explode miss1 type BITMAPONLY | BITMAP1;
		explode miss2 type BITMAPONLY | BITMAP2;
		explode shell1 type BITMAPONLY | BITMAP2;
		explode shell2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode baseb type BITMAPONLY | BITMAP5;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode laser type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode missil type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode canon1 type BITMAPONLY | BITMAP1;
		explode canon2 type BITMAPONLY | BITMAP2;
		explode roueg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode roueg2 type BITMAPONLY | BITMAP4;
		explode roueg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode roued1 type BITMAPONLY | BITMAP1;
		explode roued2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode roued3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP2;
		explode flarel1 type BITMAPONLY | BITMAP3;
		explode flarel2 type BITMAPONLY | BITMAP5;
		explode miss1 type BITMAPONLY | BITMAP1;
		explode miss2 type BITMAPONLY | BITMAP2;
		explode shell1 type BITMAPONLY | BITMAP2;
		explode shell2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode baseb type BITMAPONLY | BITMAP5;
	explode base type BITMAPONLY | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode laser type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode missil type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode canon1 type BITMAPONLY | BITMAP1;
	explode canon2 type BITMAPONLY | BITMAP2;
	explode roueg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode roueg2 type BITMAPONLY | BITMAP4;
	explode roueg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode roued1 type BITMAPONLY | BITMAP1;
	explode roued2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode roued3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare1 type BITMAPONLY | BITMAP1;
	explode flare2 type BITMAPONLY | BITMAP2;
	explode flarel1 type BITMAPONLY | BITMAP3;
	explode flarel2 type BITMAPONLY | BITMAP5;
	explode miss1 type BITMAPONLY | BITMAP1;
	explode miss2 type BITMAPONLY | BITMAP2;
	explode shell1 type BITMAPONLY | BITMAP2;
	explode shell2 type BITMAPONLY | BITMAP3;
}
