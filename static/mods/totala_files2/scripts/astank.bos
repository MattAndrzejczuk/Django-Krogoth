piece base, turret, sleeve, barrel, flare;

static-var restore_delay;
#define	SIG_AIM1	2
#include "exptype.h"


SmokeUnit(healthpercent, sleeptime, smoketype)
	{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
		{
		sleep 500;
		}
	while( TRUE )
		{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
			{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
				{
				smoketype = 256 | 1;
				}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
				{
				emit-sfx smoketype from base;
				}
			if( Func_Var_4 == 2 )
				{
				emit-sfx smoketype from turret;
				}
			if( Func_Var_4 == 3 )
				{
				emit-sfx smoketype from base;
				}
			}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
			{
			sleeptime = 200;
			}
		sleep sleeptime;
		}
	}
	
Create()
	{
	restore_delay = 6000;
	start-script SmokeUnit();
	}
	
HitByWeapon(anglex,anglez)
	{
	turn base to z-axis anglez speed <105>;
	turn base to x-axis anglex speed <105>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <30>;
	turn base to x-axis <0> speed <30>;
	}
	
SetMaxReloadTime(time)
	{
	restore_delay = time * 2;
	}

RestoreAfterDelay()
	{
	sleep restore_delay;
	turn turret to y-axis <0> speed <45>;
	turn sleeve to x-axis <0> speed <40>;
	return 0;
	}

SweetSpot (piecenum)
	{
	piecenum = base;
	}

QueryPrimary (piecenum)
	{
	piecenum = flare;
	}

AimFromPrimary (piecenum)
	{
	piecenum = turret;
	}

AimPrimary(heading, pitch)
	{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;
	turn turret to y-axis heading speed <45>;
	turn sleeve to x-axis (0-pitch) speed <40>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return(TRUE);
	}

FirePrimary()
	{
	return(0);
	}

Killed(severity, corpsetype)
	{
	if (severity <= 25)
		{
		corpsetype = 1;
		explode base type	BITMAPONLY | BITMAP1;
		explode turret type	BITMAPONLY | BITMAP1;
		explode sleeve type	BITMAPONLY | BITMAP1;
		explode barrel type	BITMAPONLY | BITMAP1;
		explode flare type	BITMAPONLY | BITMAP1;
		return(0);
		}
	if (severity <= 50)
		{
		corpsetype = 2;
		explode base type	SHATTER | BITMAP4;
		explode turret type	SHATTER | BITMAP4;
		explode sleeve type	SHATTER | BITMAP4;
		explode barrel type	SHATTER | BITMAP4;
		explode flare type	SHATTER | BITMAP4;
		return(0);
		}
	if (severity <= 99)
		{
		corpsetype = 3;
		explode base type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeve type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return(0);
		}
	corpsetype = 3;
	explode base type	SHATTER | BITMAP4;
	explode turret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sleeve type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return(0);
	}
