#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lflare, rflare, base, chassis, turret, lgun, rgun, dish,
       shld1, shld2, shld3, shld4, shld5, shld6, ovrshld, ltsh,
       rtsh;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
				emit-sfx smoketype from chassis;
			}
		}
		if( Static_Var_2 )
		{
			if( !Static_Var_4 )
			{
				if( healthpercent > 20 )
				{
					Static_Var_4 = 1;
					set ARMORED to 1;
					Static_Var_7 = Rand( 1, 3 );
					dont-cache ltsh;
					dont-cache rtsh;
					spin shld1 around y-axis speed <700.>;
					spin shld2 around y-axis speed <-600.>;
					spin shld3 around y-axis speed <1100.>;
					spin shld4 around y-axis speed <-900.>;
					spin shld5 around y-axis speed <800.>;
					spin shld6 around y-axis speed <-500.>;
					spin ovrshld around x-axis speed <800.>;
					if( Static_Var_7 == 1 )
					{
						show shld1;
						show shld6;
						sleep 30;
						show shld2;
						show shld5;
						sleep 30;
						show shld3;
						show shld4;
						sleep 40;
						show ovrshld;
						sleep 100;
						hide ovrshld;
						sleep 30;
						hide shld1;
						hide shld6;
						sleep 30;
						hide shld2;
						hide shld5;
						sleep 30;
						hide shld3;
						hide shld4;
					}
					if( Static_Var_7 == 2 )
					{
						show shld1;
						show shld2;
						show shld3;
						show shld4;
						show shld5;
						show shld6;
						show ovrshld;
						sleep 180;
						hide shld1;
						hide shld2;
						hide shld3;
						hide shld4;
						hide shld5;
						hide shld6;
						hide ovrshld;
						sleep 140;
						show shld1;
						show shld2;
						show shld3;
						show shld4;
						show shld5;
						show shld6;
						show ovrshld;
						sleep 140;
						hide shld1;
						hide shld2;
						hide shld3;
						hide shld4;
						hide shld5;
						hide shld6;
						hide ovrshld;
						sleep 100;
						show shld1;
						show shld2;
						show shld3;
						show shld4;
						show shld5;
						show shld6;
						show ovrshld;
						sleep 150;
						hide shld1;
						hide shld2;
						hide shld3;
						hide shld4;
						hide shld5;
						hide shld6;
						hide ovrshld;
					}
					if( Static_Var_7 == 3 )
					{
						show shld3;
						show shld2;
						sleep 10;
						show shld5;
						show shld2;
						hide shld3;
						hide shld4;
						sleep 10;
						show shld1;
						show shld6;
						sleep 14;
						hide shld2;
						hide shld5;
						show shld3;
						show shld4;
						sleep 8;
						show shld2;
						show shld5;
						hide shld1;
						hide shld6;
						sleep 10;
						show shld3;
						show shld4;
						hide shld2;
						hide shld5;
						sleep 10;
						show shld2;
						show shld5;
						sleep 6;
						hide shld3;
						hide shld4;
						sleep 10;
						show shld1;
						show shld6;
						sleep 6;
						hide shld2;
						hide shld5;
						show shld3;
						show shld4;
						sleep 10;
						show shld2;
						show shld5;
						hide shld1;
						hide shld6;
						sleep 8;
						hide shld3;
						hide shld4;
						sleep 10;
						show shld1;
						show shld6;
						sleep 8;
						show shld3;
						show shld4;
						sleep 10;
						show shld2;
						show shld5;
						hide shld3;
						hide shld4;
						sleep 10;
						hide shld1;
						hide shld6;
						show shld3;
						show shld4;
						sleep 6;
						hide shld2;
						hide shld5;
						sleep 10;
						show shld3;
						show shld4;
						sleep 8;
						show shld2;
						show shld5;
						hide shld3;
						hide shld4;
						sleep 10;
						hide shld2;
						hide shld5;
					}
				}
			}
			if( Static_Var_4 )
			{
				if( !Static_Var_5 )
				{
					Static_Var_3 = Rand( 1, 35 );
				}
				Static_Var_5 = 0;
				if( Static_Var_3 == 1 )
				{
					show shld1;
					sleep 130;
					show shld2;
					hide shld1;
					sleep 130;
					show shld3;
					hide shld2;
					sleep 130;
					show shld4;
					hide shld3;
					sleep 130;
					show shld5;
					hide shld4;
					sleep 130;
					if( healthpercent < 40 )
					{
						smoketype = 256 | 2;
						if( Rand( 1, 66 ) < healthpercent )
						{
							smoketype = 256 | 1;
							emit-sfx smoketype from chassis;
						}
					}
					show shld6;
					hide shld5;
					sleep 130;
					show shld5;
					hide shld6;
					sleep 130;
					show shld4;
					hide shld5;
					sleep 130;
					show shld3;
					hide shld4;
					sleep 130;
					show shld2;
					hide shld3;
					sleep 130;
					if( healthpercent < 35 )
					{
						smoketype = 256 | 2;
						if( Rand( 1, 66 ) < healthpercent )
						{
							smoketype = 256 | 1;
						}
						emit-sfx smoketype from chassis;
					}
					show shld1;
					hide shld2;
					sleep 130;
					show shld2;
					hide shld1;
					sleep 130;
					show shld3;
					hide shld2;
					sleep 130;
					if( healthpercent < 40 )
					{
						smoketype = 256 | 2;
						if( Rand( 1, 66 ) < healthpercent )
						{
							smoketype = 256 | 1;
						}
						emit-sfx smoketype from chassis;
					}
					show shld4;
					hide shld3;
					sleep 130;
					show shld5;
					hide shld4;
					sleep 130;
					show shld6;
					hide shld5;
					sleep 100;
					hide shld6;
					if( Static_Var_3 == 2 )
					{
						show shld1;
						sleep 200;
						show shld2;
						sleep 200;
						show shld3;
						sleep 200;
						show shld4;
						if( healthpercent < 40 )
						{
							smoketype = 256 | 2;
							if( Rand( 1, 66 ) < healthpercent )
							{
								smoketype = 256 | 1;
							}
							emit-sfx smoketype from chassis;
						}
						sleep 200;
						show shld5;
						sleep 200;
						show shld6;
						sleep 320;
						show ovrshld;
						sleep 100;
						hide shld1;
						hide shld2;
						hide shld3;
						hide shld4;
						hide shld5;
						hide shld6;
						hide ovrshld;
					}
					if( Static_Var_3 == 3 )
					{
						show shld3;
						show shld4;
						sleep 200;
						hide shld3;
						hide shld4;
						show shld2;
						show shld5;
						sleep 200;
						if( healthpercent < 40 )
						{
							smoketype = 256 | 2;
							if( Rand( 1, 66 ) < healthpercent )
							{
								smoketype = 256 | 1;
							}
							emit-sfx smoketype from chassis;
						}
						hide shld2;
						hide shld5;
						show shld1;
						show shld6;
						sleep 200;
						hide shld1;
						hide shld6;
						show shld3;
						show shld4;
						sleep 80;
						hide shld3;
						hide shld4;
						sleep 70;
						show shld3;
						show shld4;
						sleep 60;
						hide shld3;
						hide shld4;
					}
				}
			}
		}
		sleeptime = healthpercent * 40;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Shieldscr()
{
	while( TRUE )
	{
		Static_Var_8 = Static_Var_6;
		Static_Var_6 = get HEALTH;
		if( Static_Var_8 == Static_Var_6 )
		{
			Static_Var_8 = 0;
		}
		if( Static_Var_4 AND Static_Var_6 < 25 )
		{
			Static_Var_4 = 0;
			set ARMORED to 0;
			explode shld1 type SHATTER;
			explode shld2 type SHATTER;
			explode shld3 type SHATTER;
			explode shld4 type SHATTER;
			explode shld5 type SHATTER;
			explode shld6 type SHATTER;
			explode ovrshld type SHATTER;
			hide shld1;
			hide shld2;
			hide shld3;
			hide shld4;
			hide shld5;
			hide shld6;
			hide ovrshld;
			stop-spin shld1 around y-axis;
			stop-spin shld2 around y-axis;
			stop-spin shld3 around y-axis;
			stop-spin shld4 around y-axis;
			stop-spin shld5 around y-axis;
			stop-spin shld5 around y-axis;
			stop-spin ovrshld around x-axis;
		}
		if( Static_Var_4 AND Static_Var_8 > 0 )
		{
			Static_Var_7 = Rand( 1, 3 );
			if( Static_Var_7 == 1 )
			{
				show shld1;
				show shld6;
				sleep 40;
				show shld2;
				show shld5;
				sleep 50;
				show shld3;
				show shld4;
				sleep 60;
				show ovrshld;
				sleep 70;
				hide shld1;
				hide shld6;
				sleep 40;
				hide ovrshld;
				hide shld2;
				hide shld5;
				sleep 50;
				hide shld3;
				hide shld4;
			}
			if( Static_Var_7 == 2 )
			{
				show shld1;
				show shld2;
				show shld3;
				show shld4;
				show shld5;
				show shld6;
				sleep 40;
				show ovrshld;
				sleep 220;
				hide ovrshld;
				sleep 25;
				hide shld1;
				hide shld6;
				sleep 50;
				hide shld2;
				hide shld5;
				sleep 50;
				hide shld3;
				hide shld4;
			}
			if( Static_Var_7 == 3 )
			{
				show ovrshld;
				sleep 70;
				show shld3;
				show shld4;
				sleep 110;
				hide ovrshld;
				sleep 160;
				show shld2;
				show shld5;
				hide shld3;
				hide shld4;
				sleep 120;
				show shld1;
				show shld6;
				hide shld2;
				hide shld5;
				sleep 120;
				hide shld1;
				hide shld6;
			}
		}
		sleep 200;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( Static_Var_2 AND ( !Static_Var_8 ) )
	{
		Static_Var_8 = get HEALTH;
	}
	if( ( !Static_Var_4 ) OR ( !Static_Var_2 ) )
	{
		turn base to z-axis Func_Var_2 speed <105.>;
		turn base to x-axis Func_Var_1 speed <105.>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
		turn base to z-axis <0.> speed <30.>;
		turn base to x-axis <0.> speed <30.>;
	}
}

RockUnit(anglex, anglez)
{
	turn chassis to x-axis anglex speed <60.>;
	turn chassis to z-axis anglez speed <60.>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn chassis to z-axis <0.> speed <20.>;
	turn chassis to x-axis <0.> speed <20.>;
}

StartMoving()
{
	sleep 200;
	Static_Var_5 = 1;
	Static_Var_3 = Rand( 1, 5 );
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_6 = 0;
	Static_Var_4 = 0;
	Static_Var_3 = 0;
	Static_Var_5 = 0;
	Static_Var_7 = 0;
	Static_Var_2 = 0;
	hide lflare;
	hide rflare;
	hide shld1;
	hide shld2;
	hide shld3;
	hide shld4;
	hide shld5;
	hide shld6;
	hide ovrshld;
	dont-cache lflare;
	dont-cache rflare;
	dont-cache shld1;
	dont-cache shld2;
	dont-cache shld3;
	dont-cache shld4;
	dont-cache shld5;
	dont-cache shld6;
	dont-cache ovrshld;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script SmokeUnit();
	start-script Shieldscr();
}

Activate()
{
	Static_Var_2 = 1;
	signal 4;
	Static_Var_6 = get HEALTH;
	move dish to y-axis [0.] now;
	move dish to y-axis [2.] speed [2.];
	if( Static_Var_6 > 20 )
	{
		set ARMORED to 1;
		dont-cache ltsh;
		dont-cache rtsh;
		spin shld1 around y-axis speed <700.>;
		spin shld2 around y-axis speed <-600.>;
		spin shld3 around y-axis speed <1100.>;
		spin shld4 around y-axis speed <-900.>;
		spin shld5 around y-axis speed <800.>;
		spin shld6 around y-axis speed <-500.>;
		spin ovrshld around x-axis speed <800.>;
		show shld1;
		show shld6;
		sleep 60;
		show shld2;
		show shld5;
		sleep 60;
		show shld3;
		show shld4;
		sleep 60;
		show ovrshld;
		sleep 150;
		hide ovrshld;
		sleep 60;
		hide shld1;
		hide shld6;
		sleep 60;
		hide shld2;
		hide shld5;
		sleep 60;
		hide shld3;
		hide shld4;
	}
	spin dish around y-axis speed <90.> accelerate <30.>;
}

Deactivate()
{
	Static_Var_2 = 0;
	cache ltsh;
	cache rtsh;
	set ARMORED to 0;
	move dish to y-axis [2.] now;
	turn dish to y-axis <0.> speed <90.>;
	move dish to y-axis [0.] speed [2.];
}

RestoreAfterDelay()
{
	sleep 4000;
	set-signal-mask 0;
	turn turret to y-axis <0.> speed <80.>;
	turn lgun to x-axis <0.> speed <50.>;
	turn rgun to x-axis <0.> speed <50.>;
	Static_Var_1 = 0;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <150.>;
	turn lgun to x-axis <0.> - pitch speed <90.>;
	turn rgun to x-axis <0.> - pitch speed <90.>;
	wait-for-turn turret around y-axis;
	wait-for-turn lgun around x-axis;
	wait-for-turn rgun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( !Static_Var_1 )
	{
		if( Static_Var_2 )
		{
			Static_Var_1 = 1;
		}
		show lflare;
		move lgun to z-axis [-2.] speed [300.];
		sleep 150;
		hide lflare;
		move lgun to z-axis [0.] speed [3.];
		return (0);
	}
	if( Static_Var_1 )
	{
		Static_Var_1 = 0;
		show rflare;
		move rgun to z-axis [-2.] speed [300.];
		sleep 150;
		hide rflare;
		move rgun to z-axis [0.] speed [3.];
		return (0);
	}
}

QueryPrimary(piecenum)
{
	if( !Static_Var_1 )
	{
		piecenum = lflare;
	}
	if( Static_Var_1 )
	{
		piecenum = rflare;
	}
}

AimFromPrimary(piecenum)
{
	if( !Static_Var_1 )
	{
		piecenum = lgun;
	}
	if( Static_Var_1 )
	{
		piecenum = rgun;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = rgun;
}

QuerySecondary(piecenum)
{
	piecenum = rflare;
}

FireSecondary()
{
	show rflare;
	move rgun to z-axis [-3.] now;
	sleep 150;
	hide rflare;
	move rgun to z-axis [0.] speed [3.];
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	while( Static_Var_2 )
	{
		sleep 500;
	}
	turn turret to y-axis heading speed <150.>;
	turn rgun to x-axis <0.> - pitch speed <90.>;
	wait-for-turn turret around y-axis;
	wait-for-turn rgun around x-axis;
	if( Static_Var_1 )
	{
		sleep 400;
	}
	sleep 500;
	start-script RestoreAfterDelay();
	return (1);
}

QueryTertiary(piecenum)
{
	piecenum = chassis;
}

AimFromTertiary(piecenum)
{
	piecenum = chassis;
}

AimTertiary(heading, pitch)
{
	return (1);
}

Killed(severity, corpsetype)
{
	hide lflare;
	hide rflare;
	hide shld1;
	hide shld2;
	hide shld3;
	hide shld4;
	hide shld5;
	hide shld6;
	hide ovrshld;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode chassis type BITMAPONLY | BITMAP1;
		explode lgun type BITMAPONLY | BITMAP1;
		explode rgun type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		explode dish type FALL | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP4;
		explode chassis type BITMAPONLY | BITMAP1;
		explode lgun type BITMAPONLY | BITMAP4;
		explode rgun type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode turret type SHATTER | BITMAP3;
		explode dish type FALL | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode chassis type BITMAPONLY | BITMAP1;
		explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode dish type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode chassis type BITMAPONLY | BITMAP1;
	explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode dish type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
