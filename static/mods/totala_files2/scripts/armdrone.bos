piece base ,leg1 ,leg2 ,leg3 ,leg4 ,turret ,canon ,barrel1 ,barrel2 ,flare1 ,flare2 ;

static-var bMoving ,gun_0 ,restore_delay ;
	
#DEFINE SMOKEPIECE1	base
#DEFINE SIG_NUM1	2
walk()
	{
		WHILE (bMoving )
			{
			IF (bMoving )
				{
				TURN leg1 to y-axis <53> SPEED <40>;
				TURN leg1 to y-axis <0> SPEED <40;
				TURN leg1 to z-axis <0> SPEED <40>;
				TURN leg1 to z-axis <0> SPEED <40>;
				TURN leg2 to z-axis <0> SPEED <40>;
				TURN leg2 to z-axis <51> SPEED <40>;
				TURN leg3 to y-axis <-60> SPEED <40>;
				TURN leg3 to y-axis <-60> SPEED <40>;
				TURN leg3 to z-axis <-51> SPEED <40>;
				TURN leg3 to z-axis <0> SPEED <40>;
				TURN leg4 to y-axis <-60> SPEED <40>;
				TURN leg4 to y-axis <0> SPEED <40>;
				TURN leg4 to z-axis <0> SPEED <40>;
				TURN leg4 to z-axis <0> SPEED <40>;
				SLEEP <200>;
				}
			IF (bMoving )
				{
				TURN leg1 to z-axis <51> SPEED <40>;
				TURN leg2 to y-axis <54> SPEED <40>;
				TURN leg2 to z-axis <51> SPEED <40>;
				TURN leg3 to y-axis <0> SPEED <40>;
				TURN leg3 to z-axis <0> SPEED <40>;
				TURN leg4 to y-axis <0> SPEED <40>;
				TURN leg4 to z-axis <-51> SPEED <40>;
				SLEEP <200>;
				}
			IF (bMoving )
				{
				TURN leg1 to y-axis <75> SPEED <40>;
				TURN leg1 to z-axis <51> SPEED <40>;
				TURN leg2 to y-axis <54> SPEED <40>;
				TURN leg2 to z-axis <0> SPEED <40>;
				TURN leg3 to y-axis <0> SPEED <40>;
				TURN leg3 to z-axis <-51> SPEED <40>;
				TURN leg4 to y-axis <-51> SPEED <40>;
				TURN leg4 to z-axis <-51> SPEED <40>;
				SLEEP <200>;
				}
			TURN leg1 to y-axis <63> SPEED <40>;
			TURN leg1 to z-axis <0> SPEED <40>;
			TURN leg2 to y-axis <0> SPEED <40>;
			TURN leg2 to z-axis <0> SPEED <40>;
			TURN leg3 to y-axis <-64> SPEED <40>;
			TURN leg3 to z-axis <-51> SPEED <40>;
			TURN leg4 to y-axis <-57> SPEED <40>;
			TURN leg4 to z-axis <0> SPEED <40>;
			SLEEP <200>;
			}
	}
#INCLUDE "smokeunit.h"
#INCLUDE "exptype.h"
MotionControl(moving)
	{
		WHILE ( TRUE )
			{
			moving = bMoving ;
			IF (moving )
				{
				CALL-SCRIPT walk();
				}
			IF (!moving )
				{
				SLEEP <100>;
				TURN leg1 to y-axis <0> SPEED <100>;
				TURN leg1 to z-axis <0> SPEED <100>;
				TURN leg2 to y-axis <0> SPEED <100>;
				TURN leg2 to z-axis <0> SPEED <100>;
				TURN leg3 to y-axis <0> SPEED <100>;
				TURN leg3 to z-axis <0> SPEED <100>;
				TURN leg4 to y-axis <0> SPEED <100>;
				TURN leg4 to z-axis <0> SPEED <100>;
				}
			}
	}
Create()
	{
		HIDE flare1;
		HIDE flare2;
		bMoving = FALSE;
		gun_0 = 0;
		restore_delay = 3000;
		START-SCRIPT SmokeUnit();
		START-SCRIPT MotionControl();
	}
StartMoving()
	{
		bMoving = TRUE;
	}
StopMoving()
	{
		bMoving = FALSE;
	}
SetMaxReloadTime(time)
	{
		restore_delay = time * 2 ;
	}
RestoreAfterDelay()
	{
		SLEEP restore_delay;
		TURN turret to y-axis <0> SPEED <35>;
		TURN canon to x-axis <0> SPEED <15>;
	}
AimPrimary(heading,pitch)
	{
		SIGNAL SIG_NUM1;
		SET-SIGNAL-MASK SIG_NUM1;
		TURN turret to y-axis heading SPEED <50>;
		TURN canon to x-axis (0 - pitch) SPEED <25>;
		WAIT-FOR-TURN turret around y-axis;
		WAIT-FOR-TURN canon around x-axis;
		START-SCRIPT RestoreAfterDelay();
		RETURN ( TRUE );
	}
FirePrimary()
	{
		IF (gun_0 == 0 )
			{
			MOVE barrel1 to z-axis <-2> NOW;
			SHOW flare1;
			SLEEP <150>;
			HIDE flare1;
			WAIT-FOR-MOVE barrel1 along z-axis;
			MOVE barrel1 to z-axis <0> SPEED <3>;
			}
		IF (gun_0 == 1 )
			{
			MOVE barrel2 to z-axis <-2> NOW;
			SHOW flare2;
			SLEEP <150>;
			HIDE flare2;
			WAIT-FOR-MOVE barrel2 along z-axis;
			MOVE barrel2 to z-axis <0> SPEED <3>;
			}
		gun_0 =  !gun_0;
	}
AimFromPrimary(piecenum)
	{
		piecenum = base;
	}
QueryPrimary(piecenum)
	{
		IF (gun_0 == 0 )
			{
			piecenum = flare1;
			}
		IF (gun_0 == 1 )
			{
			piecenum = flare2;
			}
	}
SweetSpot(piecenum)
	{
		piecenum = base;
	}
Killed(severity,corpsetype)
	{
		HIDE flare1;
		HIDE flare2;
		IF (severity <= 25 )
			{
			corpsetype = 1 ;
			EXPLODE  base type  	BITMAPONLY | BITMAP1;
			EXPLODE  leg1 type  	BITMAPONLY | BITMAP2;
			EXPLODE  leg2 type  	BITMAPONLY | BITMAP3;
			EXPLODE  leg3 type  	BITMAPONLY | BITMAP4;
			EXPLODE  leg4 type  	BITMAPONLY | BITMAP5;
			EXPLODE  turret type  	BITMAPONLY | BITMAP1;
			EXPLODE  canon type  	BITMAPONLY | BITMAP2;
			EXPLODE  barrel1 type  	BITMAPONLY | BITMAP4;
			EXPLODE  barrel2 type  	BITMAPONLY | BITMAP5;
			EXPLODE  flare1 type  	BITMAPONLY | BITMAP1;
			EXPLODE  flare2 type  	BITMAPONLY | BITMAP2;
			RETURN ( 0 );
			}
		IF (severity <= 50 )
			{
			corpsetype = 2 ;
			EXPLODE  base type  	BITMAPONLY | BITMAP1;
			EXPLODE  leg1 type  	FALL | BITMAP2;
			EXPLODE  leg2 type  	FALL | BITMAP3;
			EXPLODE  leg3 type  	FALL | BITMAP4;
			EXPLODE  leg4 type  	FALL | BITMAP5;
			EXPLODE  turret type  	SHATTER | BITMAP1;
			EXPLODE  canon type  	SHATTER | BITMAP2;
			EXPLODE  barrel1 type  	FALL | BITMAP4;
			EXPLODE  barrel2 type  	FALL | BITMAP5;
			EXPLODE  flare1 type  	FALL | BITMAP1;
			EXPLODE  flare2 type  	FALL | BITMAP2;
			RETURN ( 0 );
			}
		IF (severity <= 99 )
			{
			corpsetype = 3 ;
			EXPLODE  base type  	BITMAPONLY | BITMAP1;
			EXPLODE  leg1 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
			EXPLODE  leg2 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
			EXPLODE  leg3 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
			EXPLODE  leg4 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
			EXPLODE  turret type  	SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
			EXPLODE  canon type  	SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
			EXPLODE  barrel1 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
			EXPLODE  barrel2 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
			EXPLODE  flare1 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
			EXPLODE  flare2 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
			RETURN ( 0 );
			}
		corpsetype = 3 ;
		EXPLODE  base type  	BITMAPONLY | BITMAP1;
		EXPLODE  leg1 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		EXPLODE  leg2 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		EXPLODE  leg3 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		EXPLODE  leg4 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		EXPLODE  turret type  	SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		EXPLODE  canon type  	SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		EXPLODE  barrel1 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		EXPLODE  barrel2 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		EXPLODE  flare1 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		EXPLODE  flare2 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	}
