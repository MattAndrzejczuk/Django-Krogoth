piece base, flare1, flare2, flare3, flare4, flare5, flare6, wake1, wake2, wake3, wake4;

static-var gun_1, Static_Var_1, bMoving;
#define	SIG_AIM1	2
#define SIG_MOVE	4
#include "exptype.h"
#include "rockunit.h"
#include "hitweap.h"


SmokeUnit(healthpercent, sleeptime, smoketype)
	{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
		{
		sleep 500;
		}
	while( TRUE )
		{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
			{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
				{
				smoketype = 256 | 1;
				}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 || 3 )
				{
				emit-sfx smoketype from base;
				}
			if( Func_Var_4 == 2 )
				{
				emit-sfx smoketype from flare1;
				}
			}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
			{
			sleeptime = 200;
			}
		sleep sleeptime;
		}
	}
	
Create()
	{
	Static_Var_1 = TRUE;
	gun_1 = 1;
	bMoving = FALSE;
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare5;
	hide flare6;
	start-script SmokeUnit();
	}
	
StartMoving()
	{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	move base to y-axis [5] speed [2];
	bMoving = TRUE;
	while( bMoving )
		{
		emit-sfx 5 from wake1;
		emit-sfx 5 from wake2;
		emit-sfx 5 from wake3;
		emit-sfx 5 from wake4;
		emit-sfx 3 from wake1;
		emit-sfx 3 from wake2;
		emit-sfx 3 from wake3;
		emit-sfx 3 from wake4;
		sleep 300;
		}
	}

StopMoving()
	{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	move base to y-axis [0] speed [3];
	bMoving = FALSE;
	while( !bMoving )
		{
		emit-sfx 5 from wake1;
		emit-sfx 5 from wake2;
		emit-sfx 5 from wake3;
		emit-sfx 5 from wake4;
		emit-sfx 3 from wake1;
		emit-sfx 3 from wake2;
		emit-sfx 3 from wake3;
		emit-sfx 3 from wake4;
		sleep 650;
		}
	}

SweetSpot (piecenum)
	{
	piecenum = base;
	}

QueryPrimary (piecenum)
	{
	if( gun_1 == 1 )
		{
		piecenum = flare1;
		}
	if( gun_1 == 2 )
		{
		piecenum = flare2;
		}
	if( gun_1 == 3 )
		{
		piecenum = flare3;
		}
	if( gun_1 == 4 )
		{
		piecenum = flare4;
		}
	if( gun_1 == 5 )
		{
		piecenum = flare5;
		}
	if( gun_1 == 6 )
		{
		piecenum = flare6;
		}
	}

AimFromPrimary (piecenum)
	{
	piecenum = base;
	}

AimPrimary(heading, pitch)
	{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;
	if( !Static_Var_1 )
		{
		sleep 2500;
		Static_Var_1 = TRUE;
		}
	return 1;
	}

FirePrimary()
	{
	if( gun_1 == 1 )
		{
		gun_1 = 2;
		show flare1;
		sleep 150;
		hide flare1;
		return 0;
		}
	if( gun_1 == 2 )
		{
		gun_1 = 3;
		show flare2;
		sleep 150;
		hide flare2;
		return 0;
		}
	if( gun_1 == 3 )
		{
		gun_1 = 4;
		show flare3;
		sleep 150;
		hide flare3;
		return 0;
		}
	if( gun_1 == 4 )
		{
		gun_1 = 5;
		show flare4;
		sleep 150;
		hide flare4;
		return 0;
		}
	if( gun_1 == 5 )
		{
		gun_1 = 6;
		show flare5;
		sleep 150;
		hide flare5;
		return 0;
		}
	if( gun_1 == 6 )
		{
		gun_1 = 1;
		show flare6;
		sleep 150;
		hide flare6;
		Static_Var_1 = FALSE;
		return 0;
		}
	return 0;
	}
		
Killed(severity, corpsetype)
	{
	if (severity <= 25)
		{
		corpsetype = 1;
		explode base type	BITMAPONLY | BITMAP1;
		explode flare1 type	BITMAPONLY | BITMAP1;
		explode flare2 type	BITMAPONLY | BITMAP1;
		explode flare3 type	BITMAPONLY | BITMAP1;
		explode flare4 type	BITMAPONLY | BITMAP1;
		explode flare5 type	BITMAPONLY | BITMAP1;
		explode flare6 type	BITMAPONLY | BITMAP1;
		explode wake1 type	BITMAPONLY | BITMAP1;
		explode wake2 type	BITMAPONLY | BITMAP1;
		explode wake3 type	BITMAPONLY | BITMAP1;
		explode wake4 type	BITMAPONLY | BITMAP1;
		return(0);
		}
	if (severity <= 50)
		{
		corpsetype = 2;
		explode base type	SHATTER | BITMAP4;
		explode flare1 type	SHATTER | BITMAP4;
		explode flare2 type	SHATTER | BITMAP4;
		explode flare3 type	SHATTER | BITMAP4;
		explode flare4 type	SHATTER | BITMAP4;
		explode flare5 type	SHATTER | BITMAP4;
		explode flare6 type	SHATTER | BITMAP4;
		explode wake1 type	SHATTER | BITMAP4;
		explode wake2 type	SHATTER | BITMAP4;
		explode wake3 type	SHATTER | BITMAP4;
		explode wake4 type	SHATTER | BITMAP4;
		return(0);
		}
	if (severity <= 99)
		{
		corpsetype = 3;
		explode base type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare4 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare5 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare6 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake4 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return(0);
		}
	corpsetype = 3;
	explode base type	SHATTER | BITMAP2;
	explode flare1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare4 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare5 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare6 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake4 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return(0);
	}
