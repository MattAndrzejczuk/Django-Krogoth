#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, aim, rocketa, rocketb, rocketc, rocket1, rocket2, rocket3;

static-var  Static_Var_1, Static_Var_2;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide rocket1;
	hide rocket2;
	hide rocket3;
	dont-cache rocket1;
	dont-cache rocket2;
	dont-cache rocket3;
	Static_Var_2 = 5000;
	dont-shade base;
	start-script SmokeUnit();
}

RestoreRocket1()
{
	sleep Static_Var_2;
	set-signal-mask 2;
	move rocket1 to y-axis [0.] speed [3.];
}

RestoreRocket2()
{
	sleep Static_Var_2;
	set-signal-mask 4;
	move rocket2 to y-axis [0.] speed [3.];
}

RestoreRocket3()
{
	sleep Static_Var_2;
	set-signal-mask 8;
	move rocket3 to y-axis [0.] speed [3.];
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	show rocket1;
	move rocket1 to y-axis [13.] speed [3.];
	wait-for-move rocket1 along y-axis;
	start-script RestoreRocket1();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	show rocket2;
	move rocket2 to y-axis [13.] speed [3.];
	wait-for-move rocket2 along y-axis;
	start-script RestoreRocket2();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 8;
	set-signal-mask 8;
	show rocket3;
	move rocket3 to y-axis [13.] speed [3.];
	wait-for-move rocket3 along y-axis;
	start-script RestoreRocket3();
	return (1);
}

FirePrimary()
{
	hide rocket1;
	move rocket1 to y-axis [0.] speed [400.];
}

FireSecondary()
{
	hide rocket2;
	move rocket2 to y-axis [0.] speed [400.];
}

FireTertiary()
{
	hide rocket3;
	move rocket3 to y-axis [0.] speed [400.];
}

AimFromPrimary(piecenum)
{
	piecenum = rocketa;
}

AimFromSecondary(piecenum)
{
	piecenum = rocketb;
}

AimFromTertiary(piecenum)
{
	piecenum = rocketc;
}

QueryPrimary(piecenum)
{
	piecenum = rocketa;
}

QuerySecondary(piecenum)
{
	piecenum = rocketb;
}

QueryTertiary(piecenum)
{
	piecenum = rocketc;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide rocket1;
	hide rocket2;
	hide rocket3;
	hide aim;
	hide rocketa;
	hide rocketb;
	hide rocketc;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode rocket1 type BITMAPONLY | BITMAP1;
		explode rocket2 type BITMAPONLY | BITMAP1;
		explode rocket3 type BITMAPONLY | BITMAP1;
		explode aim type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode rocket1 type BITMAPONLY | BITMAP2;
		explode rocket2 type BITMAPONLY | BITMAP2;
		explode rocket3 type BITMAPONLY | BITMAP2;
		explode aim type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode rocket1 type BITMAPONLY | BITMAP3;
		explode rocket2 type BITMAPONLY | BITMAP3;
		explode rocket3 type BITMAPONLY | BITMAP3;
		explode aim type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode rocket1 type BITMAPONLY | BITMAP3;
	explode rocket2 type BITMAPONLY | BITMAP3;
	explode rocket3 type BITMAPONLY | BITMAP3;
	explode aim type BITMAPONLY | BITMAP3;
}
