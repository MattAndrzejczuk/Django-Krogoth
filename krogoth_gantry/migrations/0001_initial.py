# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2018-01-12 00:53
from __future__ import unicode_literals

from django.db import migrations, models
from django.contrib.postgres.operations import HStoreExtension
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        HStoreExtension(),
        migrations.CreateModel(
            name='KrogothGantryCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='KrogothGantryDirective',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=51, unique=True)),
                ('title', models.CharField(default='Untitled krogoth_gantry Directive', help_text='Cosmetic display name for this directive in the primary navigation view', max_length=55)),
                ('directive_js', models.TextField(default="(function ()\n{\n\t'use strict';\n\tangular\n\t\t.module('app.FUSE_APP_NAME')\n\t\t.directive('_DJANGULAR_DIRECTIVE_NAME_', _DJANGULAR_DIRECTIVE_NAME_Directive);\n\t/** @ngInject */\n\tfunction _DJANGULAR_DIRECTIVE_NAME_Directive()\n\t{\n\t\treturn {restrict: 'AE', replace: 'true', template: '_DJANGULAR_DIRECTIVE_TITLE_'};\n\n\t}})\n();")),
            ],
        ),
        migrations.CreateModel(
            name='KrogothGantryIcon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=75, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='KrogothGantryMasterViewController',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('title', models.CharField(default='Untitled krogoth_gantry Application', help_text='Cosmetic display name for this app in the primary navigation view', max_length=55)),
                ('module_js', models.TextField(default="(function ()\n{\n\t'use strict';\n\tangular.module('app.FUSE_APP_NAME', ['flow']).config(config);\n\n\tfunction config($stateProvider, $translatePartialLoaderProvider, msApiProvider, msNavigationServiceProvider) {\n\t$stateProvider\n\t.state('app.FUSE_APP_NAME', {\n\t\turl: '/FUSE_APP_NAME',\n\t\tviews: {\n\t\t\t'content@app': {\n\t\t\t\ttemplateUrl: '/krogoth_gantry/DynamicHTMLInjector/?name=FUSE_APP_NAME',\n\t\t\t\tcontroller: 'FUSE_APP_NAMEController as vm'\n\t\t\t}\n\t\t}\n\t})\n\t_DJANGULAR_SLAVE_VC_INJECTION_POINT_; /* krogoth_gantry Slave VCs automatically injected here. */\n\t_DJANGULAR_SLAVE_MSAPI_INJECTION_POINT_\n\tmsNavigationServiceProvider.saveItem('AK_NAVCAT_KROGOTH.Advanced.FUSE_APP_NAME', {\n\t\ttitle: 'FUSE_APP_TITLE',\n\t\ticon: 'FUSE_APP_ICON',\n\t\tstate: 'app.FUSE_APP_NAME',\n\t\tweight: 3\n\t});  _DJANGULAR_SLAVE_NAV_SERVICE_INJECTIONS_\n\t}\n})();")),
                ('controller_js', models.TextField(default="(function ()\n{\n\t'use strict';\n\tangular.module('app.FUSE_APP_NAME').controller('FUSE_APP_NAMEController', FUSE_APP_NAMEController);\n\tfunction FUSE_APP_NAMEController()\n\t{\n\t\t\tvar vm = this;\n\t\t\t vm.viewName = 'FUSE_APP_NAME';\n\t}\n})();\n\n\n/*\nsh /Vol\n*/\n\n/*\nsh /Volumes/MBP_Backup/arm-prime/docker/KILL_ALL_.sh\n*/\n\n/*\nsh /Volumes/MBP_Backup/arm-prime/docker/run-docker-installed.sh\n*/")),
                ('view_html', models.TextField(default='<h1>{{ vm.viewName }}</h1>')),
                ('style_css', models.TextField(default='')),
                ('is_enabled', models.BooleanField(default=True, help_text='When disabled, this javascript code and html code will not be loaded.')),
                ('path_to_static', models.CharField(default='NOT_SET', max_length=125)),
                ('is_lazy', models.BooleanField(default=False, help_text='If lazy, this master view controller will not load until accessed.')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='krogoth_gantry.KrogothGantryCategory')),
                ('djangular_directive', models.ManyToManyField(blank=True, null=True, related_name='displayer', to='krogoth_gantry.KrogothGantryDirective')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KrogothGantryService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=52, unique=True)),
                ('title', models.CharField(default='Untitled krogoth_gantry Service', help_text='Cosmetic display name for this service in the primary navigation view', max_length=55)),
                ('service_js', models.TextField(default="(function () {\n    'use strict';\n    angular\n        .module('app.FUSE_APP_NAME')\n        .factory('_DJANGULAR_SERVICE_NAME_', _DJANGULAR_SERVICE_NAME_);\n\n    /** @ngInject */\n    function _DJANGULAR_SERVICE_NAME_($log, $http, $q) {\n        // $log.log('Hello. The service _DJANGULAR_SERVICE_NAME_ is online ! ! !');\n        // var service = {\n        //     testThisService: testThisService\n        // };\n        // function testThisService() {\n        //     $log.log('_DJANGULAR_SERVICE_NAME_ is working properly.');\n        // }\n        // return service;\n\n        var service = {\n            postNewReply: postNewReply,\n            postNewThread: postNewThread,\n            getDetailThread: getDetailThread,\n            getDetailCategory: getDetailCategory,\n            getListCategories: getListCategories\n        };\n\n\n        const requestURI = '/api/__ExamplesFruit/';\n\n        function getList() {\n            var deferred = $q.defer();\n            $http({\n                method: 'GET',\n                url: requestURI\n            }).then(function successCallback(response) {\n                deferred.resolve(response.data);\n            }, function errorCallback(response) {\n                deferred.reject(response);\n            });\n            return deferred.promise;\n        }\n\n        function getDetail(objectId) {\n            var deferred = $q.defer();\n            $http({\n                method: 'GET',\n                url: requestURI + id + '/'\n            }).then(function successCallback(response) {\n                deferred.resolve(response.data);\n            }, function errorCallback(response) {\n                deferred.reject(response);\n            });\n            return deferred.promise;\n        }\n\n        function post(objectJson) {\n            $log.log('creating new thread...');\n            $log.log(thread);\n            var deferred = $q.defer();\n            $http({\n                method: 'POST',\n                data: thread,\n                url: requestURI\n            }).then(function successCallback(response) {\n                deferred.resolve(response.data);\n            }, function errorCallback(response) {\n                deferred.reject(response);\n            });\n            return deferred.promise;\n        }\n\n        function put(objectJson) {\n            $log.log('creating new reply...');\n            $log.log(reply);\n            var deferred = $q.defer();\n            $http({\n                method: 'PUT',\n                data: reply,\n                url: requestURI,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            }).then(function successCallback(response) {\n                deferred.resolve(response.data);\n            }, function errorCallback(response) {\n                deferred.reject(response);\n            });\n            return deferred.promise;\n        }\n\n        function patch(objectJson) {\n            $log.log('creating new reply...');\n            $log.log(reply);\n            var deferred = $q.defer();\n            $http({\n                method: 'PATCH',\n                data: reply,\n                url: requestURI,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            }).then(function successCallback(response) {\n                deferred.resolve(response.data);\n            }, function errorCallback(response) {\n                deferred.reject(response);\n            });\n            return deferred.promise;\n        }\n\n        function deleteObject(objectJson) {\n            $log.log('creating new reply...');\n            $log.log(reply);\n            var deferred = $q.defer();\n            $http({\n                method: 'DELETE',\n                data: reply,\n                url: requestURI,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            }).then(function successCallback(response) {\n                deferred.resolve(response.data);\n            }, function errorCallback(response) {\n                deferred.reject(response);\n            });\n            return deferred.promise;\n        }\n\n        function options() {\n            var deferred = $q.defer();\n            $http({\n                method: 'OPTIONS',\n                url: requestURI\n            }).then(function successCallback(response) {\n                deferred.resolve(response.data);\n            }, function errorCallback(response) {\n                deferred.reject(response);\n            });\n            return deferred.promise;\n        }\n\n        return service;\n        /////\n    }\n})();")),
            ],
        ),
        migrations.CreateModel(
            name='KrogothGantrySlaveViewController',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='MUST BE EXACT NAME OF MASTER VIEW CONTROLLER.', max_length=56, unique=True)),
                ('title', models.CharField(default='sideNav', help_text='The name for this slave VC.', max_length=55)),
                ('controller_js', models.TextField(default="(function () {\n    'use strict';\n    angular.module('app.FUSE_APP_NAME').controller('_SLAVE_NAME_Controller', _SLAVE_NAME_Controller);\n\n    function _SLAVE_NAME_Controller($stateParams, $log) {\n        var vm = this;\n        vm.viewName = '_SLAVE_NAME_' + $stateParams.id;\n    }\n})();")),
                ('view_html', models.TextField(default='<h1>{{ vm.viewName }}</h1>')),
            ],
        ),
        migrations.AddField(
            model_name='krogothgantrymasterviewcontroller',
            name='djangular_service',
            field=models.ManyToManyField(blank=True, null=True, related_name='provider', to='krogoth_gantry.KrogothGantryService'),
        ),
        migrations.AddField(
            model_name='krogothgantrymasterviewcontroller',
            name='djangular_slave_vc',
            field=models.ManyToManyField(blank=True, null=True, related_name='owner', to='krogoth_gantry.KrogothGantrySlaveViewController'),
        ),
        migrations.AddField(
            model_name='krogothgantrymasterviewcontroller',
            name='icon',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='krogoth_gantry.KrogothGantryIcon'),
        ),
        migrations.AddField(
            model_name='krogothgantrymasterviewcontroller',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_krogoth_gantry.krogothgantrymasterviewcontroller_set+', to='contenttypes.ContentType'),
        ),
        migrations.CreateModel(
            name='AKGantryMasterViewController',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('krogoth_gantry.krogothgantrymasterviewcontroller',),
        ),
    ]
