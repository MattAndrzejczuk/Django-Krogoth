


# Oct 28th, 2017
# v0.1.0
class DependenciesForUnitFBI(APIView):
    permission_classes = (AllowAny,)
    def get(self, request, format=None):
        uid = request.GET['uid']
        sampleunit = UnitFbiData.objects.filter(UnitName=uid)
        serialized_obj = serializers.serialize("json", sampleunit)
        json_dict = json.loads(serialized_obj)
        print('SAMPLE UNIT QUERIED: ')
        print(sampleunit)
        ## NEED TO GRAB THE
        dev_root_path = sampleunit[0]._DEV_root_data_path
        last_occurance_of_slash = dev_root_path.rfind("/")
        fbi_file = dev_root_path[last_occurance_of_slash:]
        # THE ROOT PATH OF THE UNIT HPI
        path_without_fbi = dev_root_path.replace(fbi_file, '').replace('/units', '')
        unit_weapon_path = ''
        # WE NEED THIS TO KNOW WHERE TO LOOK FOR ALL DEPENDENCIES.

        # SO NOW WE HAVE THIS:
        # '/usr/src/persistent/media/ta_data/arm_fubar/'
        # BEGIN SCANNING THE FBI FILE TO LOCATE ALL DEPENDENCIES
        #
        # keys used to find dependencies:
        # -------------------------------
        # Objectname        ->  /arm_fubar/objects3d/{ Objectname }
        #                       /arm_fubar/scripts/{ Objectname }
        # UnitName          ->  /arm_fubar/unitpics/{ UnitName }
        #                       /arm_fubar/download/{ UnitName }
        # SoundCategory     -> SOUNDS.txt
        # ExplodeAs         -> UNITS.txt
        # SelfDestructAs    -> UNITS.txt
        # Corpse            -> /arm_fubar/features/corpses/{ UnitName }
        # Weapon1           -> /arm_fubar/weapons/{ UnitName }
        # Weapon2           -> /arm_fubar/weapons/{ UnitName }
        # Weapon3           -> /arm_fubar/weapons/{ UnitName }
        # -------------------------------

        print('\n\n\n\n')

        #   /usr/src/persistent/media/ta_data/arm_fubar : /armdef.fbi
        definer = bcolors.purple + \
                  path_without_fbi + \
                  ' : ' + bcolors.ENDC
        end_val = bcolors.orange + \
                  fbi_file + \
                  bcolors.ENDC
        print(definer + end_val)


        ### DEPENDENCIES CHECKLIST:
        dp_unitpic = False
        dp_3dmodel = False
        dp_script = False
        dp_corpses = False
        dp_allweapons = False
        dp_download = False

        this_unit_has_weapons = False

        print('')
        # UnitName
        definer = bcolors.TEAL + \
                  'UnitName' + \
                  bcolors.ENDC
        midchar = bcolors.lightgreen + \
                  '       ->  ' + \
                  bcolors.ENDC
        end_val = bcolors.orange + \
                  sampleunit[0].UnitName + \
                  bcolors.ENDC
        print(definer + midchar + end_val)
        unit_pic_path = path_without_fbi + '/unitpics/'
        uname = sampleunit[0].UnitName.lower()
        # /ta_data/UNAME/unitpics/
        dp_unitpic = os.path.exists(unit_pic_path + uname + '.pcx')
        if dp_unitpic == False:
            dp_unitpic = os.path.exists(unit_pic_path + uname.lower() + '.pcx')
        print('unit pic exists : ' + str(dp_unitpic))
        # /ta_data/UNAME/download/
        unit_download_path = path_without_fbi + '/download/' + uname + '.tdf'
        dp_download = os.path.exists(unit_download_path)
        print('unit download exists : ' + str(dp_download))
        # -------------------------------

        # Objectname
        definer = bcolors.TEAL + \
                  'Objectname' + \
                  bcolors.ENDC
        midchar = bcolors.lightgreen + \
                  '     ->  ' + \
                  bcolors.ENDC
        end_val = bcolors.orange + \
                  sampleunit[0].Objectname + \
                  bcolors.ENDC
        print(definer + midchar + end_val)
        # /ta_data/UNAME/objects3d/
        unit_3do_path = path_without_fbi + '/objects3d/'
        uobjname = sampleunit[0].Objectname.lower()
        dp_3dmodel = os.path.exists(unit_3do_path + uobjname + '.3do')
        print('unit 3do exists : ' + str(dp_3dmodel))
        # /ta_data/UNAME/scripts/
        unit_cob_path = path_without_fbi + '/scripts/'
        ucobname = sampleunit[0].Objectname.lower()
        dp_script = os.path.exists(unit_cob_path + ucobname + '.cob')
        print('unit cob exists : ' + str(dp_script))
        # -------------------------------


        # SoundCategory
        definer = bcolors.TEAL + \
                  'SoundCategory' + \
                  bcolors.ENDC
        midchar = bcolors.lightgreen + \
                  '  ->  ' + \
                  bcolors.ENDC
        end_val = bcolors.lightred + \
                  sampleunit[0].SoundCategory + \
                  bcolors.ENDC
        print(definer + midchar + end_val)
        # -------------------------------

        # ExplodeAs
        definer = bcolors.TEAL + \
                  'ExplodeAs' + \
                  bcolors.ENDC
        midchar = bcolors.lightgreen + \
                  '      ->  ' + \
                  bcolors.ENDC
        end_val = bcolors.lightred + \
                  sampleunit[0].ExplodeAs + \
                  bcolors.ENDC
        print(definer + midchar + end_val)
        # -------------------------------

        # SelfDestructAs
        definer = bcolors.TEAL + \
                  'SelfDestructAs' + \
                  bcolors.ENDC
        midchar = bcolors.lightgreen + \
                  ' ->  ' + \
                  bcolors.ENDC
        end_val = bcolors.lightred + \
                  sampleunit[0].SelfDestructAs + \
                  bcolors.ENDC
        print(definer + midchar + end_val)
        # -------------------------------

        # Corpse
        definer = bcolors.TEAL + \
                  'Corpse' + \
                  bcolors.ENDC
        midchar = bcolors.lightgreen + \
                  '         ->  ' + \
                  bcolors.ENDC
        end_val = bcolors.lightred + \
                  sampleunit[0].Corpse + \
                  bcolors.ENDC
        print(definer + midchar + end_val)
        # /ta_data/UNAME/features/corpses/
        corpsename = sampleunit[0].Corpse.lower()
        unit_corpse_path = path_without_fbi + '/features/corpses/' + corpsename + '.tdf'
        dp_corpses = os.path.exists(unit_corpse_path)
        print('unit feature corpse exists : ' + str(dp_corpses))
        #FeatureTDFViewset.get()
        # -------------------------------

        all_weapons = []
        try:
            # Weapon1
            if sampleunit[0].Weapon1:
                all_weapons.append(sampleunit[0].Weapon1)

            definer = bcolors.TEAL + \
                      'Weapon1' + \
                      bcolors.ENDC
            midchar = bcolors.lightgreen + \
                      '        ->  ' + \
                      bcolors.ENDC
            end_val = bcolors.lightred + \
                      sampleunit[0].Weapon1 + \
                      bcolors.ENDC
            print(definer + midchar + end_val)
            # /ta_data/UNAME/weapons/
            unit_weapon_path = path_without_fbi + '/weapons/' + uname + '_weapon.tdf'
            dp_allweapons = os.path.exists(unit_weapon_path)
            print('unit weapons exists : ' + str(dp_allweapons))
            this_unit_has_weapons = os.path.exists(unit_weapon_path)
        except:
            print('')
        # -------------------------------

        try:
            # Weapon2
            if sampleunit[0].Weapon2:
                all_weapons.append(sampleunit[0].Weapon2)

            definer = bcolors.TEAL + \
                      'Weapon2' + \
                      bcolors.ENDC
            midchar = bcolors.lightgreen + \
                      '        ->  ' + \
                      bcolors.ENDC
            end_val = bcolors.lightred + \
                      sampleunit[0].Weapon2 + \
                      bcolors.ENDC
            print(definer + midchar + end_val)
        except:
            print('')
        # -------------------------------

        try:
            # Weapon3
            if sampleunit[0].Weapon3:
                all_weapons.append(sampleunit[0].Weapon3)

            definer = bcolors.TEAL + \
                      'Weapon3' + \
                      bcolors.ENDC
            midchar = bcolors.lightgreen + \
                      '        ->  ' + \
                      bcolors.ENDC
            end_val = bcolors.lightred + \
                      sampleunit[0].Weapon3 + \
                      bcolors.ENDC
            print(definer + midchar + end_val)
        except:
            print('')
        # -------------------------------



        # FBI Unit
        try:
            definer = bcolors.blue + \
                      'Unit Object Scanned: ' + \
                      bcolors.ENDC
            midchar = bcolors.orange + \
                      ' -> ' + \
                      bcolors.ENDC
            end_val = bcolors.lightgreen + \
                      str(json_dict[0]['fields']) + \
                      bcolors.ENDC

            fbi_data = json_dict[0]['fields']
            fbijson = json.dumps(del_none(fbi_data), indent=4, sort_keys=True)

            print(bcolors.purple)
            print(fbijson)
            print(bcolors.ENDC)
        except:
            print(bcolors.red + 'Failed to scan FBI Unit ! !' + bcolors.ENDC)
        # TDF Corpse
        corpseTDF = []
        try:
            corpseTDF = FeatureTDFFetch().get(unit_corpse_path)
            definer = bcolors.blue + \
                      'Corpse Objects Scanned: ' + \
                      bcolors.ENDC
            midchar = bcolors.orange + \
                      ' -> ' + \
                      bcolors.ENDC
            end_val = bcolors.lightgreen + \
                      str(corpseTDF) + \
                      bcolors.ENDC
            tdfjson = json.dumps(del_none(corpseTDF), indent=4, sort_keys=True)

            print(bcolors.purple)
            print(tdfjson)
            print(bcolors.ENDC)
            # print(definer + midchar + end_val)
        except:
            print(bcolors.red + 'Failed to scan TDF Feature ! !' + bcolors.ENDC)
        # TDF Download

        downloadTDF = []
        try:
            downloadTDF = DownloadTDFFetch().get(unit_download_path)
            definer = bcolors.blue + \
                      'Download Objects Scanned: ' + \
                      bcolors.ENDC
            midchar = bcolors.orange + \
                      ' -> ' + \
                      bcolors.ENDC
            end_val = bcolors.lightgreen + \
                      str(downloadTDF) + \
                      bcolors.ENDC
            print(definer + midchar + end_val)
        except:
            print(bcolors.red + 'Failed to scan TDF Download ! !' + bcolors.ENDC)
        tdf_list = []
        # TDF Weapon
        print('THIS UNIT DOES HAVE WEAPONS ! ! !')
        if os.path.exists(unit_weapon_path):
            print(os.listdir(path_without_fbi + '/weapons/'))
            print(unit_weapon_path)
            weaponTDF = WeaponTDFFetch().get(unit_weapon_path)
            tdf_list = weaponTDF
            definer = bcolors.blue + \
                      'Weapon Objects Scanned: ' + \
                      bcolors.ENDC
            midchar = bcolors.orange + \
                      ' -> ' + \
                      bcolors.ENDC
            end_val = bcolors.lightgreen + \
                      str(weaponTDF) + \
                      bcolors.ENDC
            print(definer + midchar + end_val)
        else:
            # Weapon data with 'UNITNAME_weapon.tdf' does not exist,
            # must scan all weapons in this folder and try to find
            # the weapon that way.
            print('failed to reference weapon using the unit name: ' + path_without_fbi + '/weapons/')
            print('\nweapon TDF files avaliable in /weapons/: ')

            weaponpath = path_without_fbi + '/weapons/'
            listweaponTDFs = os.listdir(weaponpath)
            print('WEAPON PATH: ')
            print(bcolors.cyan + str(weaponpath) + bcolors.ENDC)
            print(bcolors.cyan + str(listweaponTDFs) + bcolors.ENDC)
            # loop through /weapons/ and save all weapons to SQL:
            for weaponTDF in listweaponTDFs:
                weaponpath = path_without_fbi + '/weapons/' + weaponTDF
                unit_weapon_path = weaponpath
                TDF = WeaponTDFFetch().get(weaponpath)
                definer = bcolors.blue + \
                          'Weapon Objects Scanned: ' + \
                          bcolors.ENDC
                # print(definer + bcolors.purple + str(TDF) + bcolors.ENDC)

                for _tdf in TDF:
                    tdfjson = json.dumps(del_none(_tdf), indent=4, sort_keys=True)
                    print(bcolors.blue)
                    print(tdfjson)
                    print(bcolors.ENDC)
                    tdf_list.append(_tdf)


        print('\nAll Detected weapons: ')
        print(all_weapons)
        print('\nAll Detected sound files in /sounds/: ')
        print(os.listdir(path_without_fbi + '/sounds/'))
        allsoundfiles = os.listdir(path_without_fbi + '/sounds/')

        ### DEPENDENCY TODO:
        ## UnitFbiData
        # UnitFbiData.ExplodeAs         --> WeaponTDF._REFERENCE_POINTER
        # UnitFbiData.SelfDestructAs    --> WeaponTDF._REFERENCE_POINTER

        ### DEPENDENCY CHECKLIST:
        ## UnitFbiData
        # UnitFbiData.UnitName
        #                           --> /unitpics/{UnitName}.pcx
        #                           --> /anims/{UnitName}_gadget.gaf
        # UnitFbiData.Objectname    --> /objects3d/{Objectname}.3do
        # UnitFbiData.Corpse        --> /features/corpses/{Corpse}_dead.tdf
        # UnitFbiData.Weapon1       --> /weapons/{UnitName}_weapon.tdf

        ## FeatureTDF
        # FeatureTDF.object        --> /objects3d/{object}.3do

        ## WeaponTDF
        # WeaponTDF.soundstart            --> /sounds/{soundstart}.wav
        # WeaponTDF.soundhit              --> /sounds/{soundhit}.wav
        # WeaponTDF.explosiongaf          --> /anims/{explosiongaf}.gaf
        # WeaponTDF.waterexplosiongaf     --> /anims/{explosiongaf}.gaf
        # WeaponTDF.lavaexplosiongaf      --> /anims/{explosiongaf}.gaf

        ## DownloadTDF
        # DownloadTDF.UnitName      --> UnitFbiData.UnitName
        # DownloadTDF.UnitMenu      --> UnitFbiData.UnitName

        if this_unit_has_weapons == True:
            weapon1primarykey = json_dict[0]['fields']['Weapon1']
            vanillaweaponmatchingpk = WeaponTDF.objects.filter(_OBJECT_KEY_NAME=weapon1primarykey)
            print('Does weapon1 match a Cavedog weapon? ')
            print((len(vanillaweaponmatchingpk) > 0))

        print('\nALL Dependency Keys:')
        print('UnitFbiData.UnitName : \t\t\t' + bcolors.purple + str(json_dict[0]['fields']['UnitName']) + bcolors.ENDC)
        print('UnitFbiData.Objectname : \t\t' + bcolors.purple + str(json_dict[0]['fields']['Objectname']) + bcolors.ENDC)
        print('UnitFbiData.Corpse : \t\t\t' + bcolors.purple + str(json_dict[0]['fields']['Corpse']) + bcolors.ENDC)
        if this_unit_has_weapons == True:
            print('UnitFbiData.Weapon1 : \t\t\t' + bcolors.purple + str(json_dict[0]['fields']['Weapon1']) + bcolors.ENDC)

        for tdf in corpseTDF:
            print('FeatureTDF._object : \t\t\t' + bcolors.purple + str(tdf._object) + bcolors.ENDC)
        for weaponTDF in tdf_list:
            # verify that both sounds exist in the database:
            soundstart_exists_nonCavedog = False
            soundhit_exists_nonCavedog = False
            soundstart_exists_cavedog = False
            soundhit_exists_cavedog = False
            soundstart = 'NIL'
            soundhit = 'NIL'
            try:
                soundstart = weaponTDF['soundstart']
            except:
                pass
            try:
                soundhit = weaponTDF['soundhit']
            except:
                pass
            # loop through all non-Cavedog sounds:
            for sfx in allsoundfiles:
                if soundstart.lower() == sfx.replace('.wav', ''):
                    soundstart_exists_nonCavedog = True
                if soundhit.lower() == sfx.replace('.wav', ''):
                    soundhit_exists_nonCavedog = True
            # loop through official Cavedog sounds:
            if soundstart_exists_nonCavedog == False:
                cavedog_soundstart_matches = SoundSetTDF.objects.filter(_OBJECT_KEY_NAME=soundstart)
                if len(cavedog_soundstart_matches) > 0:
                    print(soundstart + ' is an official Cavedog .wav file. ')
                    soundstart_exists_cavedog = True
            if soundhit_exists_nonCavedog == False:
                cavedog_soundhit_matches = SoundSetTDF.objects.filter(_OBJECT_KEY_NAME=soundhit)
                if len(cavedog_soundhit_matches) > 0:
                    print(soundhit + ' is an official Cavedog .wav file ')
                    soundhit_exists_cavedog = True

            print('')
            print('soundhit_exists_nonCavedog: ')
            print(soundhit_exists_nonCavedog)
            print('soundstart_exists_nonCavedog: ')
            print(soundstart_exists_nonCavedog)
            print('soundstart_exists_cavedog: ')
            print(soundstart_exists_cavedog)
            print('soundhit_exists_cavedog: ')
            print(soundhit_exists_cavedog)
            print('')

            print('WeaponTDF.soundstart : \t\t\t' + bcolors.purple + str(weaponTDF['soundstart']) + bcolors.ENDC)
            print('WeaponTDF.soundhit : \t\t\t' + bcolors.purple + str(weaponTDF['soundhit']) + bcolors.ENDC)
            try:
                print('WeaponTDF.explosiongaf : \t\t' + bcolors.purple + str(weaponTDF['explosiongaf']) + bcolors.ENDC)
            except:
                pass
            try:
                print('WeaponTDF.waterexplosiongaf : \t\t' + bcolors.purple + str(weaponTDF['waterexplosiongaf']) + bcolors.ENDC)
            except:
                pass
            try:
                print('WeaponTDF.lavaexplosiongaf : \t\t' + bcolors.purple + str(weaponTDF['lavaexplosiongaf']) + bcolors.ENDC)
            except:
                pass
        for tdf in downloadTDF:
            print('DownloadTDF.UNITMENU : \t\t\t' + bcolors.purple + str(tdf['UNITMENU']) + bcolors.ENDC)
            print('DownloadTDF.UNITNAME : \t\t\t' + bcolors.purple + str(tdf['UNITNAME']) + bcolors.ENDC)
        print('')





        dep_path_anims = '/anims/' #
        dep_path_download = '/download/' #
        dep_path_features = '/features/corpses/' #
        dep_path_objects3d = '/objects3d/' #
        dep_path_scripts = '/scripts/' #
        dep_path_sounds = '/sounds/'
        dep_path_unitpics =  '/unitpics/' #
        dep_path_units =  '/units/' #
        dep_path_weapons =  '/weapons/' #

        corpsefilename = json_dict[0]['fields']['Corpse']

        ### CHECK TO SEE IF THESE PATHS WORK
        # IF THEY DO, THEY WILL BE THE CHOSEN
        # DEPENDENCIES ASSOCIATED WITH THIS
        # 'UnitModAsset'
        animsGafPath = path_without_fbi + dep_path_anims + uname + '_gadget.gaf'            # anims     GAF
        scriptsCobPath = path_without_fbi + dep_path_scripts + uobjname + '.cob'            # scripts   COB
        unitpicsPcxPath = path_without_fbi + dep_path_unitpics + uname + '.pcx'             # unitpics  PCX
        objects3doPath = path_without_fbi + dep_path_objects3d + uobjname + '.3do'          # objects3d 3DO
        unitFbiPath = path_without_fbi + dep_path_units + uname + '.fbi'                    # units     FBI
        # unit_weapon_path                                                                  # weapons   TDF
        downloadTdfPath = path_without_fbi + dep_path_download + uname + '.tdf'                     # download  TDF
        featuresTdfPath = path_without_fbi + dep_path_features + corpsefilename.lower() + '.tdf'    # features  TDF
        # TODO: SOUNDS.TDF IS STILL INCOMPLETE ! ! !                                        # sounds    TDF

        anims_exists = bcolors.red + ' ✕ ' + bcolors.ENDC
        if os.path.exists(animsGafPath) == True:
            anims_exists = bcolors.green + ' ✓ ' + bcolors.ENDC
        # uobjname uname
        print(path_without_fbi + '' + # anims
              bcolors.green +
              dep_path_anims +
              bcolors.ENDC +
              bcolors.lightred +
              uname + '_gadget' +
              bcolors.ENDC
              + '.gaf' + anims_exists + ' !important ')

        download_exists = bcolors.red + ' ✕ ' + bcolors.ENDC
        if os.path.exists(downloadTdfPath) == True:
            download_exists = bcolors.green + ' ✓ ' + bcolors.ENDC
        print(path_without_fbi + '' +
              bcolors.green +
              dep_path_download +
              bcolors.ENDC +
              bcolors.lightred +
              uname +
              bcolors.ENDC
              + '.tdf' + download_exists)

        features_exist = bcolors.red + ' ✕ ' + bcolors.ENDC
        if os.path.exists(featuresTdfPath) == True:
            features_exist = bcolors.green + ' ✓ ' + bcolors.ENDC
        print(path_without_fbi + '' +
              bcolors.green +
              dep_path_features +
              bcolors.ENDC +
              bcolors.lightred +
              corpsefilename +
              bcolors.ENDC
              + '.tdf' + features_exist)

        objects3d_exists = bcolors.red + ' ✕ ' + bcolors.ENDC
        if os.path.exists(objects3doPath) == True:
            objects3d_exists = bcolors.green + ' ✓ ' + bcolors.ENDC
        print(path_without_fbi + '' +
              bcolors.green +
              dep_path_objects3d +
              bcolors.ENDC +
              bcolors.lightred +
              uobjname +
              bcolors.ENDC
              + '.3do' + objects3d_exists + ' !important ')

        scriptcob_exists = bcolors.red + ' ✕ ' + bcolors.ENDC
        if os.path.exists(scriptsCobPath) == True:
            scriptcob_exists = bcolors.green + ' ✓ ' + bcolors.ENDC
        print(path_without_fbi + '' +
              bcolors.green +
              dep_path_scripts +
              bcolors.ENDC +
              bcolors.lightred +
              uobjname +
              bcolors.ENDC
              + '.cob' + scriptcob_exists + ' !important ')

        sounds_exist = bcolors.red + ' ✕ ' + bcolors.ENDC
        print(path_without_fbi + '' +
              bcolors.green +
              dep_path_sounds +
              bcolors.ENDC +
              bcolors.lightred +
              uname +
              bcolors.ENDC
              + '.wav')

        unitpic_exists = bcolors.red + ' ✕ ' + bcolors.ENDC
        if os.path.exists(unitpicsPcxPath) == True:
            unitpic_exists = bcolors.green + ' ✓ ' + bcolors.ENDC
        print(path_without_fbi + '' +
              bcolors.green +
              dep_path_unitpics +
              bcolors.ENDC +
              bcolors.lightred +
              uname +
              bcolors.ENDC
              + '.pcx' + unitpic_exists + ' !important ')

        units_exist = bcolors.red + ' ✕ ' + bcolors.ENDC
        print(path_without_fbi + '' +
              bcolors.green +
              dep_path_units +
              bcolors.ENDC +
              bcolors.lightred +
              uname +
              bcolors.ENDC
              + '.fbi')


        weapon_exists = bcolors.red + ' ✕ ' + bcolors.ENDC
        if os.path.exists(unit_weapon_path) == True:
            weapon_exists = bcolors.green + ' ✓ ' + bcolors.ENDC
        # print(path_without_fbi + '' +
        #       bcolors.green +
        #       dep_path_weapons +
        #       bcolors.ENDC +
        #       bcolors.lightred +
        #       uname + '_weapon' +
        #       bcolors.ENDC
        #       + '.tdf' + weapon_exists)
        print(unit_weapon_path + weapon_exists)
        print('')


        print('unitpic : ' + bcolors.red + str(dp_unitpic) + bcolors.ENDC)
        print('unit3do : ' + bcolors.red + str(dp_3dmodel) + bcolors.ENDC)
        print('unitcob : ' + bcolors.red + str(dp_script) + bcolors.ENDC)
        print('ucorpse : ' + bcolors.red + str(dp_corpses) + bcolors.ENDC)
        print('hasWeap : ' + bcolors.red + str(this_unit_has_weapons) + bcolors.ENDC)
        print('weapsOk : ' + bcolors.red + str(dp_allweapons) + bcolors.ENDC)
        print('downlod : ' + bcolors.red + str(dp_download) + bcolors.ENDC)


        soundsInSQL = SoundSetTDF.objects.all()
        print(bcolors.purple + 'queried sounds from SQL : ' + bcolors.ENDC + bcolors.lightred + str(soundsInSQL) + bcolors.ENDC)
        print(bcolors.purple + 'total sounds in SQL : ' + bcolors.ENDC + bcolors.lightred + str(len(soundsInSQL)) + bcolors.ENDC)

        return Response(json_dict)
